[{"question": "Find all tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Lists all tables in the public schema."}, {"question": "List all column names of [table_name].", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query returns all column names of the specified table."}, {"question": "Find me all fields in [table_name] table", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query lists all fields in the specified table."}, {"question": "How can I fetch the columns of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query retrieves the column names of the given table."}, {"question": "What is the query to get all column names of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query fetches all the column names of a specific table."}, {"question": "How do I list column names of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query lists the column names of the specified table."}, {"question": "What is the total number of records in the [table_name] table?", "query": "SELECT COUNT(*) AS total_records FROM [table_name];", "answer": "Returns the total count of rows in the [table_name] table."}, {"question": "Show me all data from the [table_name] table.", "query": "SELECT * FROM [table_name];", "answer": "Returns all rows and columns from the {table_name} table."}, {"question": "How can I view all records in the [table_name] table?", "query": "SELECT * FROM [table_name];", "answer": "This query displays all records from the specified table."}, {"question": "Show me [x] records from the [table_name] table.", "query": "SELECT * FROM [table_name] LIMIT [x];", "answer": "Returns the first [x] rows from the [table_name] table."}, {"question": "What are the distinct values in the [column_name] column of the [table_name] table?", "query": "SELECT DISTINCT [column_name] FROM [table_name];", "answer": "Returns all unique values present in the [column_name] column of the [table_name] table."}, {"question": "Find all records where [column_name] is equal to [value] in the [table_name] table.", "query": "SELECT * FROM [table_name] WHERE [column_name] = [value];", "answer": "Returns all rows where the [column_name] is equal to [value] in the [table_name] table."}, {"question": "What is the average, maximum, or minimum value of [column_name] in the [table_name] table?", "query": "SELECT AVG([column_name]) AS average_value, MAX([column_name]) AS max_value, MIN([column_name]) AS min_value FROM [table_name];", "answer": "Returns the average, maximum, and minimum values of [column_name] in the [table_name] table."}, {"question": "How many records have [column_name] > [value]?", "query": "SELECT COUNT(*) AS record_count FROM [table_name] WHERE [column_name] > [value];", "answer": "Returns the number of rows where the value in [column_name] is greater than [value]."}, {"question": "What is the sum of [column_name] grouped by [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the total sum of [column_name], grouped by [grouping_column]."}, {"question": "How many records exist for each [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the count of records for each unique value in [grouping_column]."}, {"question": "Give me the top 5 [grouping_column]s with the highest total [column_name].", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "Returns the top 5 [grouping_column]s with the highest total sum of [column_name]."}, {"question": "Find the percentage distribution of [column_name] grouped by [grouping_column].", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the percentage distribution of [column_name] for each unique value of [grouping_column]."}, {"question": "Show me the top 10 highest/lowest [column_name] from [table_name].", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; For lowest values, change DESC to ASC", "answer": "Returns the top 10 records with the highest values in [column_name]. Use ASC for the lowest values."}, {"question": "Find all records where [column_name] contains 'value'.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "Returns all records where [column_name] contains the substring 'value'."}, {"question": "List records where [column_name] falls between [value1] and [value2].", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "Returns all records where [column_name] is within the range of [value1] and [value2]."}, {"question": "Sort the [table_name] table by [column_name] in descending order.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "Returns all records from [table_name] sorted by [column_name] in descending order."}, {"question": "Combine data from [table1] and [table2] based on [common_column].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Returns the combined data from [table1] and [table2] where [common_column] matches in both tables."}, {"question": "Find all records in [table1] that have no matching records in [table2].", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "Returns all records from [table1] that do not have matching records in [table2]."}, {"question": "What is the total [column_name] from [table1] grouped by [table2.column_name]?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "Returns the total sum of [column_name] from [table1], grouped by [table2].[column_name]."}, {"question": "Get the details of [table1] and include matching rows from [table2].", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Returns all columns from both [table1] and [table2] for matching records based on [common_column]."}, {"question": "Combine data from [table1], [table2], and [table3] where [table1.column_name] = [table2.column_name] and [table2.column_name] = [table3.column_name], and filter for rows where [table1.date] is greater than [date_threshold].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > [date_threshold];", "answer": "Returns all columns from [table1], [table2], and [table3] where the join condition is met, and the date in [table1] is greater than [date_threshold]."}, {"question": "Get the total [column_name] from [table1], where records are joined with [table2] and [table3], grouped by [table3.column_name], and filter for records where [table2.column_name] = 'value' and [table1.date] is in the last [X] days.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] > CURRENT_DATE - INTERVAL '[X] days' GROUP BY [table3].[column_name];", "answer": "Returns the total sum of [column_name] from [table1], grouped by [table3.column_name], filtered by [table2.column_name] = 'value' and [table1.date] within the last 30 days."}, {"question": "Find all records from [table1] with their corresponding records from [table2] and [table3], where [table1.column_name] > [value], [table2.column_name] = 'active', and sort the results by [table3.column_name] in ascending order.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "Returns all columns from [table1], [table2], and [table3] based on the specified filter conditions and ordered by [table3.column_name] in ascending order."}, {"question": "Calculate the total [column_name] from [table1] grouped by [table2.column_name], filter for records where [table2.status] = 'approved' and [table1.date] is between '2023-01-01' and '2023-12-31', and include a count of records for each group.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "Returns the total sum and count of [column_name] from [table1], grouped by [table2.column_name], filtered by the status 'approved' and the date range in 2023."}, {"question": "Find all records added/updated in the last [X].", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '[X] days';", "answer": "Returns all records from [table_name] that were added or updated in the last 7 days, assuming the presence of an [updated_at] column."}, {"question": "What is the monthly/yearly total of [column_name] from [table_name]?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "Returns the total sum of [column_name] for each month, grouped by [date_column]."}, {"question": "Show me trends in [column_name] grouped by [time_column].", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "Returns the trend of [column_name] over time, grouped by [time_column] (e.g., day, month, year)."}, {"question": "What is the earliest/latest [column_name] in [table_name]?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "Returns the earliest value in [column_name] from [table_name]."}, {"question": "What is the standard deviation of [column_name] in [table_name]?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "Returns the standard deviation of [column_name] from [table_name]."}, {"question": "Show me the distribution (histogram-like data) of [column_name].", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "Returns the distribution of values in [column_name], showing how often each value appears."}, {"question": "Which [column_name] value appears most frequently in [table_name]?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "Returns the most frequent value of [column_name] from [table_name]."}, {"question": "What is the correlation between [column_name1] and [column_name2] in [table_name]?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "Returns the Pearson correlation coefficient between [column_name1] and [column_name2] in [table_name]."}, {"question": "Calculate the variance of [column_name] for records where [column_name2] > [value].", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "Returns the variance of [column_name] from records where [column_name2] exceeds a certain value."}, {"question": "Show me the average, minimum, and maximum values of [column_name] by [category_column] in [table_name].", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "Returns the average, minimum, and maximum values of [column_name], grouped by [category_column]."}, {"question": "What is the median value of [column_name] in [table_name]?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "Returns the median value of [column_name] from [table_name]."}, {"question": "Calculate the moving average of [column_name] for the last 30 days, grouped by [category_column].", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "Returns the moving average of [column_name] for the last 30 days, grouped by [category_column]."}, {"question": "Find the skewness of [column_name] in [table_name].", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "Returns the skewness of [column_name], which measures the asymmetry of the data distribution."}, {"question": "Show me the cumulative sum of [column_name] by [category_column] over time, ordered by [date_column].", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "Returns the cumulative sum of [column_name], grouped by [category_column], and ordered by [date_column]."}, {"question": "Calculate the interquartile range (IQR) of [column_name] in [table_name].", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "Returns the interquartile range (IQR) of [column_name] in [table_name]."}, {"question": "Find the ratio of [column_name1] to [column_name2] for each record and filter for records where the ratio is greater than [value].", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "Returns the ratio of [column_name1] to [column_name2] and filters for records where the ratio exceeds a certain value."}, {"question": "Show the rolling sum of [column_name] over the last 5 records, ordered by [date_column].", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "Returns the rolling sum of [column_name] over the last 5 records, ordered by [date_column]."}, {"question": "Calculate the percentile rank of [column_name] in [table_name] for each record.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "Returns the percentile rank of [column_name] for each record in [table_name]."}, {"question": "Insert a new record into [table_name] with [column1: value1, column2: value2].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "Inserts a new record with values for [column1] and [column2] into [table_name]."}, {"question": "Update [column_name] to [new_value] where [condition].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "Updates the value of [column_name] to [new_value] for records matching the [condition]."}, {"question": "Delete records from [table_name] where [condition].", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "Deletes records from [table_name] where the [condition] is met."}, {"question": "Create a new table [new_table_name] with columns [column1, column2, ...].", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "Creates a new table called [new_table_name] with the specified columns and data types."}, {"question": "Insert multiple records into [table_name].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "Inserts multiple records into [table_name] with specified values for [column1] and [column2]."}, {"question": "Update multiple columns in [table_name] where [condition].", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "Updates multiple columns ([column1] and [column2]) with new values where the [condition] is met."}, {"question": "Create a table with constraints (e.g., primary key, unique, not null).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Creates a new table with primary key, unique, and not null constraints."}, {"question": "Insert a record with a default value for a column.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "Inserts a new record into [table_name], with [column2] using its default value."}, {"question": "Update a record and set a column to NULL where [condition].", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "Updates records in [table_name] and sets [column_name] to NULL where the [condition] is met."}, {"question": "Create a table with a foreign key reference to another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a new table with a foreign key referencing another table's column."}, {"question": "Insert data from one table into another table.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "Inserts data from [table_name1] into [table_name2] based on a condition."}, {"question": "Update a record to increase/decrease a column's value.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "Increases the value of [column_name] by [value] for records matching [condition]."}, {"question": "Delete all records from [table_name].", "query": "DELETE FROM [table_name];", "answer": "Deletes all records from [table_name] but does not drop the table."}, {"question": "Drop a table from the database.", "query": "DROP TABLE [table_name];", "answer": "Drops the entire table from the database, including its structure and data."}, {"question": "Alter an existing table by adding a new column.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Adds a new column to an existing table."}, {"question": "Alter a table to modify an existing column's data type.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Alters the data type of an existing column in the table."}, {"question": "Alter a table to drop a column.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Drops a column from an existing table."}, {"question": "Create a new table with a composite primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "Creates a new table with a composite primary key consisting of [column1] and [column2]."}, {"question": "Insert data with a subquery to fetch values from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Inserts data into [table_name] by selecting values from another table ([other_table]) based on a condition."}, {"question": "Truncate a table (removes all records but keeps the structure).", "query": "TRUNCATE TABLE [table_name];", "answer": "Removes all records from [table_name] but preserves its structure and schema."}, {"question": "Insert a new record into [table_name] with default values for all columns.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Inserts a new record with the default values defined for the columns in the table."}, {"question": "Update multiple rows in [table_name] where [column_name] equals [old_value] and set [column_name] to [new_value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "Updates all records where [column_name] equals [old_value] and sets it to [new_value]."}, {"question": "Update the column [column_name] for a specific record where the primary key [id] equals [value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Updates the value of [column_name] for the record with primary key [id] equal to [value]."}, {"question": "Delete all records in [table_name] where [column_name] is NULL.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "Deletes records where [column_name] is NULL."}, {"question": "Create a table [new_table_name] with a column that references another table\u2019s primary key (foreign key).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a table with a foreign key that references a primary key in another table."}, {"question": "Update [table_name] and set [column_name] to [value] for rows where [column_name] is greater than [value].", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "Updates [column_name] to [value] for records where [column_name] is greater than the specified value."}, {"question": "Delete records in [table_name] where [column_name] is less than [value].", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "Deletes records where the value of [column_name] is less than the specified value."}, {"question": "Create a new table with a column that stores a unique constraint.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "Creates a new table with a unique constraint on [column1]."}, {"question": "Alter a table to add a NOT NULL constraint to an existing column.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Alters the table to ensure that [column_name] cannot have NULL values."}, {"question": "Insert data into [table_name] where [column_name] is calculated by combining values from two columns.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Inserts a new record and calculates [column3] as the combination of [value1] and [value2]."}, {"question": "Update records in [table_name] by setting [column_name] to the average value of that column.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "Updates all records in [table_name], setting [column_name] to its average value."}, {"question": "Create a new table [new_table_name] and include a timestamp column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Creates a new table and automatically inserts the current timestamp into [created_at] when a new record is added."}, {"question": "Insert data into [table_name] based on a condition from another table (using a subquery).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "Inserts data into [table_name] from [other_table], where [column3] is greater than [value]."}, {"question": "Delete duplicate rows from [table_name] based on [column_name] keeping only the first occurrence.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate rows in [table_name] based on [column_name], keeping the first occurrence."}, {"question": "Insert a record into [table_name] and use a subquery for one of the column values.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "Inserts a new record into [table_name], where [column2] is set by a subquery fetching data from [other_table]."}, {"question": "Create a new table with a composite foreign key referencing multiple columns from another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Creates a new table with a composite foreign key referencing multiple columns from [referenced_table]."}, {"question": "Update records in [table_name] by setting a column value based on a condition and include a CASE statement.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "Updates records in [table_name], setting [column_name] to 'High' or 'Low' based on the value comparison."}, {"question": "Alter a table by adding a unique constraint to multiple columns.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "Alters [table_name] by adding a unique constraint on [column1] and [column2]."}, {"question": "Create a view to summarize data from [table_name].", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "Creates a view that summarizes data by counting [column2] grouped by [column1]."}, {"question": "Create a trigger that automatically updates a column [timestamp_column] to the current time when a row is updated.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "Creates a trigger that updates the [timestamp_column] whenever a record in [table_name] is updated."}, {"question": "Truncate a table and reset its identity column.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "Removes all records from [table_name] and resets the identity column to its starting value."}, {"question": "Delete records older than a specific date.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "Deletes records where [date_column] is older than the specified date."}, {"question": "Insert a record into [table_name] with a subquery fetching data from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Inserts data into [table_name] based on a select query from [other_table]."}, {"question": "Add a CHECK constraint to a column to ensure values fall within a specific range.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "Adds a constraint to ensure values in [column_name] are between 0 and 100."}, {"question": "Delete records from [table_name] where [column_name] is duplicated.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate records from [table_name], keeping the first occurrence based on [column_name]."}, {"question": "What are the triggers defined on the [table_name] table?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Returns the triggers defined on the specified table."}, {"question": "List all stored procedures in the database:", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Returns all stored procedures in the public schema."}, {"question": "What is the current schema of the [table_name] table?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Returns the schema of the specified table."}, {"question": "Show the foreign key relationships of [table_name] with other tables:", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign key relationships of the specified table with other tables."}, {"question": "What are the columns that have indexes in the [table_name] table?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the columns that have indexes in the specified table."}, {"question": "What is the size of the indexes in the database?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Returns the size of the indexes in the specified table (PostgreSQL)."}, {"question": "How many indexes exist on [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the number of indexes on the specified table."}, {"question": "Show me all index definitions in the database:", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Returns all index definitions in the specified schema."}, {"question": "What are the types of indexes used on [table_name]?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the types of indexes used on the specified table."}, {"question": "What are the names of the indexes associated with the [table_name] table?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the names of the indexes associated with the specified table."}, {"question": "Are there any composite indexes on [table_name]? If so, which columns are included?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Returns the composite indexes on the specified table and the columns included in each."}, {"question": "Show the index creation scripts for [table_name]:", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Returns the index creation scripts for the specified table (PostgreSQL)."}, {"question": "What foreign keys exist between [table_name] and other tables?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys between the specified table and other tables."}, {"question": "How many foreign key constraints are there in [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns the number of foreign key constraints in the specified table."}, {"question": "What is the referential integrity rule (e.g., CASCADE, SET NULL) for the foreign keys in [table_name]?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Returns the referential integrity rules for the foreign keys in the specified table."}, {"question": "List all parent tables for foreign keys in [table_name]:", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns all parent tables for foreign keys in the specified table."}, {"question": "List all child tables that reference [table_name] via foreign keys:", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns all child tables that reference the specified table via foreign keys."}, {"question": "List all constraints on the [table_name] table:", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Returns all constraints on the specified table."}, {"question": "Are there any foreign key violations in [table_name]? If so, list them:", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Returns any foreign key violations in the specified table."}, {"question": "Show the unique constraints on the [table_name] table:", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Returns the unique constraints on the specified table."}, {"question": "List all check constraints in the database schema:[schema_name]", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = '[schema_name]';", "answer": "Returns all check constraints in the specified schema."}, {"question": "What are the columns involved in primary key constraints for [table_name]?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Returns the columns involved in primary key constraints for the specified table."}, {"question": "What views depend on [table_name]?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns the views that depend on the specified table."}, {"question": "Show me the data types of the columns in [table_name].", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the data types of the columns in the specified table."}, {"question": "What is the most common [product/behavior] combination by [users/customers]?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Returns the most common product or behavior combination by users or customers."}, {"question": "Find all [users/customers] who have provided feedback in the last [time_period].", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns all users or customers who have provided feedback in the last specified time period."}, {"question": "Find [products/records] that are low in stock.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Returns products or records that are low in stock."}, {"question": "List all [products] that haven\u2019t been sold in the last [time_period].", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Returns all products that haven\u2019t been sold in the last specified time period."}, {"question": "Find the [products] with the highest [return/complaint] rate.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "Returns the products with the highest return or complaint rate."}, {"question": "What are the top-selling [products] in the last [time_period]?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Returns the top-selling products in the last specified time period."}, {"question": "Find [products] that have been on sale for the longest.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "Returns the products that have been on sale for the longest time."}, {"question": "Identify [products] that have been out of stock for more than [time_period].", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns products that have been out of stock for more than the specified time period."}, {"question": "What is the total [revenue/cost] for the [time_period]?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total revenue or cost for the specified time period."}, {"question": "Find the [expenses] for a given [time_period] and categorize them.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Returns the expenses for a given time period, categorized by type."}, {"question": "Identify the top [N] highest revenue-generating [items/products].", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "Returns the top N highest revenue-generating items or products."}, {"question": "What is the total amount of [pending/unpaid] [invoices/orders]?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Returns the total amount of pending or unpaid invoices or orders."}, {"question": "What is the total [discount/bonus] given over the last [time_period]?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total discount or bonus given over the last specified time period."}, {"question": "Compare [revenue/cost] against [expenses/other_metric] for the given [time_period].", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns a comparison of revenue or cost against expenses or another metric for the given time period."}, {"question": "Identify the top-performing keywords/ad_copy for PPC_campaign.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Returns the top-performing keywords and ad copy for a specific PPC campaign."}, {"question": "List all orders/transactions with suspicious billing_address/payment_method.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "Returns all orders or transactions with suspicious billing addresses or payment methods."}, {"question": "Find customers/users who have not updated their contact_info in the last time period.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Returns customers or users who have not updated their contact information in the specified time period."}, {"question": "Identify products/services that are not compliant with safety/quality standards.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "Returns products or services that are not compliant with safety or quality standards."}, {"question": "What are the flagged transactions/orders based on fraud_detection_rule?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Returns transactions or orders that have been flagged based on fraud detection rules."}, {"question": "Find all employees overdue for mandatory training/certification.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Returns employees who are overdue for mandatory training or certification."}, {"question": "Find records with missing data in critical fields like [field_name].", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Returns records with missing data in critical fields."}, {"question": "What is the percentage of incomplete records in [table_name]?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Returns the percentage of incomplete records in the specified table."}, {"question": "List all products/services with no description or incomplete details.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "Returns all products or services with no description or incomplete details."}, {"question": "Check for inconsistent data across different fields/columns (e.g., date formats).", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Returns records with inconsistent data across different fields or columns."}, {"question": "Find records that failed validation/checks.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Returns records that failed validation or checks."}, {"question": "Compare metric1 in current_period to metric2 in previous_period.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Returns a comparison of metric1 in the current period to metric2 in the previous period."}, {"question": "How do metrics compare month-to-month (e.g., sales, expenses)?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Returns a month-to-month comparison of metrics such as sales and expenses."}, {"question": "Compare employee performance based on metric1 vs metric2.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "Returns a comparison of employee performance based on metric1 and metric2."}, {"question": "Compare product1 vs product2 in terms of sales/returns.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "Returns a comparison of product1 and product2 in terms of sales and returns."}, {"question": "Find the growth rate between two periods for metric.", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Returns the growth rate between two periods for a specified metric."}, {"question": "Find the average rating for [product_name].", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Returns the average rating for a specified product."}, {"question": "List all products with a rating below X stars.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Returns all products with a rating below a specified number of stars."}, {"question": "Find all reviews for [product_name].", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Returns all reviews for a specified product."}, {"question": "How does customer feedback correlate with returns/complaints?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "Returns the correlation between customer feedback and returns or complaints."}, {"question": "Identify products with the highest customer satisfaction ratings.", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "Returns the products with the highest customer satisfaction ratings."}, {"question": "What percentage of orders were shipped late in [time_period]?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Returns the percentage of orders that were shipped late in a specified time period."}, {"question": "Find all orders that were shipped within [X] days of placement.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Returns all orders that were shipped within a specified number of days of placement."}, {"question": "Identify the average shipping cost/processing time per order.", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Returns the average shipping cost and processing time per order."}, {"question": "List all orders that require expedited/overnight shipping.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "Returns all orders that require expedited or overnight shipping."}, {"question": "Find orders that have been canceled after shipment.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "Returns all orders that have been canceled after shipment."}, {"question": "Find all users who have logged in within the last [X] days.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Returns all users who have logged in within the last specified number of days."}, {"question": "What is the churn rate of [users/customers] within the last [time_period]?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Returns the churn rate of users or customers within the last specified time period."}, {"question": "Find users who have not made a purchase after their first visit in [time_period].", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Returns users who have not made a purchase after their first visit in the specified time period."}, {"question": "Identify users with the highest lifetime value (LTV).", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "Returns the users with the highest lifetime value."}, {"question": "Find the top [N] users based on purchase frequency.", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Returns the top N users based on purchase frequency."}, {"question": "How many rows are there in the {table_name} table?", "query": "SELECT COUNT(*) AS total_records FROM {table_name};", "answer": "Provides the total number of rows in the {table_name} table."}, {"question": "Retrieve all data from the {table_name} table.", "query": "SELECT * FROM {table_name};", "answer": "Fetches all rows and columns from the {table_name} table."}, {"question": "What unique values exist in the {column_name} column of the {table_name} table?", "query": "SELECT DISTINCT {column_name} FROM {table_name};", "answer": "Lists all distinct values in the {column_name} column of the {table_name} table."}, {"question": "Find all rows where {column_name} equals '{value}'.", "query": "SELECT * FROM {table_name} WHERE {column_name} = '{value}';", "answer": "Returns all rows where {column_name} is equal to {value}."}, {"question": "What are the average, maximum, and minimum values of {column_name} in {table_name}?", "query": "SELECT AVG({column_name}) AS average_value, MAX({column_name}) AS maximum_value, MIN({column_name}) AS minimum_value FROM {table_name};", "answer": "Provides the average, maximum, and minimum values of {column_name} in the {table_name} table."}, {"question": "How many rows have {column_name} greater than {value}?", "query": "SELECT COUNT(*) AS count_records FROM {table_name} WHERE {column_name} > {value};", "answer": "Counts the number of rows where {column_name} is greater than {value}."}, {"question": "What is the sum of [column_name] grouped by [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "Calculates the total sum of [column_name], grouped by [grouping_column]."}, {"question": "How many rows exist for each [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "Counts the number of rows for each unique value in [grouping_column]."}, {"question": "Show the top 5 [grouping_column]s with the highest total [column_name].", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "Lists the top 5 [grouping_column]s with the highest total sum of [column_name]."}, {"question": "What is the percentage distribution of [column_name] grouped by [grouping_column]?", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "Shows the percentage distribution of [column_name] for each unique value of [grouping_column]."}, {"question": "Show the top 10 highest/lowest [column_name] values from [table_name].", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; For lowest values, change DESC to ASC", "answer": "Lists the top 10 records with the highest values in [column_name]. Use ASC for the lowest values."}, {"question": "Find all rows where [column_name] contains 'value'.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "Returns all rows where [column_name] contains the substring 'value'."}, {"question": "List rows where [column_name] is between [value1] and [value2].", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "Shows all rows where [column_name] is within the range of [value1] and [value2]."}, {"question": "Sort the [table_name] table by [column_name] in descending order.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "Sorts all rows from [table_name] by [column_name] in descending order."}, {"question": "Combine data from [table1] and [table2] based on [common_column].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Combines data from [table1] and [table2] where [common_column] matches in both tables."}, {"question": "Find all rows in [table1] that have no matching rows in [table2].", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "Lists all rows from [table1] that do not have matching rows in [table2]."}, {"question": "What is the total [column_name] from [table1] grouped by [table2.column_name]?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "Calculates the total sum of [column_name] from [table1], grouped by [table2].[column_name]."}, {"question": "Get the details of [table1] and include matching rows from [table2].", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Fetches all columns from both [table1] and [table2] for matching rows based on [common_column]."}, {"question": "Combine data from [table1], [table2], and [table3] where [table1.column_name] = [table2.column_name] and [table2.column_name] = [table3.column_name], and filter for rows where [table1.date] is greater than '2023-01-01'.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "Combines data from [table1], [table2], and [table3] where the join condition is met, and the date in [table1] is greater than '2023-01-01'."}, {"question": "Get the total [column_name] from [table1], where rows are joined with [table2] and [table3], grouped by [table3.column_name], and filter for rows where [table2.column_name] = 'value' and [table1.date] is in the last 30 days.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "Calculates the total sum of [column_name] from [table1], grouped by [table3.column_name], filtered by [table2.column_name] = 'value' and [table1.date] within the last 30 days."}, {"question": "Find all rows from [table1] with their corresponding rows from [table2] and [table3], where [table1.column_name] > [value], [table2.column_name] = 'active', and sort the results by [table3.column_name] in ascending order.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "Lists all columns from [table1], [table2], and [table3] based on the specified filter conditions and ordered by [table3.column_name] in ascending order."}, {"question": "Calculate the total [column_name] from [table1] grouped by [table2.column_name], filter for rows where [table2.status] = 'approved' and [table1.date] is between '2023-01-01' and '2023-12-31', and include a count of rows for each group.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "Calculates the total sum and count of [column_name] from [table1], grouped by [table2.column_name], filtered by the status 'approved' and the date range in 2023."}, {"question": "Find all rows added or updated in the last 7 days.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "Lists all rows from [table_name] that were added or updated in the last 7 days, assuming the presence of an [updated_at] column."}, {"question": "What is the monthly or yearly total of [column_name] from [table_name]?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "Calculates the total sum of [column_name] for each month, grouped by [date_column]."}, {"question": "Show trends in [column_name] grouped by [time_column].", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "Displays the trend of [column_name] over time, grouped by [time_column] (e.g., day, month, year)."}, {"question": "What is the earliest or latest [column_name] in [table_name]?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "Provides the earliest value in [column_name] from [table_name]."}, {"question": "What is the standard deviation of [column_name] in [table_name]?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "Calculates the standard deviation of [column_name] from [table_name]."}, {"question": "Show the distribution (histogram-like data) of [column_name].", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "Displays the distribution of values in [column_name], showing how often each value appears."}, {"question": "Which [column_name] value appears most frequently in [table_name]?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "Identifies the most frequent value of [column_name] from [table_name]."}, {"question": "What is the correlation between [column_name1] and [column_name2] in [table_name]?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "Calculates the Pearson correlation coefficient between [column_name1] and [column_name2] in [table_name]."}, {"question": "Calculate the variance of [column_name] for rows where [column_name2] is greater than [value].", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "Computes the variance of [column_name] from rows where [column_name2] exceeds a certain value."}, {"question": "Show the average, minimum, and maximum values of [column_name] by [category_column] in [table_name].", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "Provides the average, minimum, and maximum values of [column_name], grouped by [category_column]."}, {"question": "What is the median value of [column_name] in [table_name]?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "Calculates the median value of [column_name] from [table_name]."}, {"question": "Calculate the moving average of [column_name] for the last 30 days, grouped by [category_column].", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "Computes the moving average of [column_name] for the last 30 days, grouped by [category_column]."}, {"question": "Find the skewness of [column_name] in [table_name].", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "Calculates the skewness of [column_name], which measures the asymmetry of the data distribution."}, {"question": "Show the cumulative sum of [column_name] by [category_column] over time, ordered by [date_column].", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "Displays the cumulative sum of [column_name], grouped by [category_column], and ordered by [date_column]."}, {"question": "Calculate the interquartile range (IQR) of [column_name] in [table_name].", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "Computes the interquartile range (IQR) of [column_name] in [table_name]."}, {"question": "Find the ratio of [column_name1] to [column_name2] for each row and filter for rows where the ratio is greater than [value].", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "Calculates the ratio of [column_name1] to [column_name2] and filters for rows where the ratio exceeds a certain value."}, {"question": "Show the rolling sum of [column_name] over the last 5 rows, ordered by [date_column].", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "Displays the rolling sum of [column_name] over the last 5 rows, ordered by [date_column]."}, {"question": "Calculate the percentile rank of [column_name] in [table_name] for each row.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "Computes the percentile rank of [column_name] for each row in [table_name]."}, {"question": "Add a new entry to [table_name] with values for [column1] and [column2].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "Adds a new entry with specified values for [column1] and [column2] into [table_name]."}, {"question": "Modify [column_name] to [new_value] where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "Modifies the value of [column_name] to [new_value] for records that meet the [condition]."}, {"question": "Remove entries from [table_name] where [condition] is true.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "Removes entries from [table_name] where the [condition] is true."}, {"question": "Create a new table [new_table_name] with specified columns [column1, column2, ...].", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "Creates a new table named [new_table_name] with the specified columns and data types."}, {"question": "Add multiple entries to [table_name].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "Adds multiple entries to [table_name] with specified values for [column1] and [column2]."}, {"question": "Modify multiple columns in [table_name] where [condition] is met.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "Modifies multiple columns ([column1] and [column2]) with new values where the [condition] is met."}, {"question": "Create a table with constraints like primary key, unique, and not null.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Creates a new table with primary key, unique, and not null constraints."}, {"question": "Add an entry with a default value for a column.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "Adds a new entry into [table_name], with [column2] using its default value."}, {"question": "Set a column to NULL for records where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "Sets [column_name] to NULL for records in [table_name] where the [condition] is met."}, {"question": "Create a table with a foreign key reference to another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a new table with a foreign key referencing another table's column."}, {"question": "Insert data from one table into another based on a condition.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "Inserts data from [table_name1] into [table_name2] based on a condition."}, {"question": "Increase or decrease a column's value for records where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "Increases the value of [column_name] by [value] for records matching [condition]."}, {"question": "Remove all entries from [table_name].", "query": "DELETE FROM [table_name];", "answer": "Removes all entries from [table_name] but does not drop the table."}, {"question": "Remove a table from the database.", "query": "DROP TABLE [table_name];", "answer": "Removes the entire table from the database, including its structure and data."}, {"question": "Add a new column to an existing table.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Adds a new column to an existing table."}, {"question": "Change the data type of an existing column in a table.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Changes the data type of an existing column in the table."}, {"question": "Remove a column from an existing table.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Removes a column from an existing table."}, {"question": "Create a new table with a composite primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "Creates a new table with a composite primary key consisting of [column1] and [column2]."}, {"question": "Insert data using a subquery to fetch values from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Inserts data into [table_name] by selecting values from another table ([other_table]) based on a condition."}, {"question": "Remove all entries from a table but keep its structure.", "query": "TRUNCATE TABLE [table_name];", "answer": "Removes all entries from [table_name] but preserves its structure and schema."}, {"question": "Add a new entry with default values for all columns.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Adds a new entry with the default values defined for the columns in the table."}, {"question": "Update multiple rows where [column_name] equals [old_value] and set it to [new_value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "Updates all records where [column_name] equals [old_value] and sets it to [new_value]."}, {"question": "Update a specific record where the primary key [id] equals [value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Updates the value of [column_name] for the record with primary key [id] equal to [value]."}, {"question": "Remove all entries where [column_name] is NULL.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "Removes entries where [column_name] is NULL."}, {"question": "Create a table with a column that references another table\u2019s primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a table with a foreign key that references a primary key in another table."}, {"question": "Update [column_name] to [value] for rows where [column_name] is greater than [value].", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "Updates [column_name] to [value] for records where [column_name] is greater than the specified value."}, {"question": "Remove entries where [column_name] is less than [value].", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "Removes entries where the value of [column_name] is less than the specified value."}, {"question": "Create a new table with a unique constraint on a column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "Creates a new table with a unique constraint on [column1]."}, {"question": "Add a NOT NULL constraint to an existing column.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Adds a NOT NULL constraint to an existing column in the table."}, {"question": "Insert data where a column is calculated by combining values from two columns.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Adds a new entry and calculates [column3] as the combination of [value1] and [value2]."}, {"question": "Set a column value to the average value of that column.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "Sets [column_name] to its average value for all records in [table_name]."}, {"question": "Create a new table with a timestamp column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Creates a new table and automatically inserts the current timestamp into [created_at] when a new entry is added."}, {"question": "Insert data based on a condition from another table using a subquery.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "Adds data into [table_name] from [other_table], where [column3] is greater than [value]."}, {"question": "Remove duplicate rows based on [column_name], keeping only the first occurrence.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Removes duplicate rows in [table_name] based on [column_name], keeping the first occurrence."}, {"question": "Add a new entry and use a subquery for one of the column values.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "Adds a new entry into [table_name], where [column2] is set by a subquery fetching data from [other_table]."}, {"question": "Create a new table with a composite foreign key referencing multiple columns from another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Creates a new table with a composite foreign key referencing multiple columns from [referenced_table]."}, {"question": "Update records by setting a column value based on a condition using a CASE statement.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "Updates records in [table_name], setting [column_name] to 'High' or 'Low' based on the value comparison."}, {"question": "Add a unique constraint to multiple columns in a table.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "Adds a unique constraint on [column1] and [column2] in [table_name]."}, {"question": "Create a view to aggregate data from a table.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "Creates a view that aggregates data by counting [column2] grouped by [column1]."}, {"question": "Set up a trigger to automatically update a timestamp column when a row is modified.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "Creates a trigger that updates the [timestamp_column] whenever a row in [table_name] is modified."}, {"question": "Clear a table and reset its auto-increment column.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "Clears all records from [table_name] and resets the auto-increment column."}, {"question": "Remove records older than a certain date.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "Deletes records from [table_name] where [date_column] is older than the specified date."}, {"question": "Insert a record into [table_name] using data from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Inserts data into [table_name] based on a select query from [other_table]."}, {"question": "Add a constraint to ensure a column's values are within a specific range.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "Adds a check constraint to ensure values in [column_name] are between 0 and 100."}, {"question": "Delete duplicate records from [table_name] based on a column.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate records from [table_name], keeping the first occurrence based on [column_name]."}, {"question": "List the triggers defined on the [table_name] table.", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Returns the triggers defined on the specified table."}, {"question": "Show all stored procedures in the database.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Returns all stored procedures in the public schema."}, {"question": "What is the schema of the [table_name] table?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Returns the schema of the specified table."}, {"question": "Show the foreign key relationships of [table_name] with other tables.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign key relationships of the specified table with other tables."}, {"question": "Which columns in [table_name] have indexes?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the columns that have indexes in the specified table."}, {"question": "What is the size of the indexes in the database?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Returns the size of the indexes in the specified table (PostgreSQL)."}, {"question": "How many indexes are there on [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the number of indexes on the specified table."}, {"question": "Show all index definitions in the database.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Returns all index definitions in the specified schema."}, {"question": "What types of indexes are used on [table_name]?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the types of indexes used on the specified table."}, {"question": "What are the names of the indexes on the [table_name] table?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the names of the indexes on the specified table."}, {"question": "Are there any composite indexes on [table_name]? If so, which columns are included?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Returns the composite indexes on the specified table and the columns included in each."}, {"question": "Show the index creation scripts for [table_name].", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Returns the index creation scripts for the specified table (PostgreSQL)."}, {"question": "What foreign keys exist between [table_name] and other tables?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys between the specified table and other tables."}, {"question": "How many foreign key constraints are there in [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns the number of foreign key constraints in the specified table."}, {"question": "What is the referential integrity rule for the foreign keys in [table_name]?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Returns the referential integrity rules for the foreign keys in the specified table."}, {"question": "List all parent tables for foreign keys in [table_name].", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns all parent tables for foreign keys in the specified table."}, {"question": "List all child tables that reference [table_name] via foreign keys.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns all child tables that reference the specified table via foreign keys."}, {"question": "List all constraints on the [table_name] table.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Returns all constraints on the specified table."}, {"question": "Are there any foreign key violations in [table_name]? If so, list them.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Returns any foreign key violations in the specified table."}, {"question": "Show the unique constraints on the [table_name] table.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Returns the unique constraints on the specified table."}, {"question": "List all check constraints in the database.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Returns all check constraints in the specified schema."}, {"question": "What are the columns involved in primary key constraints for [table_name]?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Returns the columns involved in primary key constraints for the specified table."}, {"question": "What views depend on [table_name]?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns the views that depend on the specified table."}, {"question": "Show the data types of the columns in [table_name].", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the data types of the columns in the specified table."}, {"question": "What is the most common product or behavior combination by users or customers?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Returns the most common product or behavior combination by users or customers."}, {"question": "Find all users or customers who have provided feedback in the last time period.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns all users or customers who have provided feedback in the last specified time period."}, {"question": "Find products or records that are low in stock.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Returns products or records that are low in stock."}, {"question": "List all products that haven\u2019t been sold in the last time period.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Returns all products that haven\u2019t been sold in the last specified time period."}, {"question": "Find the products with the highest return or complaint rate.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "Returns the products with the highest return or complaint rate."}, {"question": "What are the top-selling products in the last time period?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Returns the top-selling products in the last specified time period."}, {"question": "Find products that have been on sale for the longest time.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "Returns the products that have been on sale for the longest time."}, {"question": "Identify products that have been out of stock for more than a specified time period.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns products that have been out of stock for more than the specified time period."}, {"question": "What is the total revenue or cost for the specified time period?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total revenue or cost for the specified time period."}, {"question": "Find the expenses for a given time period and categorize them.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Returns the expenses for a given time period, categorized by type."}, {"question": "Identify the top N highest revenue-generating items or products.", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "Returns the top N highest revenue-generating items or products."}, {"question": "What is the total amount of pending or unpaid invoices or orders?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Returns the total amount of pending or unpaid invoices or orders."}, {"question": "What is the total amount of discounts or bonuses given in the last [time_period]?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Calculates the total discounts or bonuses provided in the specified time period."}, {"question": "How does revenue compare to expenses for the given [time_period]?", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Compares revenue to expenses for the specified time period."}, {"question": "What are the top-performing keywords and ad copies for a PPC campaign?", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Identifies the best-performing keywords and ad copies for a specific PPC campaign."}, {"question": "List orders or transactions with suspicious billing addresses or payment methods.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "Finds orders or transactions with potentially fraudulent billing addresses or payment methods."}, {"question": "Which customers or users have not updated their contact information in the last [time_period]?", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Lists customers or users who have not updated their contact information within the specified time period."}, {"question": "Identify products or services that do not meet safety or quality standards.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "Finds products or services that fail to meet safety or quality standards."}, {"question": "What transactions or orders have been flagged for potential fraud?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Lists transactions or orders flagged for potential fraud."}, {"question": "Which employees are overdue for mandatory training or certification?", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Identifies employees who are overdue for required training or certification."}, {"question": "Find records with missing data in critical fields.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Lists records with missing data in important fields."}, {"question": "Identify duplicate entries in the customer or product database.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "Finds duplicate entries in the customer or product database."}, {"question": "What percentage of records in [table_name] are incomplete?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Calculates the percentage of incomplete records in the specified table."}, {"question": "List products or services with missing or incomplete descriptions.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "Finds products or services with missing or incomplete descriptions."}, {"question": "Check for inconsistent data across different fields or columns.", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Identifies records with inconsistent data across fields or columns."}, {"question": "Find records that failed validation checks.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Lists records that did not pass validation checks."}, {"question": "Compare metric1 in the current period to metric2 in the previous period.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Compares metric1 in the current period to metric2 in the previous period."}, {"question": "How do metrics like sales and expenses compare month-to-month?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Provides a month-to-month comparison of metrics such as sales and expenses."}, {"question": "Compare employee performance based on two metrics.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "Compares employee performance based on two specified metrics."}, {"question": "Compare sales and returns for two products.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "Compares sales and returns for two specified products."}, {"question": "What is the growth rate of a metric between two periods?", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Calculates the growth rate of a metric between two periods."}, {"question": "What is the average rating for a product?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Finds the average rating for a specified product."}, {"question": "List products with ratings below a certain threshold.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Identifies products with ratings below a specified threshold."}, {"question": "Find all reviews for a specific product.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Lists all reviews for a specified product."}, {"question": "How does customer feedback correlate with returns or complaints?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "Analyzes the correlation between customer feedback and returns or complaints."}, {"question": "Which products have the highest customer satisfaction ratings?", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "Identifies products with the highest customer satisfaction ratings."}, {"question": "What percentage of orders were shipped late in a given time period?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Calculates the percentage of orders shipped late in a specified time period."}, {"question": "Find orders shipped within a certain number of days after placement.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Lists orders shipped within a specified number of days after placement."}, {"question": "What is the average shipping cost and processing time per order?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Calculates the average shipping cost and processing time per order."}, {"question": "List orders requiring expedited or overnight shipping.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "Identifies orders that require expedited or overnight shipping."}, {"question": "Find orders canceled after shipment.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "Lists orders that were canceled after shipment."}, {"question": "Which users have logged in within the last [X] days?", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Finds users who have logged in within the last specified number of days."}, {"question": "What is the churn rate of users or customers in the last [time_period]?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Calculates the churn rate of users or customers in the specified time period."}, {"question": "Find users who have not made a purchase after their first visit in [time_period].", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Identifies users who have not made a purchase after their first visit in the specified time period."}, {"question": "Which users have the highest lifetime value (LTV)?", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "Finds users with the highest lifetime value."}, {"question": "Who are the top [N] users based on purchase frequency?", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Lists the top N users based on how frequently they make purchases."}, {"question": "What is the average time between a user's first visit and first purchase?", "query": "SELECT AVG(DATEDIFF('day', first_visit_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(visit_date) AS first_visit_date, MIN(purchase_date) AS first_purchase_date FROM visits JOIN purchases ON visits.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between a user's first visit and first purchase."}, {"question": "List users who have not logged in or visited the site in the last [X] days.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Identifies users who have not logged in or visited the site in the specified number of days."}, {"question": "What is the average session duration for users in the last [time_period]?", "query": "SELECT AVG(session_duration) AS avg_session_duration FROM user_sessions WHERE session_date >= CURRENT_DATE - INTERVAL '[time_period]';", "answer": "Calculates the average session duration for users in the specified time period."}, {"question": "Find users who have abandoned their shopping carts.", "query": "SELECT user_id, cart_id, abandoned_date FROM shopping_carts WHERE abandoned_date IS NOT NULL;", "answer": "Lists users who have abandoned their shopping carts."}, {"question": "Which users have the highest engagement or activity levels?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "Identifies users with the highest engagement or activity levels."}, {"question": "What is the average number of orders per user in the last [time_period]?", "query": "SELECT AVG(order_count) AS avg_orders_per_user FROM (SELECT user_id, COUNT(*) AS order_count FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_orders;", "answer": "Calculates the average number of orders per user in the specified time period."}, {"question": "List users who have not completed the onboarding process.", "query": "SELECT user_id, username FROM users WHERE onboarding_complete = false;", "answer": "Identifies users who have not completed the onboarding process."}, {"question": "Which users have the highest referral rates?", "query": "SELECT user_id, COUNT(*) AS referral_count FROM referrals GROUP BY user_id ORDER BY referral_count DESC LIMIT 1;", "answer": "Finds users with the highest referral rates."}, {"question": "What is the average time between user sign-up and first purchase?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between user sign-up and first purchase."}, {"question": "Find users who have not completed a specific action or task.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_actions WHERE action_completed = true AND action_type = '[specific_action]');", "answer": "Lists users who have not completed a specific action or task."}, {"question": "Which users have the highest retention rates?", "query": "SELECT user_id, (COUNT(DISTINCT purchase_date) * 100.0) / COUNT(DISTINCT visit_date) AS retention_rate FROM user_activity GROUP BY user_id ORDER BY retention_rate DESC LIMIT 1;", "answer": "Finds users with the highest retention rates."}, {"question": "What is the average time between user visits to the site?", "query": "SELECT AVG(DATEDIFF('day', LAG(visit_date) OVER (PARTITION BY user_id ORDER BY visit_date), visit_date)) AS avg_time_between_visits FROM user_visits;", "answer": "Calculates the average time between user visits to the site."}, {"question": "List users who have not interacted with the platform in the last [X] days.", "query": "SELECT user_id, username FROM users WHERE last_interaction_date < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Identifies users who have not interacted with the platform in the specified number of days."}, {"question": "Which users have the highest customer satisfaction ratings?", "query": "SELECT user_id, AVG(rating) AS avg_rating FROM user_reviews GROUP BY user_id ORDER BY avg_rating DESC LIMIT 1;", "answer": "Finds users with the highest customer satisfaction ratings."}, {"question": "What is the average number of support tickets per user in the last [time_period]?", "query": "SELECT AVG(ticket_count) AS avg_tickets_per_user FROM (SELECT user_id, COUNT(*) AS ticket_count FROM support_tickets WHERE ticket_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_tickets;", "answer": "Calculates the average number of support tickets per user in the specified time period."}, {"question": "Find users who have not completed a specific training or certification.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_certifications WHERE certification_completed = true AND certification_type = '[specific_certification]');", "answer": "Lists users who have not completed a specific training or certification."}, {"question": "Which users have the highest engagement or activity levels?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "Identifies users with the highest engagement or activity levels."}, {"question": "What is the average time between user sign-up and first purchase?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between user sign-up and first purchase."}, {"question": "Find all tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Lists all tables in the public schema."}, {"question": "Find all created tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';", "answer": "Lists all created tables in the public schema."}, {"question": "Show the columns of a specific table.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the columns and data types of the specified table."}, {"question": "List all columns in the database.", "query": "SELECT table_name, column_name, data_type FROM information_schema.columns WHERE table_schema = 'public';", "answer": "Returns all columns in the public schema."}, {"question": "Show the primary key of a table.", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = 'PRIMARY';", "answer": "Returns the primary key column of the specified table."}, {"question": "List all primary keys in the database.", "query": "SELECT table_name, column_name FROM information_schema.key_column_usage WHERE table_schema = 'public' AND constraint_name = 'PRIMARY';", "answer": "Returns all primary keys in the public schema."}, {"question": "Show the foreign keys of a table.", "query": "SELECT kcu.column_name, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys of the specified table."}, {"question": "List all foreign keys in the database.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_schema = 'public';", "answer": "Returns all foreign keys in the public schema."}, {"question": "List all foreign keys in the database.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query retrieves all foreign key relationships across tables in the database."}, {"question": "How can I identify relationships between tables in my database?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "It identifies relationships by listing foreign keys and the tables and columns they reference."}, {"question": "What query can I use to find foreign key constraints in my database?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query provides details of foreign key constraints, including the referencing and referenced tables and columns."}, {"question": "How do I get a list of foreign keys in SQL?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "It generates a list of foreign key relationships across all tables in the database."}, {"question": "Which tables in my database are linked through foreign keys?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query shows the relationships between tables, including the linking columns and referenced tables."}, {"question": "{table_name} tablosundaki toplam kay\u0131t say\u0131s\u0131 nedir?", "query": "SELECT COUNT(*) AS total_records FROM {table_name};", "answer": "{table_name} tablosundaki toplam sat\u0131r say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki t\u00fcm verileri g\u00f6ster.", "query": "SELECT * FROM {table_name};", "answer": "{table_name} tablosundaki t\u00fcm sat\u0131r ve s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki {column_name} s\u00fctunundaki benzersiz de\u011ferler nelerdir?", "query": "SELECT DISTINCT {column_name} FROM {table_name};", "answer": "{table_name} tablosundaki {column_name} s\u00fctununda bulunan t\u00fcm benzersiz de\u011ferleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "{column_name} = '{value}' olan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM {table_name} WHERE {column_name} = '{value}';", "answer": "{column_name} de\u011feri {value} olan t\u00fcm sat\u0131rlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki {column_name} s\u00fctununun ortalama, maksimum veya minimum de\u011feri nedir?", "query": "SELECT AVG({column_name}) AS average_value, MAX({column_name}) AS maximum_value, MIN({column_name}) AS minimum_value FROM {table_name};", "answer": "{table_name} tablosundaki {column_name} s\u00fctununun ortalama, maksimum ve minimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "{column_name} > {value} olan ka\u00e7 kay\u0131t var?", "query": "SELECT COUNT(*) AS count_records FROM {table_name} WHERE {column_name} > {value};", "answer": "{column_name} de\u011feri {value}'den b\u00fcy\u00fck olan sat\u0131rlar\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosunda [grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] toplam\u0131 nedir?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] toplam\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosunda her [grouping_column] i\u00e7in ka\u00e7 kay\u0131t var?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] i\u00e7indeki her benzersiz de\u011fer i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek toplam [column_name] de\u011ferine sahip ilk 5 [grouping_column] nedir?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "En y\u00fcksek toplam [column_name] de\u011ferine sahip ilk 5 [grouping_column]'u d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f y\u00fczde da\u011f\u0131l\u0131m\u0131 nedir?", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] i\u00e7indeki her benzersiz de\u011fer i\u00e7in [column_name] de\u011ferinin y\u00fczde da\u011f\u0131l\u0131m\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki en y\u00fcksek/en d\u00fc\u015f\u00fck 10 [column_name] de\u011ferini g\u00f6ster.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; En d\u00fc\u015f\u00fck de\u011ferler i\u00e7in DESC yerine ASC kullan\u0131n", "answer": "[column_name] i\u00e7indeki en y\u00fcksek de\u011ferlere sahip ilk 10 kayd\u0131 d\u00f6nd\u00fcr\u00fcr. En d\u00fc\u015f\u00fck de\u011ferler i\u00e7in ASC kullan\u0131n."}, {"question": "[column_name] 'value' i\u00e7eren t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "[column_name] 'value' alt dizesini i\u00e7eren t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011feri [value1] ile [value2] aras\u0131nda olan kay\u0131tlar\u0131 listeleyin.", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "[column_name] de\u011feri [value1] ile [value2] aras\u0131nda olan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunu [column_name] s\u00fctununa g\u00f6re azalan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 [column_name] s\u00fctununa g\u00f6re azalan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirir."}, {"question": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] nedir?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan [table2].[column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosunun detaylar\u0131n\u0131 ve [table2] tablosundan e\u015fle\u015fen sat\u0131rlar\u0131 al\u0131n.", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, [common_column] s\u00fctununa g\u00f6re e\u015fle\u015fen kay\u0131tlar i\u00e7in d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131n\u0131 birle\u015ftirip [table1.date] '2023-01-01' tarihinden b\u00fcy\u00fck olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, birle\u015ftirme ko\u015fulu sa\u011fland\u0131\u011f\u0131nda ve [table1].[date] '2023-01-01' tarihinden b\u00fcy\u00fck oldu\u011funda d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131ndan toplam [column_name] de\u011ferini al\u0131n, [table3.column_name] ile grupland\u0131r\u0131n ve [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "[table1] tablosundan toplam [column_name] de\u011ferini, [table3.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreler."}, {"question": "[table1] tablosundaki t\u00fcm kay\u0131tlar\u0131, [table2] ve [table3] tablolar\u0131ndaki e\u015fle\u015fen kay\u0131tlarla birlikte bulun, [table1.column_name] > [value], [table2.column_name] = 'active' ve sonu\u00e7lar\u0131 [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, belirtilen filtre ko\u015fullar\u0131na g\u00f6re ve [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan toplam [column_name] de\u011ferini hesaplay\u0131n, [table2.column_name] ile grupland\u0131r\u0131n, [table2.status] = 'approved' ve [table1.date] '2023-01-01' ile '2023-12-31' aras\u0131nda olan kay\u0131tlar\u0131 filtreleyin ve her grup i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 ekleyin.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan toplam [column_name] ve kay\u0131t say\u0131s\u0131n\u0131, [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.status] = 'approved' ve [table1.date] '2023' tarih aral\u0131\u011f\u0131nda olan kay\u0131tlar\u0131 filtreler."}, {"question": "Son 7 g\u00fcn i\u00e7inde eklenen/g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "[table_name] tablosundaki son 7 g\u00fcn i\u00e7inde eklenen veya g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr, [updated_at] s\u00fctununun var oldu\u011funu varsayar."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin ayl\u0131k/y\u0131ll\u0131k toplam\u0131 nedir?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin her ay i\u00e7in toplam\u0131n\u0131, [date_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [time_column] ile grupland\u0131r\u0131lm\u0131\u015f e\u011filimlerini g\u00f6ster.", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "[column_name] de\u011ferinin zaman i\u00e7indeki e\u011filimlerini, [time_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr (\u00f6rne\u011fin, g\u00fcn, ay, y\u0131l)."}, {"question": "[table_name] tablosundaki en erken/en ge\u00e7 [column_name] de\u011feri nedir?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "[table_name] tablosundaki en erken [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131 nedir?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131 (histogram benzeri veri) g\u00f6ster.", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131, her de\u011ferin ne s\u0131kl\u0131kta g\u00f6r\u00fcnd\u00fc\u011f\u00fcn\u00fc g\u00f6sterir."}, {"question": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011feri nedir?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki korelasyon nedir?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki Pearson korelasyon katsay\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name2] > [value] olan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "[column_name2] de\u011feri belirli bir de\u011feri a\u015fan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda [category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini g\u00f6ster.", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "[category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131 nedir?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131 hesaplay\u0131n, [category_column] ile grupland\u0131r\u0131n.", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131, [category_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 bulun.", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) hesaplay\u0131n.", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 bulun ve oran\u0131 [value] de\u011ferinden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreleyin.", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 d\u00f6nd\u00fcr\u00fcr ve oran\u0131 belirli bir de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreler."}, {"question": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki her kay\u0131t i\u00e7in [column_name] de\u011ferinin y\u00fczde s\u0131ralamas\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "[table_name] tablosundaki her kay\u0131t i\u00e7in [column_name] de\u011ferinin y\u00fczde s\u0131ralamas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna [column1: value1, column2: value2] de\u011ferleriyle yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "[table_name] tablosuna [column1] ve [column2] i\u00e7in belirtilen de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] de\u011ferini [new_value] olarak g\u00fcncelleyin, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [new_value] olarak g\u00fcnceller."}, {"question": "[table_name] tablosundan [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan siler."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve [column1, column2, ...] s\u00fctunlar\u0131n\u0131 ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturur ve belirtilen s\u00fctunlar\u0131 ve veri t\u00fcrlerini ekler."}, {"question": "[table_name] tablosuna birden fazla kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "[table_name] tablosuna belirtilen de\u011ferlerle birden fazla kay\u0131t ekler."}, {"question": "[table_name] tablosunda [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu ([column1] ve [column2]) yeni de\u011ferlerle g\u00fcnceller."}, {"question": "Birincil anahtar, unique ve not null gibi k\u0131s\u0131tlamalarla bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez k\u0131s\u0131tlamalarla yeni bir tablo olu\u015fturur."}, {"question": "Bir s\u00fctun i\u00e7in varsay\u0131lan de\u011ferle bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] s\u00fctunu i\u00e7in varsay\u0131lan de\u011feri kullan\u0131r."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in, bir s\u00fctunu NULL olarak g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] s\u00fctununu NULL olarak g\u00fcnceller."}, {"question": "Ba\u015fka bir tabloya referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun s\u00fctununa referans veren bir yabanc\u0131 anahtar ile yeni bir tablo olu\u015fturur."}, {"question": "Bir tablodan ba\u015fka bir tabloya veri ekleyin.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "[table_name1] tablosundan [table_name2] tablosuna belirli bir ko\u015fula g\u00f6re veri ekler."}, {"question": "Bir s\u00fctunun de\u011ferini art\u0131r\u0131n/azalt\u0131n, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] kadar art\u0131r\u0131r."}, {"question": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 siler ancak tabloyu d\u00fc\u015f\u00fcrmez."}, {"question": "Veritaban\u0131ndan bir tabloyu tamamen d\u00fc\u015f\u00fcr\u00fcn.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, \u015femas\u0131 ve verileriyle birlikte d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndan bir tabloyu tamamen silin.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, \u015femas\u0131 ve verileriyle birlikte siler."}, {"question": "Mevcut bir tabloya yeni bir s\u00fctun ekleyin.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Mevcut bir tabloya yeni bir s\u00fctun ekler."}, {"question": "Mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirmek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Tablodaki mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirir."}, {"question": "[table_name] tablosundan [column_name] s\u00fctununu d\u00fc\u015f\u00fcr\u00fcn.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Mevcut bir tablodan bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Bile\u015fik anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "[column1] ve [column2]'den olu\u015fan bile\u015fik anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Ba\u015fka bir tablodan de\u011ferler almak i\u00e7in bir alt sorgu kullanarak veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Belirli bir ko\u015fula g\u00f6re ba\u015fka bir tablodan ([other_table]) de\u011ferler se\u00e7erek [table_name] tablosuna veri ekler."}, {"question": "Bir tabloyu k\u0131salt\u0131n (t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131y\u0131 korur).", "query": "TRUNCATE TABLE [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131s\u0131n\u0131 ve \u015femas\u0131n\u0131 korur."}, {"question": "T\u00fcm s\u00fctunlar i\u00e7in varsay\u0131lan de\u011ferlerle [table_name] tablosuna yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Tablodaki s\u00fctunlar i\u00e7in tan\u0131mlanan varsay\u0131lan de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[table_name] tablosunda [column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm sat\u0131rlar\u0131 g\u00fcncelleyin ve [column_name] de\u011ferini [new_value] olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini [new_value] olarak ayarlar."}, {"question": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan belirli bir kay\u0131t i\u00e7in [column_name] s\u00fctununu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan kay\u0131t i\u00e7in [column_name] de\u011ferini g\u00fcnceller."}, {"question": "[table_name] tablosunda [column_name] NULL olan t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "[column_name] NULL olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir s\u00fctunla [new_table_name] tablosunu olu\u015fturun (yabanc\u0131 anahtar).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturur."}, {"question": "[table_name] tablosunu g\u00fcncelleyin ve [column_name] de\u011ferini [value] olarak ayarlay\u0131n, [column_name] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan sat\u0131rlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] olarak g\u00fcnceller."}, {"question": "[table_name] tablosunda [column_name] de\u011feri [value] de\u011ferinden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 siler."}, {"question": "Benzersiz k\u0131s\u0131tlamaya sahip bir s\u00fctunla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "[column1] s\u00fctununda benzersiz k\u0131s\u0131tlamaya sahip yeni bir tablo olu\u015fturur."}, {"question": "Mevcut bir s\u00fctuna NOT NULL k\u0131s\u0131tlamas\u0131 eklemek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Tabloyu de\u011fi\u015ftirerek [column_name] s\u00fctununun NULL olamayaca\u011f\u0131n\u0131 garanti eder."}, {"question": "[table_name] tablosuna veri ekleyin, [column_name] de\u011ferini iki s\u00fctunun de\u011ferlerini birle\u015ftirerek hesaplay\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Yeni bir kay\u0131t ekler ve [column3] de\u011ferini [value1] ve [value2]'nin birle\u015fimi olarak hesaplar."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini o s\u00fctunun ortalama de\u011feri olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini ortalama de\u011feri olarak ayarlar."}, {"question": "Yeni bir tablo [new_table_name] olu\u015fturun ve bir zaman damgas\u0131 s\u00fctunu ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Yeni bir tablo olu\u015fturur ve yeni bir kay\u0131t eklendi\u011finde [created_at] s\u00fctununa otomatik olarak ge\u00e7erli zaman damgas\u0131n\u0131 ekler."}, {"question": "Ba\u015fka bir tablodan belirli bir ko\u015fula g\u00f6re veri ekleyin (alt sorgu kullanarak).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "[other_table] tablosundan [column3] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan verileri [table_name] tablosuna ekler."}, {"question": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosuna bir kay\u0131t ekleyin ve s\u00fctun de\u011ferlerinden biri i\u00e7in bir alt sorgu kullan\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] de\u011ferini [other_table] tablosundan bir alt sorgu ile al\u0131r."}, {"question": "Ba\u015fka bir tablodaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Ba\u015fka bir tablodaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Bir ko\u015fula dayal\u0131 olarak bir s\u00fctun de\u011ferini ayarlayarak [table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyin ve bir CASE ifadesi ekleyin.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcnceller, [column_name] de\u011ferini 'High' veya 'Low' olarak ayarlar."}, {"question": "Bir tabloyu de\u011fi\u015ftirerek birden fazla s\u00fctuna benzersiz k\u0131s\u0131tlama ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "[table_name] tablosuna [column1] ve [column2] s\u00fctunlar\u0131na benzersiz k\u0131s\u0131tlama ekler."}, {"question": "[table_name] tablosundan verileri \u00f6zetlemek i\u00e7in bir g\u00f6r\u00fcn\u00fcm olu\u015fturun.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "[column2] s\u00fctununu [column1]'e g\u00f6re grupland\u0131rarak sayan bir g\u00f6r\u00fcn\u00fcm olu\u015fturur."}, {"question": "Bir sat\u0131r g\u00fcncellendi\u011finde bir s\u00fctunu otomatik olarak ge\u00e7erli zamana g\u00fcncelleyen bir tetikleyici olu\u015fturun.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "[table_name] tablosundaki bir kay\u0131t g\u00fcncellendi\u011finde [timestamp_column] s\u00fctununu g\u00fcncelleyen bir tetikleyici olu\u015fturur."}, {"question": "[table_name] tablosunu k\u0131salt\u0131n ve kimlik s\u00fctununu s\u0131f\u0131rlay\u0131n.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ve kimlik s\u00fctununu ba\u015flang\u0131\u00e7 de\u011ferine s\u0131f\u0131rlar."}, {"question": "Belirli bir tarihten daha eski kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "[date_column] belirli bir tarihten daha eski olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablodan veri alarak [table_name] tablosuna bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Ba\u015fka bir tablodan se\u00e7me sorgusuna dayal\u0131 olarak [table_name] tablosuna veri ekler."}, {"question": "Bir s\u00fctuna belirli bir aral\u0131kta de\u011ferlerin olmas\u0131n\u0131 sa\u011flamak i\u00e7in CHECK k\u0131s\u0131tlamas\u0131 ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "[column_name] s\u00fctunundaki de\u011ferlerin 0 ile 100 aras\u0131nda olmas\u0131n\u0131 sa\u011flamak i\u00e7in bir k\u0131s\u0131tlama ekler."}, {"question": "[column_name] s\u00fctununda yinelenen kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen kay\u0131tlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosunda tan\u0131ml\u0131 tetikleyiciler nelerdir?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Belirtilen tabloda tan\u0131ml\u0131 tetikleyicileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 listeleyin.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun mevcut \u015femas\u0131 nedir?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun \u015femas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini g\u00f6sterin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda indekslere sahip s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslere sahip s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki indekslerin boyutu nedir?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Belirtilen tablodaki indekslerin boyutunu d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosunda ka\u00e7 indeks var?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda kullan\u0131lan indeks t\u00fcrleri nelerdir?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indeks t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuyla ili\u015fkili indekslerin adlar\u0131 nelerdir?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda bile\u015fik indeksler var m\u0131? Varsa, hangi s\u00fctunlar dahil?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Belirtilen tablodaki bile\u015fik indeksleri ve her birine dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosu i\u00e7in indeks olu\u015fturma betiklerini g\u00f6sterin.", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Belirtilen tablo i\u00e7in indeks olu\u015fturma betiklerini d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosu ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar nelerdir?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablo ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda ka\u00e7 yabanc\u0131 anahtar k\u0131s\u0131tlamas\u0131 var?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kural\u0131 nedir?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kurallar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki t\u00fcm k\u0131s\u0131tlamalar\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki t\u00fcm k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda yabanc\u0131 anahtar ihlalleri var m\u0131? Varsa, listeleyin.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar ihlallerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki benzersiz k\u0131s\u0131tlamalar\u0131 g\u00f6sterin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Belirtilen tablodaki benzersiz k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Belirtilen tablodaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna ba\u011f\u0131ml\u0131 g\u00f6r\u00fcn\u00fcmler nelerdir?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya ba\u011f\u0131ml\u0131 olan g\u00f6r\u00fcn\u00fcmleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki s\u00fctunlar\u0131n veri t\u00fcrlerini g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki s\u00fctunlar\u0131n veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[users/customers] taraf\u0131ndan en yayg\u0131n [product/behavior] kombinasyonu nedir?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Kullan\u0131c\u0131lar veya m\u00fc\u015fteriler taraf\u0131ndan en yayg\u0131n \u00fcr\u00fcn veya davran\u0131\u015f kombinasyonunu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde geri bildirimde bulunan t\u00fcm [users/customers] bulun.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde geri bildirimde bulunan t\u00fcm kullan\u0131c\u0131lar\u0131 veya m\u00fc\u015fterileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Stokta az olan [products/records] bulun.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Stokta az olan \u00fcr\u00fcnleri veya kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm [products] listeleyin.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Son belirtilen s\u00fcre i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek [return/complaint] oran\u0131na sahip [products] bulun.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "En y\u00fcksek iade veya \u015fikayet oran\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde en \u00e7ok satan [products] nelerdir?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Son belirtilen s\u00fcre i\u00e7inde en \u00e7ok satan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En uzun s\u00fcredir sat\u0131\u015fta olan [products] bulun.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "En uzun s\u00fcredir sat\u0131\u015fta olan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] s\u00fcresinden daha uzun s\u00fcredir stokta olmayan [products] belirleyin.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcreden daha uzun s\u00fcredir stokta olmayan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7in toplam [revenue/cost] nedir?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcre i\u00e7in toplam geliri veya maliyeti d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [expenses] bulun ve kategorilere ay\u0131r\u0131n.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Belirli bir s\u00fcre i\u00e7in giderleri d\u00f6nd\u00fcr\u00fcr ve t\u00fcrlerine g\u00f6re kategorilere ay\u0131r\u0131r."}, {"question": "En y\u00fcksek gelir getiren [items/products] nelerdir?", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "En y\u00fcksek gelir getiren N \u00fcr\u00fcn\u00fc veya \u00f6\u011feyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "Toplam [pending/unpaid] [invoices/orders] miktar\u0131 nedir?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Toplam bekleyen veya \u00f6denmemi\u015f faturalar\u0131 veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde verilen toplam [discount/bonus] miktar\u0131 nedir?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde verilen toplam indirim veya bonus miktar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [revenue/cost] ve [expenses/other_metric] kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirli bir s\u00fcre i\u00e7in gelir veya maliyeti giderler veya ba\u015fka bir metrik ile kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri/reklam metinlerini belirleyin.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Belirli bir PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri ve reklam metinlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u015e\u00fcpheli fatura adresi/\u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri/i\u015flemleri listeleyin.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "\u015e\u00fcpheli fatura adresi veya \u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri veya i\u015flemleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri/kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Belirtilen s\u00fcre i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri veya kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00fcvenlik/kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri/hizmetleri belirleyin.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "G\u00fcvenlik veya kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Doland\u0131r\u0131c\u0131l\u0131k tespit kural\u0131na g\u00f6re i\u015faretlenen i\u015flemler/sipari\u015fler nelerdir?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Doland\u0131r\u0131c\u0131l\u0131k tespit kurallar\u0131na g\u00f6re i\u015faretlenen i\u015flemleri veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Zorunlu e\u011fitim/sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 bulun.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Zorunlu e\u011fitim veya sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[field_name] gibi kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "M\u00fc\u015fteri/\u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri belirleyin.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki eksik kay\u0131tlar\u0131n y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Belirtilen tablodaki eksik kay\u0131tlar\u0131n y\u00fczdesini d\u00f6nd\u00fcr\u00fcr."}, {"question": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan t\u00fcm \u00fcr\u00fcnleri/hizmetleri listeleyin.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan t\u00fcm \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Farkl\u0131 alanlar/s\u00fctunlar aras\u0131nda tutars\u0131z veri olup olmad\u0131\u011f\u0131n\u0131 kontrol edin (\u00f6rne\u011fin, tarih formatlar\u0131).", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veriye sahip kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Do\u011frulama/kontrol\u00fc ge\u00e7emeyen kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Do\u011frulama veya kontrol\u00fc ge\u00e7emeyen kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "Ayl\u0131k bazda metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131 (\u00f6rne\u011fin, sat\u0131\u015flar, giderler) nas\u0131ld\u0131r?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Ayl\u0131k bazda sat\u0131\u015flar ve giderler gibi metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u00c7al\u0131\u015fan performans\u0131n\u0131 metric1 ve metric2'ye g\u00f6re kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "\u00c7al\u0131\u015fan performans\u0131n\u0131 metric1 ve metric2'ye g\u00f6re kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u00dcr\u00fcn1 ve \u00fcr\u00fcn2'yi sat\u0131\u015flar/iade a\u00e7\u0131s\u0131ndan kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "\u00dcr\u00fcn1 ve \u00fcr\u00fcn2'yi sat\u0131\u015flar ve iadeler a\u00e7\u0131s\u0131ndan kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131n\u0131 metric i\u00e7in bulun.", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Belirtilen metric i\u00e7in iki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[product_name] i\u00e7in ortalama puan nedir?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in ortalama puan\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "X y\u0131ld\u0131z\u0131n alt\u0131nda puana sahip t\u00fcm \u00fcr\u00fcnleri listeleyin.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Belirtilen y\u0131ld\u0131z say\u0131s\u0131n\u0131n alt\u0131nda puana sahip t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[product_name] i\u00e7in t\u00fcm yorumlar\u0131 bulun.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "M\u00fc\u015fteri geri bildirimleri ile iade/\u015fikayetler aras\u0131ndaki ili\u015fki nedir?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fkiyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri belirleyin.", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7inde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Belirtilen zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sipari\u015fin verilmesinden itibaren [X] g\u00fcn i\u00e7inde g\u00f6nderilen t\u00fcm sipari\u015fleri bulun.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Sipari\u015fin verilmesinden itibaren belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti/i\u015flem s\u00fcresi nedir?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresini d\u00f6nd\u00fcr\u00fcr."}, {"question": "H\u0131zl\u0131/overnight g\u00f6nderim gerektiren t\u00fcm sipari\u015fleri listeleyin.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri bulun.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "G\u00f6nderimden sonra iptal edilen t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [X] g\u00fcn i\u00e7inde giri\u015f yapan t\u00fcm kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Son belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde giri\u015f yapan t\u00fcm kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde [kullan\u0131c\u0131/m\u00fc\u015fteri] kay\u0131p oran\u0131 nedir?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Son belirtilen zaman diliminde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7inde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Belirtilen zaman diliminde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek ya\u015fam boyu de\u011fere (LTV) sahip kullan\u0131c\u0131lar\u0131 belirleyin.", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "En y\u00fcksek ya\u015fam boyu de\u011fere sahip kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst [N] kullan\u0131c\u0131y\u0131 bulun.", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst N kullan\u0131c\u0131y\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirir."}, {"question": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] nedir?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan [table2].[column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosunun detaylar\u0131n\u0131 ve [table2] tablosundan e\u015fle\u015fen sat\u0131rlar\u0131 al\u0131n.", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, [common_column] s\u00fctununa g\u00f6re e\u015fle\u015fen kay\u0131tlar i\u00e7in d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131n\u0131 birle\u015ftirip [table1.date] '2023-01-01' tarihinden b\u00fcy\u00fck olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, birle\u015ftirme ko\u015fulu sa\u011fland\u0131\u011f\u0131nda ve [table1].[date] '2023-01-01' tarihinden b\u00fcy\u00fck oldu\u011funda d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131ndan toplam [column_name] de\u011ferini al\u0131n, [table3.column_name] ile grupland\u0131r\u0131n ve [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "[table1] tablosundan toplam [column_name] de\u011ferini, [table3.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreler."}, {"question": "[table1] tablosundaki t\u00fcm kay\u0131tlar\u0131, [table2] ve [table3] tablolar\u0131ndaki e\u015fle\u015fen kay\u0131tlarla birlikte bulun, [table1.column_name] > [value], [table2.column_name] = 'active' ve sonu\u00e7lar\u0131 [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, belirtilen filtre ko\u015fullar\u0131na g\u00f6re ve [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan toplam [column_name] de\u011ferini hesaplay\u0131n, [table2.column_name] ile grupland\u0131r\u0131n, [table2.status] = 'approved' ve [table1.date] '2023-01-01' ile '2023-12-31' aras\u0131nda olan kay\u0131tlar\u0131 filtreleyin ve her grup i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 ekleyin.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan toplam [column_name] ve kay\u0131t say\u0131s\u0131n\u0131, [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.status] = 'approved' ve [table1.date] '2023' tarih aral\u0131\u011f\u0131nda olan kay\u0131tlar\u0131 filtreler."}, {"question": "Son 7 g\u00fcn i\u00e7inde eklenen/g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "[table_name] tablosundaki son 7 g\u00fcn i\u00e7inde eklenen veya g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr, [updated_at] s\u00fctununun var oldu\u011funu varsayar."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin ayl\u0131k/y\u0131ll\u0131k toplam\u0131 nedir?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin her ay i\u00e7in toplam\u0131n\u0131, [date_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [time_column] ile grupland\u0131r\u0131lm\u0131\u015f e\u011filimlerini g\u00f6ster.", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "[column_name] de\u011ferinin zaman i\u00e7indeki e\u011filimlerini, [time_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr (\u00f6rne\u011fin, g\u00fcn, ay, y\u0131l)."}, {"question": "[table_name] tablosundaki en erken/en ge\u00e7 [column_name] de\u011feri nedir?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "[table_name] tablosundaki en erken [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131 nedir?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131 (histogram benzeri veri) g\u00f6ster.", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131, her de\u011ferin ne s\u0131kl\u0131kta g\u00f6r\u00fcnd\u00fc\u011f\u00fcn\u00fc g\u00f6sterir."}, {"question": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011feri nedir?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki korelasyon nedir?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki Pearson korelasyon katsay\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name2] > [value] olan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "[column_name2] de\u011feri belirli bir de\u011feri a\u015fan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda [category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini g\u00f6ster.", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "[category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131 nedir?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131 hesaplay\u0131n, [category_column] ile grupland\u0131r\u0131n.", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131, [category_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 bulun.", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) hesaplay\u0131n.", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 bulun ve oran\u0131 [value] de\u011ferinden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreleyin.", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 d\u00f6nd\u00fcr\u00fcr ve oran\u0131 belirli bir de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreler."}, {"question": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] s\u00fctununun y\u00fczde s\u0131ralamas\u0131n\u0131 [table_name] tablosunda her sat\u0131r i\u00e7in hesaplay\u0131n.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "[table_name] tablosundaki her sat\u0131r i\u00e7in [column_name] s\u00fctununun y\u00fczde s\u0131ralamas\u0131n\u0131 hesaplar."}, {"question": "[table_name] tablosuna [column1] ve [column2] de\u011ferleriyle yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "[table_name] tablosuna [column1] ve [column2] i\u00e7in belirtilen de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] de\u011ferini [new_value] olarak g\u00fcncelleyin, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [new_value] olarak g\u00fcnceller."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan siler."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve [column1, column2, ...] s\u00fctunlar\u0131n\u0131 ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturur ve belirtilen s\u00fctunlar\u0131 ve veri t\u00fcrlerini ekler."}, {"question": "[table_name] tablosuna birden fazla kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "[table_name] tablosuna belirtilen de\u011ferlerle birden fazla kay\u0131t ekler."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [table_name] tablosunda birden fazla s\u00fctunu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu ([column1] ve [column2]) yeni de\u011ferlerle g\u00fcnceller."}, {"question": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez gibi k\u0131s\u0131tlamalarla bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez k\u0131s\u0131tlamalarla yeni bir tablo olu\u015fturur."}, {"question": "Bir s\u00fctun i\u00e7in varsay\u0131lan de\u011ferle bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] s\u00fctunu i\u00e7in varsay\u0131lan de\u011feri kullan\u0131r."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in bir s\u00fctunu NULL olarak g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] s\u00fctununu NULL olarak g\u00fcnceller."}, {"question": "Ba\u015fka bir tabloya referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun s\u00fctununa referans veren bir yabanc\u0131 anahtar ile yeni bir tablo olu\u015fturur."}, {"question": "Bir tablodan ba\u015fka bir tabloya veri ekleyin.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "[table_name1] tablosundan [table_name2] tablosuna belirli bir ko\u015fula g\u00f6re veri ekler."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in bir s\u00fctunun de\u011ferini art\u0131r\u0131n/azalt\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] kadar art\u0131r\u0131r."}, {"question": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 siler ancak tabloyu d\u00fc\u015f\u00fcrmez."}, {"question": "Veritaban\u0131ndan bir tabloyu d\u00fc\u015f\u00fcr\u00fcn.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, yap\u0131s\u0131 ve verileriyle birlikte d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Mevcut bir tabloya yeni bir s\u00fctun ekleyin.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Mevcut bir tabloya yeni bir s\u00fctun ekler."}, {"question": "Mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirmek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Tablodaki mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirir."}, {"question": "Bir tabloyu de\u011fi\u015ftirerek bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcn.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Mevcut bir tablodan bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Bile\u015fik birincil anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "[column1] ve [column2]'den olu\u015fan bile\u015fik birincil anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Ba\u015fka bir tablodan de\u011ferler almak i\u00e7in bir alt sorgu kullanarak veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Belirli bir ko\u015fula g\u00f6re ba\u015fka bir tablodan ([other_table]) de\u011ferler se\u00e7erek [table_name] tablosuna veri ekler."}, {"question": "Bir tabloyu k\u0131salt\u0131n (t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131y\u0131 korur).", "query": "TRUNCATE TABLE [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131s\u0131n\u0131 ve \u015femas\u0131n\u0131 korur."}, {"question": "T\u00fcm s\u00fctunlar i\u00e7in varsay\u0131lan de\u011ferlerle [table_name] tablosuna yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Tablodaki s\u00fctunlar i\u00e7in tan\u0131mlanan varsay\u0131lan de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm sat\u0131rlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini [new_value] olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini [new_value] olarak ayarlar."}, {"question": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan belirli bir kay\u0131t i\u00e7in [column_name] s\u00fctununu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan kay\u0131t i\u00e7in [column_name] de\u011ferini g\u00fcnceller."}, {"question": "[column_name] NULL olan t\u00fcm kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "[column_name] NULL olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir s\u00fctunla [new_table_name] tablosunu olu\u015fturun (yabanc\u0131 anahtar).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturur."}, {"question": "[column_name] de\u011ferini [value] olarak g\u00fcncelleyin, [column_name] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan sat\u0131rlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] olarak g\u00fcnceller."}, {"question": "[column_name] de\u011feri [value] de\u011ferinden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 siler."}, {"question": "Benzersiz k\u0131s\u0131tlamaya sahip bir s\u00fctunla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "[column1] s\u00fctununda benzersiz k\u0131s\u0131tlamaya sahip yeni bir tablo olu\u015fturur."}, {"question": "Mevcut bir s\u00fctuna NOT NULL k\u0131s\u0131tlamas\u0131 eklemek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Tabloyu de\u011fi\u015ftirerek [column_name] s\u00fctununun NULL olamayaca\u011f\u0131n\u0131 garanti eder."}, {"question": "[column1] ve [column2] de\u011ferlerini birle\u015ftirerek hesaplanan bir s\u00fctun de\u011feriyle [table_name] tablosuna veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Yeni bir kay\u0131t ekler ve [column3] de\u011ferini [value1] ve [value2]'nin birle\u015fimi olarak hesaplar."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini o s\u00fctunun ortalama de\u011feri olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini ortalama de\u011feri olarak ayarlar."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve bir zaman damgas\u0131 s\u00fctunu ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Yeni bir tablo olu\u015fturur ve yeni bir kay\u0131t eklendi\u011finde [created_at] s\u00fctununa otomatik olarak ge\u00e7erli zaman damgas\u0131n\u0131 ekler."}, {"question": "Ba\u015fka bir tablodan belirli bir ko\u015fula g\u00f6re veri ekleyin (alt sorgu kullanarak).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "[other_table] tablosundan [column3] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan verileri [table_name] tablosuna ekler."}, {"question": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosuna bir kay\u0131t ekleyin ve s\u00fctun de\u011ferlerinden biri i\u00e7in bir alt sorgu kullan\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] de\u011ferini [other_table] tablosundan bir alt sorgu ile al\u0131r."}, {"question": "[referenced_table] tablosundaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "[referenced_table] tablosundaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Bir ko\u015fula dayal\u0131 olarak bir s\u00fctun de\u011ferini ayarlayarak [table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyin ve bir CASE ifadesi ekleyin.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcnceller, [column_name] de\u011ferini 'High' veya 'Low' olarak ayarlar."}, {"question": "[table_name] tablosuna birden fazla s\u00fctuna benzersiz k\u0131s\u0131tlama ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "[table_name] tablosuna [column1] ve [column2] s\u00fctunlar\u0131na benzersiz k\u0131s\u0131tlama ekler."}, {"question": "[table_name] tablosundan verileri \u00f6zetlemek i\u00e7in bir g\u00f6r\u00fcn\u00fcm olu\u015fturun.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "[column2] s\u00fctununu [column1]'e g\u00f6re grupland\u0131rarak sayan bir g\u00f6r\u00fcn\u00fcm olu\u015fturur."}, {"question": "Bir sat\u0131r g\u00fcncellendi\u011finde bir s\u00fctunu otomatik olarak ge\u00e7erli zamana g\u00fcncelleyen bir tetikleyici olu\u015fturun.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "[table_name] tablosundaki bir kay\u0131t g\u00fcncellendi\u011finde [timestamp_column] s\u00fctununu g\u00fcncelleyen bir tetikleyici olu\u015fturur."}, {"question": "[table_name] tablosunu k\u0131salt\u0131n ve kimlik s\u00fctununu s\u0131f\u0131rlay\u0131n.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ve kimlik s\u00fctununu ba\u015flang\u0131\u00e7 de\u011ferine s\u0131f\u0131rlar."}, {"question": "Belirli bir tarihten daha eski kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "[date_column] belirli bir tarihten daha eski olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablodan veri alarak [table_name] tablosuna bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Ba\u015fka bir tablodan se\u00e7me sorgusuna dayal\u0131 olarak [table_name] tablosuna veri ekler."}, {"question": "Bir s\u00fctuna belirli bir aral\u0131kta de\u011ferlerin olmas\u0131n\u0131 sa\u011flamak i\u00e7in CHECK k\u0131s\u0131tlamas\u0131 ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "[column_name] s\u00fctunundaki de\u011ferlerin 0 ile 100 aras\u0131nda olmas\u0131n\u0131 sa\u011flamak i\u00e7in bir k\u0131s\u0131tlama ekler."}, {"question": "[column_name] s\u00fctununda yinelenen kay\u0131tlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen kay\u0131tlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosunda tan\u0131ml\u0131 tetikleyiciler nelerdir?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Belirtilen tabloda tan\u0131ml\u0131 tetikleyicileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 listeleyin.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun mevcut \u015femas\u0131 nedir?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun \u015femas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini g\u00f6sterin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda indekslere sahip s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslere sahip s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki indekslerin boyutu nedir?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Belirtilen tablodaki indekslerin boyutunu d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosunda ka\u00e7 indeks var?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda kullan\u0131lan indeks t\u00fcrleri nelerdir?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indeks t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuyla ili\u015fkili indekslerin adlar\u0131 nelerdir?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda bile\u015fik indeksler var m\u0131? Varsa, hangi s\u00fctunlar dahil?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Belirtilen tablodaki bile\u015fik indeksleri ve her birine dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosu i\u00e7in indeks olu\u015fturma betiklerini g\u00f6sterin.", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Belirtilen tablo i\u00e7in indeks olu\u015fturma betiklerini d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosu ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar nelerdir?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablo ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda ka\u00e7 yabanc\u0131 anahtar k\u0131s\u0131tlamas\u0131 var?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kural\u0131 nedir?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kurallar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki t\u00fcm k\u0131s\u0131tlamalar\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki t\u00fcm k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda yabanc\u0131 anahtar ihlalleri var m\u0131? Varsa, listeleyin.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar ihlallerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki benzersiz k\u0131s\u0131tlamalar\u0131 g\u00f6sterin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Belirtilen tablodaki benzersiz k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Belirtilen tablodaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna ba\u011f\u0131ml\u0131 g\u00f6r\u00fcn\u00fcmler nelerdir?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya ba\u011f\u0131ml\u0131 olan g\u00f6r\u00fcn\u00fcmleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki s\u00fctunlar\u0131n veri t\u00fcrlerini g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki s\u00fctunlar\u0131n veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[users/customers] taraf\u0131ndan en yayg\u0131n [product/behavior] kombinasyonu nedir?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Kullan\u0131c\u0131lar veya m\u00fc\u015fteriler taraf\u0131ndan en yayg\u0131n \u00fcr\u00fcn veya davran\u0131\u015f kombinasyonunu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde geri bildirimde bulunan t\u00fcm [users/customers] bulun.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde geri bildirimde bulunan t\u00fcm kullan\u0131c\u0131lar\u0131 veya m\u00fc\u015fterileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Stokta az olan [products/records] bulun.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Stokta az olan \u00fcr\u00fcnleri veya kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm [products] listeleyin.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Son belirtilen s\u00fcre i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek [return/complaint] oran\u0131na sahip [products] bulun.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "En y\u00fcksek iade veya \u015fikayet oran\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde en \u00e7ok satan [products] nelerdir?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Son belirtilen s\u00fcre i\u00e7inde en \u00e7ok satan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En uzun s\u00fcredir sat\u0131\u015fta olan [products] bulun.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "En uzun s\u00fcredir sat\u0131\u015fta olan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] s\u00fcresinden daha uzun s\u00fcredir stokta olmayan [products] belirleyin.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcreden daha uzun s\u00fcredir stokta olmayan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7in toplam [revenue/cost] nedir?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcre i\u00e7in toplam geliri veya maliyeti d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [expenses] bulun ve kategorilere ay\u0131r\u0131n.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Belirli bir s\u00fcre i\u00e7in giderleri d\u00f6nd\u00fcr\u00fcr ve t\u00fcrlerine g\u00f6re kategorilere ay\u0131r\u0131r."}, {"question": "En y\u00fcksek gelir getiren [items/products] nelerdir?", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "En y\u00fcksek gelir getiren N \u00fcr\u00fcn\u00fc veya \u00f6\u011feyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "Toplam [pending/unpaid] [invoices/orders] miktar\u0131 nedir?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Toplam bekleyen veya \u00f6denmemi\u015f faturalar\u0131 veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde verilen toplam [discount/bonus] miktar\u0131 nedir?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde verilen toplam indirim veya bonus miktar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [revenue/cost] ve [expenses/other_metric] kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirli bir s\u00fcre i\u00e7in gelir veya maliyeti giderler veya ba\u015fka bir metrik ile kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri/reklam metinlerini belirleyin.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Belirli bir PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri ve reklam metinlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u015e\u00fcpheli fatura adresi/\u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri/i\u015flemleri listeleyin.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "\u015e\u00fcpheli fatura adresi veya \u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri veya i\u015flemleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri/kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Belirtilen s\u00fcre i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri veya kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00fcvenlik/kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri/hizmetleri belirleyin.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "G\u00fcvenlik veya kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Doland\u0131r\u0131c\u0131l\u0131k tespit kural\u0131na g\u00f6re i\u015faretlenen i\u015flemler/sipari\u015fler nelerdir?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Doland\u0131r\u0131c\u0131l\u0131k tespit kurallar\u0131na g\u00f6re i\u015faretlenen i\u015flemleri veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Zorunlu e\u011fitim/sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 bulun.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Zorunlu e\u011fitim veya sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 listeler."}, {"question": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri belirleyin.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri bulur."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131n y\u00fczde ka\u00e7\u0131 eksik?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Belirtilen tablodaki eksik kay\u0131tlar\u0131n y\u00fczdesini hesaplar."}, {"question": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan \u00fcr\u00fcn veya hizmetleri listeleyin.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan \u00fcr\u00fcn veya hizmetleri bulur."}, {"question": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veri olup olmad\u0131\u011f\u0131n\u0131 kontrol edin.", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veriye sahip kay\u0131tlar\u0131 belirler."}, {"question": "Do\u011frulama kontrollerini ge\u00e7emeyen kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Do\u011frulama kontrollerini ge\u00e7emeyen kay\u0131tlar\u0131 listeler."}, {"question": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "Ayl\u0131k bazda metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131 nas\u0131ld\u0131r (\u00f6rne\u011fin, sat\u0131\u015flar, giderler)?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Ayl\u0131k bazda sat\u0131\u015flar ve giderler gibi metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131n\u0131 sa\u011flar."}, {"question": "\u0130ki metrik baz\u0131nda \u00e7al\u0131\u015fan performans\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "\u0130ki belirli metrik baz\u0131nda \u00e7al\u0131\u015fan performans\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki \u00fcr\u00fcn i\u00e7in sat\u0131\u015f ve iadeleri kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "\u0130ki belirli \u00fcr\u00fcn i\u00e7in sat\u0131\u015f ve iadeleri kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131 nedir?", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "\u0130ki d\u00f6nem aras\u0131ndaki bir metrik i\u00e7in b\u00fcy\u00fcme oran\u0131n\u0131 hesaplar."}, {"question": "Bir \u00fcr\u00fcn i\u00e7in ortalama puan nedir?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in ortalama puan\u0131 bulur."}, {"question": "Belirli bir e\u015fik de\u011ferinin alt\u0131nda puana sahip \u00fcr\u00fcnleri listeleyin.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Belirli bir e\u015fik de\u011ferinin alt\u0131nda puana sahip \u00fcr\u00fcnleri belirler."}, {"question": "Belirli bir \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 bulun.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 listeler."}, {"question": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fki nedir?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fkiyi analiz eder."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnler hangileridir?", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri belirler."}, {"question": "Belirli bir zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Belirtilen zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesini hesaplar."}, {"question": "Sipari\u015fin verilmesinden itibaren belirli bir g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen sipari\u015fleri bulun.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Sipari\u015fin verilmesinden itibaren belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen sipari\u015fleri listeler."}, {"question": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresi nedir?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresini hesaplar."}, {"question": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren sipari\u015fleri listeleyin.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren sipari\u015fleri belirler."}, {"question": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri bulun.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri listeler."}, {"question": "Son [X] g\u00fcn i\u00e7inde giri\u015f yapan kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Son belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde giri\u015f yapan kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Son [time_period] i\u00e7inde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131 nedir?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Belirtilen zaman diliminde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131n\u0131 hesaplar."}, {"question": "[time_period] i\u00e7inde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Belirtilen zaman diliminde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "En y\u00fcksek ya\u015fam boyu de\u011fere (LTV) sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "En y\u00fcksek ya\u015fam boyu de\u011fere sahip kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst [N] kullan\u0131c\u0131y\u0131 kimlerdir?", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst N kullan\u0131c\u0131y\u0131 listeler."}, {"question": "Bir kullan\u0131c\u0131n\u0131n ilk ziyareti ile ilk sat\u0131n almas\u0131 aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', first_visit_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(visit_date) AS first_visit_date, MIN(purchase_date) AS first_purchase_date FROM visits JOIN purchases ON visits.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Bir kullan\u0131c\u0131n\u0131n ilk ziyareti ile ilk sat\u0131n almas\u0131 aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Son [X] g\u00fcn i\u00e7inde siteye giri\u015f yapmayan veya ziyaret etmeyen kullan\u0131c\u0131lar\u0131 listeleyin.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde siteye giri\u015f yapmayan veya ziyaret etmeyen kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131lar\u0131n ortalama oturum s\u00fcresi nedir?", "query": "SELECT AVG(session_duration) AS avg_session_duration FROM user_sessions WHERE session_date >= CURRENT_DATE - INTERVAL '[time_period]';", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131lar\u0131n ortalama oturum s\u00fcresini hesaplar."}, {"question": "Al\u0131\u015fveri\u015f sepetlerini terk eden kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, cart_id, abandoned_date FROM shopping_carts WHERE abandoned_date IS NOT NULL;", "answer": "Al\u0131\u015fveri\u015f sepetlerini terk eden kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama sipari\u015f say\u0131s\u0131 nedir?", "query": "SELECT AVG(order_count) AS avg_orders_per_user FROM (SELECT user_id, COUNT(*) AS order_count FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_orders;", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama sipari\u015f say\u0131s\u0131n\u0131 hesaplar."}, {"question": "Onboarding s\u00fcrecini tamamlamayan kullan\u0131c\u0131lar\u0131 listeleyin.", "query": "SELECT user_id, username FROM users WHERE onboarding_complete = false;", "answer": "Onboarding s\u00fcrecini tamamlamayan kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "En y\u00fcksek y\u00f6nlendirme oran\u0131na sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS referral_count FROM referrals GROUP BY user_id ORDER BY referral_count DESC LIMIT 1;", "answer": "En y\u00fcksek y\u00f6nlendirme oran\u0131na sahip kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Belirli bir eylemi veya g\u00f6revi tamamlamayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_actions WHERE action_completed = true AND action_type = '[specific_action]');", "answer": "Belirli bir eylemi veya g\u00f6revi tamamlamayan kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, AVG(rating) AS avg_rating FROM user_reviews GROUP BY user_id ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama destek bileti say\u0131s\u0131 nedir?", "query": "SELECT AVG(ticket_count) AS avg_tickets_per_user FROM (SELECT user_id, COUNT(*) AS ticket_count FROM support_tickets WHERE ticket_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_tickets;", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama destek bileti say\u0131s\u0131n\u0131 hesaplar."}, {"question": "Belirli bir e\u011fitimi veya sertifikay\u0131 tamamlamayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_certifications WHERE certification_completed = true AND certification_type = '[specific_certification]');", "answer": "Belirli bir e\u011fitimi veya sertifikay\u0131 tamamlamayan kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Veritaban\u0131ndaki t\u00fcm tablolar\u0131 bulun.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm tablolar\u0131 listeler."}, {"question": "Veritaban\u0131ndaki t\u00fcm olu\u015fturulmu\u015f tablolar\u0131 bulun.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';", "answer": "Public \u015femas\u0131ndaki t\u00fcm olu\u015fturulmu\u015f tablolar\u0131 listeler."}, {"question": "Belirli bir tablonun s\u00fctunlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun s\u00fctunlar\u0131n\u0131 ve veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm s\u00fctunlar\u0131 listeleyin.", "query": "SELECT table_name, column_name, data_type FROM information_schema.columns WHERE table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tablonun birincil anahtar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = 'PRIMARY';", "answer": "Belirtilen tablonun birincil anahtar s\u00fctununu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm birincil anahtarlar\u0131 listeleyin.", "query": "SELECT table_name, column_name FROM information_schema.key_column_usage WHERE table_schema = 'public' AND constraint_name = 'PRIMARY';", "answer": "Public \u015femas\u0131ndaki t\u00fcm birincil anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tablonun yabanc\u0131 anahtarlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT kcu.column_name, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun yabanc\u0131 anahtarlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 listeleyin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 listeleyin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtar ili\u015fkilerini getirir."}, {"question": "Veritaban\u0131mdaki tablolar aras\u0131ndaki ili\u015fkileri nas\u0131l belirleyebilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Yabanc\u0131 anahtarlar\u0131 ve referans ald\u0131klar\u0131 tablolar\u0131 ve s\u00fctunlar\u0131 listeleyerek ili\u015fkileri belirler."}, {"question": "Veritaban\u0131mdaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131 bulmak i\u00e7in hangi sorguyu kullanabilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n detaylar\u0131n\u0131, referans alan ve referans al\u0131nan tablolar ve s\u00fctunlar dahil olmak \u00fczere sa\u011flar."}, {"question": "SQL'de yabanc\u0131 anahtarlar\u0131n listesini nas\u0131l alabilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, veritaban\u0131ndaki t\u00fcm tablolar aras\u0131ndaki yabanc\u0131 anahtar ili\u015fkilerinin bir listesini olu\u015fturur."}, {"question": "Veritaban\u0131mdaki hangi tablolar yabanc\u0131 anahtarlarla birbirine ba\u011fl\u0131?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, tablolar aras\u0131ndaki ili\u015fkileri, ba\u011flayan s\u00fctunlar ve referans al\u0131nan tablolar dahil olmak \u00fczere g\u00f6sterir."}, {"question": "Bir tabloya ait s\u00fctun adlar\u0131n\u0131 listele.", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Belirtilen tabloya ait t\u00fcm s\u00fctun adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tabloya ait s\u00fctunlar\u0131 nas\u0131l listeleyebilirim?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, belirtilen tablonun t\u00fcm s\u00fctunlar\u0131n\u0131 listeler."}, {"question": "Tablodaki s\u00fctun isimlerini \u00f6\u011frenmek i\u00e7in ne yapmal\u0131y\u0131m?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, tablodaki s\u00fctun isimlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir tabloya ait s\u00fctun isimlerini sorgulama y\u00f6ntemi nedir?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, ilgili tablonun s\u00fctun isimlerini getirir."}, {"question": "Find all tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Lists all tables in the public schema."}, {"question": "List all column names of [table_name].", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query returns all column names of the specified table."}, {"question": "Find me all fields in [table_name] table", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query lists all fields in the specified table."}, {"question": "How can I fetch the columns of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query retrieves the column names of the given table."}, {"question": "What is the query to get all column names of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query fetches all the column names of a specific table."}, {"question": "How do I list column names of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query lists the column names of the specified table."}, {"question": "What is the total number of records in the [table_name] table?", "query": "SELECT COUNT(*) AS total_records FROM [table_name];", "answer": "Returns the total count of rows in the [table_name] table."}, {"question": "Show me all data from the [table_name] table.", "query": "SELECT * FROM [table_name];", "answer": "Returns all rows and columns from the {table_name} table."}, {"question": "How can I view all records in the [table_name] table?", "query": "SELECT * FROM [table_name];", "answer": "This query displays all records from the specified table."}, {"question": "Show me [x] records from the [table_name] table.", "query": "SELECT * FROM [table_name] LIMIT [x];", "answer": "Returns the first [x] rows from the [table_name] table."}, {"question": "What are the distinct values in the [column_name] column of the [table_name] table?", "query": "SELECT DISTINCT [column_name] FROM [table_name];", "answer": "Returns all unique values present in the [column_name] column of the [table_name] table."}, {"question": "Find all records where [column_name] is equal to [value] in the [table_name] table.", "query": "SELECT * FROM [table_name] WHERE [column_name] = [value];", "answer": "Returns all rows where the [column_name] is equal to [value] in the [table_name] table."}, {"question": "What is the average, maximum, or minimum value of [column_name] in the [table_name] table?", "query": "SELECT AVG([column_name]) AS average_value, MAX([column_name]) AS max_value, MIN([column_name]) AS min_value FROM [table_name];", "answer": "Returns the average, maximum, and minimum values of [column_name] in the [table_name] table."}, {"question": "How many records have [column_name] > [value]?", "query": "SELECT COUNT(*) AS record_count FROM [table_name] WHERE [column_name] > [value];", "answer": "Returns the number of rows where the value in [column_name] is greater than [value]."}, {"question": "What is the sum of [column_name] grouped by [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the total sum of [column_name], grouped by [grouping_column]."}, {"question": "How many records exist for each [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the count of records for each unique value in [grouping_column]."}, {"question": "Give me the top 5 [grouping_column]s with the highest total [column_name].", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "Returns the top 5 [grouping_column]s with the highest total sum of [column_name]."}, {"question": "Find the percentage distribution of [column_name] grouped by [grouping_column].", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the percentage distribution of [column_name] for each unique value of [grouping_column]."}, {"question": "Show me the top 10 highest/lowest [column_name] from [table_name].", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; For lowest values, change DESC to ASC", "answer": "Returns the top 10 records with the highest values in [column_name]. Use ASC for the lowest values."}, {"question": "Find all records where [column_name] contains 'value'.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "Returns all records where [column_name] contains the substring 'value'."}, {"question": "List records where [column_name] falls between [value1] and [value2].", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "Returns all records where [column_name] is within the range of [value1] and [value2]."}, {"question": "Sort the [table_name] table by [column_name] in descending order.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "Returns all records from [table_name] sorted by [column_name] in descending order."}, {"question": "Combine data from [table1] and [table2] based on [common_column].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Returns the combined data from [table1] and [table2] where [common_column] matches in both tables."}, {"question": "Find all records in [table1] that have no matching records in [table2].", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "Returns all records from [table1] that do not have matching records in [table2]."}, {"question": "What is the total [column_name] from [table1] grouped by [table2.column_name]?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "Returns the total sum of [column_name] from [table1], grouped by [table2].[column_name]."}, {"question": "Get the details of [table1] and include matching rows from [table2].", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Returns all columns from both [table1] and [table2] for matching records based on [common_column]."}, {"question": "Combine data from [table1], [table2], and [table3] where [table1.column_name] = [table2.column_name] and [table2.column_name] = [table3.column_name], and filter for rows where [table1.date] is greater than [date_threshold].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > [date_threshold];", "answer": "Returns all columns from [table1], [table2], and [table3] where the join condition is met, and the date in [table1] is greater than [date_threshold]."}, {"question": "Get the total [column_name] from [table1], where records are joined with [table2] and [table3], grouped by [table3.column_name], and filter for records where [table2.column_name] = 'value' and [table1.date] is in the last [X] days.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] > CURRENT_DATE - INTERVAL '[X] days' GROUP BY [table3].[column_name];", "answer": "Returns the total sum of [column_name] from [table1], grouped by [table3.column_name], filtered by [table2.column_name] = 'value' and [table1.date] within the last 30 days."}, {"question": "Find all records from [table1] with their corresponding records from [table2] and [table3], where [table1.column_name] > [value], [table2.column_name] = 'active', and sort the results by [table3.column_name] in ascending order.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "Returns all columns from [table1], [table2], and [table3] based on the specified filter conditions and ordered by [table3.column_name] in ascending order."}, {"question": "Calculate the total [column_name] from [table1] grouped by [table2.column_name], filter for records where [table2.status] = 'approved' and [table1.date] is between '2023-01-01' and '2023-12-31', and include a count of records for each group.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "Returns the total sum and count of [column_name] from [table1], grouped by [table2.column_name], filtered by the status 'approved' and the date range in 2023."}, {"question": "Find all records added/updated in the last [X].", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '[X] days';", "answer": "Returns all records from [table_name] that were added or updated in the last 7 days, assuming the presence of an [updated_at] column."}, {"question": "What is the monthly/yearly total of [column_name] from [table_name]?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "Returns the total sum of [column_name] for each month, grouped by [date_column]."}, {"question": "Show me trends in [column_name] grouped by [time_column].", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "Returns the trend of [column_name] over time, grouped by [time_column] (e.g., day, month, year)."}, {"question": "What is the earliest/latest [column_name] in [table_name]?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "Returns the earliest value in [column_name] from [table_name]."}, {"question": "What is the standard deviation of [column_name] in [table_name]?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "Returns the standard deviation of [column_name] from [table_name]."}, {"question": "Show me the distribution (histogram-like data) of [column_name].", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "Returns the distribution of values in [column_name], showing how often each value appears."}, {"question": "Which [column_name] value appears most frequently in [table_name]?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "Returns the most frequent value of [column_name] from [table_name]."}, {"question": "What is the correlation between [column_name1] and [column_name2] in [table_name]?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "Returns the Pearson correlation coefficient between [column_name1] and [column_name2] in [table_name]."}, {"question": "Calculate the variance of [column_name] for records where [column_name2] > [value].", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "Returns the variance of [column_name] from records where [column_name2] exceeds a certain value."}, {"question": "Show me the average, minimum, and maximum values of [column_name] by [category_column] in [table_name].", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "Returns the average, minimum, and maximum values of [column_name], grouped by [category_column]."}, {"question": "What is the median value of [column_name] in [table_name]?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "Returns the median value of [column_name] from [table_name]."}, {"question": "Calculate the moving average of [column_name] for the last 30 days, grouped by [category_column].", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "Returns the moving average of [column_name] for the last 30 days, grouped by [category_column]."}, {"question": "Find the skewness of [column_name] in [table_name].", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "Returns the skewness of [column_name], which measures the asymmetry of the data distribution."}, {"question": "Show me the cumulative sum of [column_name] by [category_column] over time, ordered by [date_column].", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "Returns the cumulative sum of [column_name], grouped by [category_column], and ordered by [date_column]."}, {"question": "Calculate the interquartile range (IQR) of [column_name] in [table_name].", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "Returns the interquartile range (IQR) of [column_name] in [table_name]."}, {"question": "Find the ratio of [column_name1] to [column_name2] for each record and filter for records where the ratio is greater than [value].", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "Returns the ratio of [column_name1] to [column_name2] and filters for records where the ratio exceeds a certain value."}, {"question": "Show the rolling sum of [column_name] over the last 5 records, ordered by [date_column].", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "Returns the rolling sum of [column_name] over the last 5 records, ordered by [date_column]."}, {"question": "Calculate the percentile rank of [column_name] in [table_name] for each record.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "Returns the percentile rank of [column_name] for each record in [table_name]."}, {"question": "Insert a new record into [table_name] with [column1: value1, column2: value2].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "Inserts a new record with values for [column1] and [column2] into [table_name]."}, {"question": "Update [column_name] to [new_value] where [condition].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "Updates the value of [column_name] to [new_value] for records matching the [condition]."}, {"question": "Delete records from [table_name] where [condition].", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "Deletes records from [table_name] where the [condition] is met."}, {"question": "Create a new table [new_table_name] with columns [column1, column2, ...].", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "Creates a new table called [new_table_name] with the specified columns and data types."}, {"question": "Insert multiple records into [table_name].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "Inserts multiple records into [table_name] with specified values for [column1] and [column2]."}, {"question": "Update multiple columns in [table_name] where [condition].", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "Updates multiple columns ([column1] and [column2]) with new values where the [condition] is met."}, {"question": "Create a table with constraints (e.g., primary key, unique, not null).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Creates a new table with primary key, unique, and not null constraints."}, {"question": "Insert a record with a default value for a column.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "Inserts a new record into [table_name], with [column2] using its default value."}, {"question": "Update a record and set a column to NULL where [condition].", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "Updates records in [table_name] and sets [column_name] to NULL where the [condition] is met."}, {"question": "Create a table with a foreign key reference to another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a new table with a foreign key referencing another table's column."}, {"question": "Insert data from one table into another table.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "Inserts data from [table_name1] into [table_name2] based on a condition."}, {"question": "Update a record to increase/decrease a column's value.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "Increases the value of [column_name] by [value] for records matching [condition]."}, {"question": "Delete all records from [table_name].", "query": "DELETE FROM [table_name];", "answer": "Deletes all records from [table_name] but does not drop the table."}, {"question": "Drop a table from the database.", "query": "DROP TABLE [table_name];", "answer": "Drops the entire table from the database, including its structure and data."}, {"question": "Alter an existing table by adding a new column.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Adds a new column to an existing table."}, {"question": "Alter a table to modify an existing column's data type.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Alters the data type of an existing column in the table."}, {"question": "Alter a table to drop a column.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Drops a column from an existing table."}, {"question": "Create a new table with a composite primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "Creates a new table with a composite primary key consisting of [column1] and [column2]."}, {"question": "Insert data with a subquery to fetch values from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Inserts data into [table_name] by selecting values from another table ([other_table]) based on a condition."}, {"question": "Truncate a table (removes all records but keeps the structure).", "query": "TRUNCATE TABLE [table_name];", "answer": "Removes all records from [table_name] but preserves its structure and schema."}, {"question": "Insert a new record into [table_name] with default values for all columns.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Inserts a new record with the default values defined for the columns in the table."}, {"question": "Update multiple rows in [table_name] where [column_name] equals [old_value] and set [column_name] to [new_value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "Updates all records where [column_name] equals [old_value] and sets it to [new_value]."}, {"question": "Update the column [column_name] for a specific record where the primary key [id] equals [value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Updates the value of [column_name] for the record with primary key [id] equal to [value]."}, {"question": "Delete all records in [table_name] where [column_name] is NULL.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "Deletes records where [column_name] is NULL."}, {"question": "Create a table [new_table_name] with a column that references another table\u2019s primary key (foreign key).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a table with a foreign key that references a primary key in another table."}, {"question": "Update [table_name] and set [column_name] to [value] for rows where [column_name] is greater than [value].", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "Updates [column_name] to [value] for records where [column_name] is greater than the specified value."}, {"question": "Delete records in [table_name] where [column_name] is less than [value].", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "Deletes records where the value of [column_name] is less than the specified value."}, {"question": "Create a new table with a column that stores a unique constraint.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "Creates a new table with a unique constraint on [column1]."}, {"question": "Alter a table to add a NOT NULL constraint to an existing column.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Alters the table to ensure that [column_name] cannot have NULL values."}, {"question": "Insert data into [table_name] where [column_name] is calculated by combining values from two columns.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Inserts a new record and calculates [column3] as the combination of [value1] and [value2]."}, {"question": "Update records in [table_name] by setting [column_name] to the average value of that column.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "Updates all records in [table_name], setting [column_name] to its average value."}, {"question": "Create a new table [new_table_name] and include a timestamp column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Creates a new table and automatically inserts the current timestamp into [created_at] when a new record is added."}, {"question": "Insert data into [table_name] based on a condition from another table (using a subquery).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "Inserts data into [table_name] from [other_table], where [column3] is greater than [value]."}, {"question": "Delete duplicate rows from [table_name] based on [column_name] keeping only the first occurrence.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate rows in [table_name] based on [column_name], keeping the first occurrence."}, {"question": "Insert a record into [table_name] and use a subquery for one of the column values.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "Inserts a new record into [table_name], where [column2] is set by a subquery fetching data from [other_table]."}, {"question": "Create a new table with a composite foreign key referencing multiple columns from another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Creates a new table with a composite foreign key referencing multiple columns from [referenced_table]."}, {"question": "Update records in [table_name] by setting a column value based on a condition and include a CASE statement.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "Updates records in [table_name], setting [column_name] to 'High' or 'Low' based on the value comparison."}, {"question": "Alter a table by adding a unique constraint to multiple columns.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "Alters [table_name] by adding a unique constraint on [column1] and [column2]."}, {"question": "Create a view to summarize data from [table_name].", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "Creates a view that summarizes data by counting [column2] grouped by [column1]."}, {"question": "Create a trigger that automatically updates a column [timestamp_column] to the current time when a row is updated.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "Creates a trigger that updates the [timestamp_column] whenever a record in [table_name] is updated."}, {"question": "Truncate a table and reset its identity column.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "Removes all records from [table_name] and resets the identity column to its starting value."}, {"question": "Delete records older than a specific date.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "Deletes records where [date_column] is older than the specified date."}, {"question": "Insert a record into [table_name] with a subquery fetching data from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Inserts data into [table_name] based on a select query from [other_table]."}, {"question": "Add a CHECK constraint to a column to ensure values fall within a specific range.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "Adds a constraint to ensure values in [column_name] are between 0 and 100."}, {"question": "Delete records from [table_name] where [column_name] is duplicated.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate records from [table_name], keeping the first occurrence based on [column_name]."}, {"question": "What are the triggers defined on the [table_name] table?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Returns the triggers defined on the specified table."}, {"question": "List all stored procedures in the database:", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Returns all stored procedures in the public schema."}, {"question": "What is the current schema of the [table_name] table?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Returns the schema of the specified table."}, {"question": "Show the foreign key relationships of [table_name] with other tables:", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign key relationships of the specified table with other tables."}, {"question": "What are the columns that have indexes in the [table_name] table?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the columns that have indexes in the specified table."}, {"question": "What is the size of the indexes in the database?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Returns the size of the indexes in the specified table (PostgreSQL)."}, {"question": "How many indexes exist on [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the number of indexes on the specified table."}, {"question": "Show me all index definitions in the database:", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Returns all index definitions in the specified schema."}, {"question": "What are the types of indexes used on [table_name]?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the types of indexes used on the specified table."}, {"question": "What are the names of the indexes associated with the [table_name] table?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the names of the indexes associated with the specified table."}, {"question": "Are there any composite indexes on [table_name]? If so, which columns are included?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Returns the composite indexes on the specified table and the columns included in each."}, {"question": "Show the index creation scripts for [table_name]:", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Returns the index creation scripts for the specified table (PostgreSQL)."}, {"question": "What foreign keys exist between [table_name] and other tables?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys between the specified table and other tables."}, {"question": "How many foreign key constraints are there in [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns the number of foreign key constraints in the specified table."}, {"question": "What is the referential integrity rule (e.g., CASCADE, SET NULL) for the foreign keys in [table_name]?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Returns the referential integrity rules for the foreign keys in the specified table."}, {"question": "List all parent tables for foreign keys in [table_name]:", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns all parent tables for foreign keys in the specified table."}, {"question": "List all child tables that reference [table_name] via foreign keys:", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns all child tables that reference the specified table via foreign keys."}, {"question": "List all constraints on the [table_name] table:", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Returns all constraints on the specified table."}, {"question": "Are there any foreign key violations in [table_name]? If so, list them:", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Returns any foreign key violations in the specified table."}, {"question": "Show the unique constraints on the [table_name] table:", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Returns the unique constraints on the specified table."}, {"question": "List all check constraints in the database schema:[schema_name]", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = '[schema_name]';", "answer": "Returns all check constraints in the specified schema."}, {"question": "What are the columns involved in primary key constraints for [table_name]?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Returns the columns involved in primary key constraints for the specified table."}, {"question": "What views depend on [table_name]?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns the views that depend on the specified table."}, {"question": "Show me the data types of the columns in [table_name].", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the data types of the columns in the specified table."}, {"question": "What is the most common [product/behavior] combination by [users/customers]?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Returns the most common product or behavior combination by users or customers."}, {"question": "Find all [users/customers] who have provided feedback in the last [time_period].", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns all users or customers who have provided feedback in the last specified time period."}, {"question": "Find [products/records] that are low in stock.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Returns products or records that are low in stock."}, {"question": "List all [products] that haven\u2019t been sold in the last [time_period].", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Returns all products that haven\u2019t been sold in the last specified time period."}, {"question": "Find the [products] with the highest [return/complaint] rate.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "Returns the products with the highest return or complaint rate."}, {"question": "What are the top-selling [products] in the last [time_period]?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Returns the top-selling products in the last specified time period."}, {"question": "Find [products] that have been on sale for the longest.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "Returns the products that have been on sale for the longest time."}, {"question": "Identify [products] that have been out of stock for more than [time_period].", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns products that have been out of stock for more than the specified time period."}, {"question": "What is the total [revenue/cost] for the [time_period]?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total revenue or cost for the specified time period."}, {"question": "Find the [expenses] for a given [time_period] and categorize them.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Returns the expenses for a given time period, categorized by type."}, {"question": "Identify the top [N] highest revenue-generating [items/products].", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "Returns the top N highest revenue-generating items or products."}, {"question": "What is the total amount of [pending/unpaid] [invoices/orders]?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Returns the total amount of pending or unpaid invoices or orders."}, {"question": "What is the total [discount/bonus] given over the last [time_period]?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total discount or bonus given over the last specified time period."}, {"question": "Compare [revenue/cost] against [expenses/other_metric] for the given [time_period].", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns a comparison of revenue or cost against expenses or another metric for the given time period."}, {"question": "Identify the top-performing keywords/ad_copy for PPC_campaign.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Returns the top-performing keywords and ad copy for a specific PPC campaign."}, {"question": "List all orders/transactions with suspicious billing_address/payment_method.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "Returns all orders or transactions with suspicious billing addresses or payment methods."}, {"question": "Find customers/users who have not updated their contact_info in the last time period.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Returns customers or users who have not updated their contact information in the specified time period."}, {"question": "Identify products/services that are not compliant with safety/quality standards.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "Returns products or services that are not compliant with safety or quality standards."}, {"question": "What are the flagged transactions/orders based on fraud_detection_rule?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Returns transactions or orders that have been flagged based on fraud detection rules."}, {"question": "Find all employees overdue for mandatory training/certification.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Returns employees who are overdue for mandatory training or certification."}, {"question": "Find records with missing data in critical fields like [field_name].", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Returns records with missing data in critical fields."}, {"question": "What is the percentage of incomplete records in [table_name]?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Returns the percentage of incomplete records in the specified table."}, {"question": "List all products/services with no description or incomplete details.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "Returns all products or services with no description or incomplete details."}, {"question": "Check for inconsistent data across different fields/columns (e.g., date formats).", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Returns records with inconsistent data across different fields or columns."}, {"question": "Find records that failed validation/checks.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Returns records that failed validation or checks."}, {"question": "Compare metric1 in current_period to metric2 in previous_period.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Returns a comparison of metric1 in the current period to metric2 in the previous period."}, {"question": "How do metrics compare month-to-month (e.g., sales, expenses)?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Returns a month-to-month comparison of metrics such as sales and expenses."}, {"question": "Compare employee performance based on metric1 vs metric2.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "Returns a comparison of employee performance based on metric1 and metric2."}, {"question": "Compare product1 vs product2 in terms of sales/returns.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "Returns a comparison of product1 and product2 in terms of sales and returns."}, {"question": "Find the growth rate between two periods for metric.", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Returns the growth rate between two periods for a specified metric."}, {"question": "Find the average rating for [product_name].", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Returns the average rating for a specified product."}, {"question": "List all products with a rating below X stars.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Returns all products with a rating below a specified number of stars."}, {"question": "Find all reviews for [product_name].", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Returns all reviews for a specified product."}, {"question": "How does customer feedback correlate with returns/complaints?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "Returns the correlation between customer feedback and returns or complaints."}, {"question": "Identify products with the highest customer satisfaction ratings.", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "Returns the products with the highest customer satisfaction ratings."}, {"question": "What percentage of orders were shipped late in [time_period]?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Returns the percentage of orders that were shipped late in a specified time period."}, {"question": "Find all orders that were shipped within [X] days of placement.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Returns all orders that were shipped within a specified number of days of placement."}, {"question": "Identify the average shipping cost/processing time per order.", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Returns the average shipping cost and processing time per order."}, {"question": "List all orders that require expedited/overnight shipping.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "Returns all orders that require expedited or overnight shipping."}, {"question": "Find orders that have been canceled after shipment.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "Returns all orders that have been canceled after shipment."}, {"question": "Find all users who have logged in within the last [X] days.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Returns all users who have logged in within the last specified number of days."}, {"question": "What is the churn rate of [users/customers] within the last [time_period]?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Returns the churn rate of users or customers within the last specified time period."}, {"question": "Find users who have not made a purchase after their first visit in [time_period].", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Returns users who have not made a purchase after their first visit in the specified time period."}, {"question": "Identify users with the highest lifetime value (LTV).", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "Returns the users with the highest lifetime value."}, {"question": "Find the top [N] users based on purchase frequency.", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Returns the top N users based on purchase frequency."}, {"question": "How many rows are there in the {table_name} table?", "query": "SELECT COUNT(*) AS total_records FROM {table_name};", "answer": "Provides the total number of rows in the {table_name} table."}, {"question": "Retrieve all data from the {table_name} table.", "query": "SELECT * FROM {table_name};", "answer": "Fetches all rows and columns from the {table_name} table."}, {"question": "What unique values exist in the {column_name} column of the {table_name} table?", "query": "SELECT DISTINCT {column_name} FROM {table_name};", "answer": "Lists all distinct values in the {column_name} column of the {table_name} table."}, {"question": "Find all rows where {column_name} equals '{value}'.", "query": "SELECT * FROM {table_name} WHERE {column_name} = '{value}';", "answer": "Returns all rows where {column_name} is equal to {value}."}, {"question": "What are the average, maximum, and minimum values of {column_name} in {table_name}?", "query": "SELECT AVG({column_name}) AS average_value, MAX({column_name}) AS maximum_value, MIN({column_name}) AS minimum_value FROM {table_name};", "answer": "Provides the average, maximum, and minimum values of {column_name} in the {table_name} table."}, {"question": "How many rows have {column_name} greater than {value}?", "query": "SELECT COUNT(*) AS count_records FROM {table_name} WHERE {column_name} > {value};", "answer": "Counts the number of rows where {column_name} is greater than {value}."}, {"question": "What is the sum of [column_name] grouped by [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "Calculates the total sum of [column_name], grouped by [grouping_column]."}, {"question": "How many rows exist for each [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "Counts the number of rows for each unique value in [grouping_column]."}, {"question": "Show the top 5 [grouping_column]s with the highest total [column_name].", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "Lists the top 5 [grouping_column]s with the highest total sum of [column_name]."}, {"question": "What is the percentage distribution of [column_name] grouped by [grouping_column]?", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "Shows the percentage distribution of [column_name] for each unique value of [grouping_column]."}, {"question": "Show the top 10 highest/lowest [column_name] values from [table_name].", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; For lowest values, change DESC to ASC", "answer": "Lists the top 10 records with the highest values in [column_name]. Use ASC for the lowest values."}, {"question": "Find all rows where [column_name] contains 'value'.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "Returns all rows where [column_name] contains the substring 'value'."}, {"question": "List rows where [column_name] is between [value1] and [value2].", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "Shows all rows where [column_name] is within the range of [value1] and [value2]."}, {"question": "Sort the [table_name] table by [column_name] in descending order.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "Sorts all rows from [table_name] by [column_name] in descending order."}, {"question": "Combine data from [table1] and [table2] based on [common_column].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Combines data from [table1] and [table2] where [common_column] matches in both tables."}, {"question": "Find all rows in [table1] that have no matching rows in [table2].", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "Lists all rows from [table1] that do not have matching rows in [table2]."}, {"question": "What is the total [column_name] from [table1] grouped by [table2.column_name]?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "Calculates the total sum of [column_name] from [table1], grouped by [table2].[column_name]."}, {"question": "Get the details of [table1] and include matching rows from [table2].", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Fetches all columns from both [table1] and [table2] for matching rows based on [common_column]."}, {"question": "Combine data from [table1], [table2], and [table3] where [table1.column_name] = [table2.column_name] and [table2.column_name] = [table3.column_name], and filter for rows where [table1.date] is greater than '2023-01-01'.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "Combines data from [table1], [table2], and [table3] where the join condition is met, and the date in [table1] is greater than '2023-01-01'."}, {"question": "Get the total [column_name] from [table1], where rows are joined with [table2] and [table3], grouped by [table3.column_name], and filter for rows where [table2.column_name] = 'value' and [table1.date] is in the last 30 days.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "Calculates the total sum of [column_name] from [table1], grouped by [table3.column_name], filtered by [table2.column_name] = 'value' and [table1.date] within the last 30 days."}, {"question": "Find all rows from [table1] with their corresponding rows from [table2] and [table3], where [table1.column_name] > [value], [table2.column_name] = 'active', and sort the results by [table3.column_name] in ascending order.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "Lists all columns from [table1], [table2], and [table3] based on the specified filter conditions and ordered by [table3.column_name] in ascending order."}, {"question": "Calculate the total [column_name] from [table1] grouped by [table2.column_name], filter for rows where [table2.status] = 'approved' and [table1.date] is between '2023-01-01' and '2023-12-31', and include a count of rows for each group.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "Calculates the total sum and count of [column_name] from [table1], grouped by [table2.column_name], filtered by the status 'approved' and the date range in 2023."}, {"question": "Find all rows added or updated in the last 7 days.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "Lists all rows from [table_name] that were added or updated in the last 7 days, assuming the presence of an [updated_at] column."}, {"question": "What is the monthly or yearly total of [column_name] from [table_name]?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "Calculates the total sum of [column_name] for each month, grouped by [date_column]."}, {"question": "Show trends in [column_name] grouped by [time_column].", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "Displays the trend of [column_name] over time, grouped by [time_column] (e.g., day, month, year)."}, {"question": "What is the earliest or latest [column_name] in [table_name]?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "Provides the earliest value in [column_name] from [table_name]."}, {"question": "What is the standard deviation of [column_name] in [table_name]?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "Calculates the standard deviation of [column_name] from [table_name]."}, {"question": "Show the distribution (histogram-like data) of [column_name].", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "Displays the distribution of values in [column_name], showing how often each value appears."}, {"question": "Which [column_name] value appears most frequently in [table_name]?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "Identifies the most frequent value of [column_name] from [table_name]."}, {"question": "What is the correlation between [column_name1] and [column_name2] in [table_name]?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "Calculates the Pearson correlation coefficient between [column_name1] and [column_name2] in [table_name]."}, {"question": "Calculate the variance of [column_name] for rows where [column_name2] is greater than [value].", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "Computes the variance of [column_name] from rows where [column_name2] exceeds a certain value."}, {"question": "Show the average, minimum, and maximum values of [column_name] by [category_column] in [table_name].", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "Provides the average, minimum, and maximum values of [column_name], grouped by [category_column]."}, {"question": "What is the median value of [column_name] in [table_name]?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "Calculates the median value of [column_name] from [table_name]."}, {"question": "Calculate the moving average of [column_name] for the last 30 days, grouped by [category_column].", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "Computes the moving average of [column_name] for the last 30 days, grouped by [category_column]."}, {"question": "Find the skewness of [column_name] in [table_name].", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "Calculates the skewness of [column_name], which measures the asymmetry of the data distribution."}, {"question": "Show the cumulative sum of [column_name] by [category_column] over time, ordered by [date_column].", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "Displays the cumulative sum of [column_name], grouped by [category_column], and ordered by [date_column]."}, {"question": "Calculate the interquartile range (IQR) of [column_name] in [table_name].", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "Computes the interquartile range (IQR) of [column_name] in [table_name]."}, {"question": "Find the ratio of [column_name1] to [column_name2] for each row and filter for rows where the ratio is greater than [value].", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "Calculates the ratio of [column_name1] to [column_name2] and filters for rows where the ratio exceeds a certain value."}, {"question": "Show the rolling sum of [column_name] over the last 5 rows, ordered by [date_column].", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "Displays the rolling sum of [column_name] over the last 5 rows, ordered by [date_column]."}, {"question": "Calculate the percentile rank of [column_name] in [table_name] for each row.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "Computes the percentile rank of [column_name] for each row in [table_name]."}, {"question": "Add a new entry to [table_name] with values for [column1] and [column2].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "Adds a new entry with specified values for [column1] and [column2] into [table_name]."}, {"question": "Modify [column_name] to [new_value] where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "Modifies the value of [column_name] to [new_value] for records that meet the [condition]."}, {"question": "Remove entries from [table_name] where [condition] is true.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "Removes entries from [table_name] where the [condition] is true."}, {"question": "Create a new table [new_table_name] with specified columns [column1, column2, ...].", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "Creates a new table named [new_table_name] with the specified columns and data types."}, {"question": "Add multiple entries to [table_name].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "Adds multiple entries to [table_name] with specified values for [column1] and [column2]."}, {"question": "Modify multiple columns in [table_name] where [condition] is met.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "Modifies multiple columns ([column1] and [column2]) with new values where the [condition] is met."}, {"question": "Create a table with constraints like primary key, unique, and not null.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Creates a new table with primary key, unique, and not null constraints."}, {"question": "Add an entry with a default value for a column.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "Adds a new entry into [table_name], with [column2] using its default value."}, {"question": "Set a column to NULL for records where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "Sets [column_name] to NULL for records in [table_name] where the [condition] is met."}, {"question": "Create a table with a foreign key reference to another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a new table with a foreign key referencing another table's column."}, {"question": "Insert data from one table into another based on a condition.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "Inserts data from [table_name1] into [table_name2] based on a condition."}, {"question": "Increase or decrease a column's value for records where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "Increases the value of [column_name] by [value] for records matching [condition]."}, {"question": "Remove all entries from [table_name].", "query": "DELETE FROM [table_name];", "answer": "Removes all entries from [table_name] but does not drop the table."}, {"question": "Remove a table from the database.", "query": "DROP TABLE [table_name];", "answer": "Removes the entire table from the database, including its structure and data."}, {"question": "Add a new column to an existing table.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Adds a new column to an existing table."}, {"question": "Change the data type of an existing column in a table.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Changes the data type of an existing column in the table."}, {"question": "Remove a column from an existing table.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Removes a column from an existing table."}, {"question": "Create a new table with a composite primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "Creates a new table with a composite primary key consisting of [column1] and [column2]."}, {"question": "Insert data using a subquery to fetch values from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Inserts data into [table_name] by selecting values from another table ([other_table]) based on a condition."}, {"question": "Remove all entries from a table but keep its structure.", "query": "TRUNCATE TABLE [table_name];", "answer": "Removes all entries from [table_name] but preserves its structure and schema."}, {"question": "Add a new entry with default values for all columns.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Adds a new entry with the default values defined for the columns in the table."}, {"question": "Update multiple rows where [column_name] equals [old_value] and set it to [new_value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "Updates all records where [column_name] equals [old_value] and sets it to [new_value]."}, {"question": "Update a specific record where the primary key [id] equals [value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Updates the value of [column_name] for the record with primary key [id] equal to [value]."}, {"question": "Remove all entries where [column_name] is NULL.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "Removes entries where [column_name] is NULL."}, {"question": "Create a table with a column that references another table\u2019s primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a table with a foreign key that references a primary key in another table."}, {"question": "Update [column_name] to [value] for rows where [column_name] is greater than [value].", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "Updates [column_name] to [value] for records where [column_name] is greater than the specified value."}, {"question": "Remove entries where [column_name] is less than [value].", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "Removes entries where the value of [column_name] is less than the specified value."}, {"question": "Create a new table with a unique constraint on a column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "Creates a new table with a unique constraint on [column1]."}, {"question": "Add a NOT NULL constraint to an existing column.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Adds a NOT NULL constraint to an existing column in the table."}, {"question": "Insert data where a column is calculated by combining values from two columns.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Adds a new entry and calculates [column3] as the combination of [value1] and [value2]."}, {"question": "Set a column value to the average value of that column.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "Sets [column_name] to its average value for all records in [table_name]."}, {"question": "Create a new table with a timestamp column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Creates a new table and automatically inserts the current timestamp into [created_at] when a new entry is added."}, {"question": "Insert data based on a condition from another table using a subquery.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "Adds data into [table_name] from [other_table], where [column3] is greater than [value]."}, {"question": "Remove duplicate rows based on [column_name], keeping only the first occurrence.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Removes duplicate rows in [table_name] based on [column_name], keeping the first occurrence."}, {"question": "Add a new entry and use a subquery for one of the column values.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "Adds a new entry into [table_name], where [column2] is set by a subquery fetching data from [other_table]."}, {"question": "Create a new table with a composite foreign key referencing multiple columns from another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Creates a new table with a composite foreign key referencing multiple columns from [referenced_table]."}, {"question": "Update records by setting a column value based on a condition using a CASE statement.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "Updates records in [table_name], setting [column_name] to 'High' or 'Low' based on the value comparison."}, {"question": "Add a unique constraint to multiple columns in a table.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "Adds a unique constraint on [column1] and [column2] in [table_name]."}, {"question": "Create a view to aggregate data from a table.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "Creates a view that aggregates data by counting [column2] grouped by [column1]."}, {"question": "Set up a trigger to automatically update a timestamp column when a row is modified.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "Creates a trigger that updates the [timestamp_column] whenever a row in [table_name] is modified."}, {"question": "Clear a table and reset its auto-increment column.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "Clears all records from [table_name] and resets the auto-increment column."}, {"question": "Remove records older than a certain date.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "Deletes records from [table_name] where [date_column] is older than the specified date."}, {"question": "Insert a record into [table_name] using data from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Inserts data into [table_name] based on a select query from [other_table]."}, {"question": "Add a constraint to ensure a column's values are within a specific range.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "Adds a check constraint to ensure values in [column_name] are between 0 and 100."}, {"question": "Delete duplicate records from [table_name] based on a column.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate records from [table_name], keeping the first occurrence based on [column_name]."}, {"question": "List the triggers defined on the [table_name] table.", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Returns the triggers defined on the specified table."}, {"question": "Show all stored procedures in the database.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Returns all stored procedures in the public schema."}, {"question": "What is the schema of the [table_name] table?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Returns the schema of the specified table."}, {"question": "Show the foreign key relationships of [table_name] with other tables.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign key relationships of the specified table with other tables."}, {"question": "Which columns in [table_name] have indexes?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the columns that have indexes in the specified table."}, {"question": "What is the size of the indexes in the database?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Returns the size of the indexes in the specified table (PostgreSQL)."}, {"question": "How many indexes are there on [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the number of indexes on the specified table."}, {"question": "Show all index definitions in the database.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Returns all index definitions in the specified schema."}, {"question": "What types of indexes are used on [table_name]?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the types of indexes used on the specified table."}, {"question": "What are the names of the indexes on the [table_name] table?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the names of the indexes on the specified table."}, {"question": "Are there any composite indexes on [table_name]? If so, which columns are included?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Returns the composite indexes on the specified table and the columns included in each."}, {"question": "Show the index creation scripts for [table_name].", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Returns the index creation scripts for the specified table (PostgreSQL)."}, {"question": "What foreign keys exist between [table_name] and other tables?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys between the specified table and other tables."}, {"question": "How many foreign key constraints are there in [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns the number of foreign key constraints in the specified table."}, {"question": "What is the referential integrity rule for the foreign keys in [table_name]?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Returns the referential integrity rules for the foreign keys in the specified table."}, {"question": "List all parent tables for foreign keys in [table_name].", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns all parent tables for foreign keys in the specified table."}, {"question": "List all child tables that reference [table_name] via foreign keys.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns all child tables that reference the specified table via foreign keys."}, {"question": "List all constraints on the [table_name] table.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Returns all constraints on the specified table."}, {"question": "Are there any foreign key violations in [table_name]? If so, list them.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Returns any foreign key violations in the specified table."}, {"question": "Show the unique constraints on the [table_name] table.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Returns the unique constraints on the specified table."}, {"question": "List all check constraints in the database.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Returns all check constraints in the specified schema."}, {"question": "What are the columns involved in primary key constraints for [table_name]?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Returns the columns involved in primary key constraints for the specified table."}, {"question": "What views depend on [table_name]?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns the views that depend on the specified table."}, {"question": "Show the data types of the columns in [table_name].", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the data types of the columns in the specified table."}, {"question": "What is the most common product or behavior combination by users or customers?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Returns the most common product or behavior combination by users or customers."}, {"question": "Find all users or customers who have provided feedback in the last time period.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns all users or customers who have provided feedback in the last specified time period."}, {"question": "Find products or records that are low in stock.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Returns products or records that are low in stock."}, {"question": "List all products that haven\u2019t been sold in the last time period.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Returns all products that haven\u2019t been sold in the last specified time period."}, {"question": "Find the products with the highest return or complaint rate.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "Returns the products with the highest return or complaint rate."}, {"question": "What are the top-selling products in the last time period?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Returns the top-selling products in the last specified time period."}, {"question": "Find products that have been on sale for the longest time.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "Returns the products that have been on sale for the longest time."}, {"question": "Identify products that have been out of stock for more than a specified time period.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns products that have been out of stock for more than the specified time period."}, {"question": "What is the total revenue or cost for the specified time period?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total revenue or cost for the specified time period."}, {"question": "Find the expenses for a given time period and categorize them.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Returns the expenses for a given time period, categorized by type."}, {"question": "Identify the top N highest revenue-generating items or products.", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "Returns the top N highest revenue-generating items or products."}, {"question": "What is the total amount of pending or unpaid invoices or orders?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Returns the total amount of pending or unpaid invoices or orders."}, {"question": "What is the total amount of discounts or bonuses given in the last [time_period]?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Calculates the total discounts or bonuses provided in the specified time period."}, {"question": "How does revenue compare to expenses for the given [time_period]?", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Compares revenue to expenses for the specified time period."}, {"question": "What are the top-performing keywords and ad copies for a PPC campaign?", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Identifies the best-performing keywords and ad copies for a specific PPC campaign."}, {"question": "List orders or transactions with suspicious billing addresses or payment methods.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "Finds orders or transactions with potentially fraudulent billing addresses or payment methods."}, {"question": "Which customers or users have not updated their contact information in the last [time_period]?", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Lists customers or users who have not updated their contact information within the specified time period."}, {"question": "Identify products or services that do not meet safety or quality standards.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "Finds products or services that fail to meet safety or quality standards."}, {"question": "What transactions or orders have been flagged for potential fraud?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Lists transactions or orders flagged for potential fraud."}, {"question": "Which employees are overdue for mandatory training or certification?", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Identifies employees who are overdue for required training or certification."}, {"question": "Find records with missing data in critical fields.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Lists records with missing data in important fields."}, {"question": "Identify duplicate entries in the customer or product database.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "Finds duplicate entries in the customer or product database."}, {"question": "What percentage of records in [table_name] are incomplete?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Calculates the percentage of incomplete records in the specified table."}, {"question": "List products or services with missing or incomplete descriptions.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "Finds products or services with missing or incomplete descriptions."}, {"question": "Check for inconsistent data across different fields or columns.", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Identifies records with inconsistent data across fields or columns."}, {"question": "Find records that failed validation checks.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Lists records that did not pass validation checks."}, {"question": "Compare metric1 in the current period to metric2 in the previous period.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Compares metric1 in the current period to metric2 in the previous period."}, {"question": "How do metrics like sales and expenses compare month-to-month?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Provides a month-to-month comparison of metrics such as sales and expenses."}, {"question": "Compare employee performance based on two metrics.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "Compares employee performance based on two specified metrics."}, {"question": "Compare sales and returns for two products.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "Compares sales and returns for two specified products."}, {"question": "What is the growth rate of a metric between two periods?", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Calculates the growth rate of a metric between two periods."}, {"question": "What is the average rating for a product?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Finds the average rating for a specified product."}, {"question": "List products with ratings below a certain threshold.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Identifies products with ratings below a specified threshold."}, {"question": "Find all reviews for a specific product.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Lists all reviews for a specified product."}, {"question": "How does customer feedback correlate with returns or complaints?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "Analyzes the correlation between customer feedback and returns or complaints."}, {"question": "Which products have the highest customer satisfaction ratings?", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "Identifies products with the highest customer satisfaction ratings."}, {"question": "What percentage of orders were shipped late in a given time period?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Calculates the percentage of orders shipped late in a specified time period."}, {"question": "Find orders shipped within a certain number of days after placement.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Lists orders shipped within a specified number of days after placement."}, {"question": "What is the average shipping cost and processing time per order?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Calculates the average shipping cost and processing time per order."}, {"question": "List orders requiring expedited or overnight shipping.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "Identifies orders that require expedited or overnight shipping."}, {"question": "Find orders canceled after shipment.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "Lists orders that were canceled after shipment."}, {"question": "Which users have logged in within the last [X] days?", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Finds users who have logged in within the last specified number of days."}, {"question": "What is the churn rate of users or customers in the last [time_period]?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Calculates the churn rate of users or customers in the specified time period."}, {"question": "Find users who have not made a purchase after their first visit in [time_period].", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Identifies users who have not made a purchase after their first visit in the specified time period."}, {"question": "Which users have the highest lifetime value (LTV)?", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "Finds users with the highest lifetime value."}, {"question": "Who are the top [N] users based on purchase frequency?", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Lists the top N users based on how frequently they make purchases."}, {"question": "What is the average time between a user's first visit and first purchase?", "query": "SELECT AVG(DATEDIFF('day', first_visit_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(visit_date) AS first_visit_date, MIN(purchase_date) AS first_purchase_date FROM visits JOIN purchases ON visits.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between a user's first visit and first purchase."}, {"question": "List users who have not logged in or visited the site in the last [X] days.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Identifies users who have not logged in or visited the site in the specified number of days."}, {"question": "What is the average session duration for users in the last [time_period]?", "query": "SELECT AVG(session_duration) AS avg_session_duration FROM user_sessions WHERE session_date >= CURRENT_DATE - INTERVAL '[time_period]';", "answer": "Calculates the average session duration for users in the specified time period."}, {"question": "Find users who have abandoned their shopping carts.", "query": "SELECT user_id, cart_id, abandoned_date FROM shopping_carts WHERE abandoned_date IS NOT NULL;", "answer": "Lists users who have abandoned their shopping carts."}, {"question": "Which users have the highest engagement or activity levels?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "Identifies users with the highest engagement or activity levels."}, {"question": "What is the average number of orders per user in the last [time_period]?", "query": "SELECT AVG(order_count) AS avg_orders_per_user FROM (SELECT user_id, COUNT(*) AS order_count FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_orders;", "answer": "Calculates the average number of orders per user in the specified time period."}, {"question": "List users who have not completed the onboarding process.", "query": "SELECT user_id, username FROM users WHERE onboarding_complete = false;", "answer": "Identifies users who have not completed the onboarding process."}, {"question": "Which users have the highest referral rates?", "query": "SELECT user_id, COUNT(*) AS referral_count FROM referrals GROUP BY user_id ORDER BY referral_count DESC LIMIT 1;", "answer": "Finds users with the highest referral rates."}, {"question": "What is the average time between user sign-up and first purchase?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between user sign-up and first purchase."}, {"question": "Find users who have not completed a specific action or task.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_actions WHERE action_completed = true AND action_type = '[specific_action]');", "answer": "Lists users who have not completed a specific action or task."}, {"question": "Which users have the highest retention rates?", "query": "SELECT user_id, (COUNT(DISTINCT purchase_date) * 100.0) / COUNT(DISTINCT visit_date) AS retention_rate FROM user_activity GROUP BY user_id ORDER BY retention_rate DESC LIMIT 1;", "answer": "Finds users with the highest retention rates."}, {"question": "What is the average time between user visits to the site?", "query": "SELECT AVG(DATEDIFF('day', LAG(visit_date) OVER (PARTITION BY user_id ORDER BY visit_date), visit_date)) AS avg_time_between_visits FROM user_visits;", "answer": "Calculates the average time between user visits to the site."}, {"question": "List users who have not interacted with the platform in the last [X] days.", "query": "SELECT user_id, username FROM users WHERE last_interaction_date < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Identifies users who have not interacted with the platform in the specified number of days."}, {"question": "Which users have the highest customer satisfaction ratings?", "query": "SELECT user_id, AVG(rating) AS avg_rating FROM user_reviews GROUP BY user_id ORDER BY avg_rating DESC LIMIT 1;", "answer": "Finds users with the highest customer satisfaction ratings."}, {"question": "What is the average number of support tickets per user in the last [time_period]?", "query": "SELECT AVG(ticket_count) AS avg_tickets_per_user FROM (SELECT user_id, COUNT(*) AS ticket_count FROM support_tickets WHERE ticket_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_tickets;", "answer": "Calculates the average number of support tickets per user in the specified time period."}, {"question": "Find users who have not completed a specific training or certification.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_certifications WHERE certification_completed = true AND certification_type = '[specific_certification]');", "answer": "Lists users who have not completed a specific training or certification."}, {"question": "Which users have the highest engagement or activity levels?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "Identifies users with the highest engagement or activity levels."}, {"question": "What is the average time between user sign-up and first purchase?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between user sign-up and first purchase."}, {"question": "Find all tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Lists all tables in the public schema."}, {"question": "Find all created tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';", "answer": "Lists all created tables in the public schema."}, {"question": "Show the columns of a specific table.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the columns and data types of the specified table."}, {"question": "List all columns in the database.", "query": "SELECT table_name, column_name, data_type FROM information_schema.columns WHERE table_schema = 'public';", "answer": "Returns all columns in the public schema."}, {"question": "Show the primary key of a table.", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = 'PRIMARY';", "answer": "Returns the primary key column of the specified table."}, {"question": "List all primary keys in the database.", "query": "SELECT table_name, column_name FROM information_schema.key_column_usage WHERE table_schema = 'public' AND constraint_name = 'PRIMARY';", "answer": "Returns all primary keys in the public schema."}, {"question": "Show the foreign keys of a table.", "query": "SELECT kcu.column_name, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys of the specified table."}, {"question": "List all foreign keys in the database.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_schema = 'public';", "answer": "Returns all foreign keys in the public schema."}, {"question": "List all foreign keys in the database.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query retrieves all foreign key relationships across tables in the database."}, {"question": "How can I identify relationships between tables in my database?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "It identifies relationships by listing foreign keys and the tables and columns they reference."}, {"question": "What query can I use to find foreign key constraints in my database?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query provides details of foreign key constraints, including the referencing and referenced tables and columns."}, {"question": "How do I get a list of foreign keys in SQL?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "It generates a list of foreign key relationships across all tables in the database."}, {"question": "Which tables in my database are linked through foreign keys?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query shows the relationships between tables, including the linking columns and referenced tables."}, {"question": "{table_name} tablosundaki toplam kay\u0131t say\u0131s\u0131 nedir?", "query": "SELECT COUNT(*) AS total_records FROM {table_name};", "answer": "{table_name} tablosundaki toplam sat\u0131r say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki t\u00fcm verileri g\u00f6ster.", "query": "SELECT * FROM {table_name};", "answer": "{table_name} tablosundaki t\u00fcm sat\u0131r ve s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki {column_name} s\u00fctunundaki benzersiz de\u011ferler nelerdir?", "query": "SELECT DISTINCT {column_name} FROM {table_name};", "answer": "{table_name} tablosundaki {column_name} s\u00fctununda bulunan t\u00fcm benzersiz de\u011ferleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "{column_name} = '{value}' olan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM {table_name} WHERE {column_name} = '{value}';", "answer": "{column_name} de\u011feri {value} olan t\u00fcm sat\u0131rlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki {column_name} s\u00fctununun ortalama, maksimum veya minimum de\u011feri nedir?", "query": "SELECT AVG({column_name}) AS average_value, MAX({column_name}) AS maximum_value, MIN({column_name}) AS minimum_value FROM {table_name};", "answer": "{table_name} tablosundaki {column_name} s\u00fctununun ortalama, maksimum ve minimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "{column_name} > {value} olan ka\u00e7 kay\u0131t var?", "query": "SELECT COUNT(*) AS count_records FROM {table_name} WHERE {column_name} > {value};", "answer": "{column_name} de\u011feri {value}'den b\u00fcy\u00fck olan sat\u0131rlar\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosunda [grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] toplam\u0131 nedir?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] toplam\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosunda her [grouping_column] i\u00e7in ka\u00e7 kay\u0131t var?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] i\u00e7indeki her benzersiz de\u011fer i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek toplam [column_name] de\u011ferine sahip ilk 5 [grouping_column] nedir?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "En y\u00fcksek toplam [column_name] de\u011ferine sahip ilk 5 [grouping_column]'u d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f y\u00fczde da\u011f\u0131l\u0131m\u0131 nedir?", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] i\u00e7indeki her benzersiz de\u011fer i\u00e7in [column_name] de\u011ferinin y\u00fczde da\u011f\u0131l\u0131m\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki en y\u00fcksek/en d\u00fc\u015f\u00fck 10 [column_name] de\u011ferini g\u00f6ster.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; En d\u00fc\u015f\u00fck de\u011ferler i\u00e7in DESC yerine ASC kullan\u0131n", "answer": "[column_name] i\u00e7indeki en y\u00fcksek de\u011ferlere sahip ilk 10 kayd\u0131 d\u00f6nd\u00fcr\u00fcr. En d\u00fc\u015f\u00fck de\u011ferler i\u00e7in ASC kullan\u0131n."}, {"question": "[column_name] 'value' i\u00e7eren t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "[column_name] 'value' alt dizesini i\u00e7eren t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011feri [value1] ile [value2] aras\u0131nda olan kay\u0131tlar\u0131 listeleyin.", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "[column_name] de\u011feri [value1] ile [value2] aras\u0131nda olan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunu [column_name] s\u00fctununa g\u00f6re azalan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 [column_name] s\u00fctununa g\u00f6re azalan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirir."}, {"question": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] nedir?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan [table2].[column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosunun detaylar\u0131n\u0131 ve [table2] tablosundan e\u015fle\u015fen sat\u0131rlar\u0131 al\u0131n.", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, [common_column] s\u00fctununa g\u00f6re e\u015fle\u015fen kay\u0131tlar i\u00e7in d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131n\u0131 birle\u015ftirip [table1.date] '2023-01-01' tarihinden b\u00fcy\u00fck olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, birle\u015ftirme ko\u015fulu sa\u011fland\u0131\u011f\u0131nda ve [table1].[date] '2023-01-01' tarihinden b\u00fcy\u00fck oldu\u011funda d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131ndan toplam [column_name] de\u011ferini al\u0131n, [table3.column_name] ile grupland\u0131r\u0131n ve [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "[table1] tablosundan toplam [column_name] de\u011ferini, [table3.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreler."}, {"question": "[table1] tablosundaki t\u00fcm kay\u0131tlar\u0131, [table2] ve [table3] tablolar\u0131ndaki e\u015fle\u015fen kay\u0131tlarla birlikte bulun, [table1.column_name] > [value], [table2.column_name] = 'active' ve sonu\u00e7lar\u0131 [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, belirtilen filtre ko\u015fullar\u0131na g\u00f6re ve [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan toplam [column_name] de\u011ferini hesaplay\u0131n, [table2.column_name] ile grupland\u0131r\u0131n, [table2.status] = 'approved' ve [table1.date] '2023-01-01' ile '2023-12-31' aras\u0131nda olan kay\u0131tlar\u0131 filtreleyin ve her grup i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 ekleyin.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan toplam [column_name] ve kay\u0131t say\u0131s\u0131n\u0131, [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.status] = 'approved' ve [table1.date] '2023' tarih aral\u0131\u011f\u0131nda olan kay\u0131tlar\u0131 filtreler."}, {"question": "Son 7 g\u00fcn i\u00e7inde eklenen/g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "[table_name] tablosundaki son 7 g\u00fcn i\u00e7inde eklenen veya g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr, [updated_at] s\u00fctununun var oldu\u011funu varsayar."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin ayl\u0131k/y\u0131ll\u0131k toplam\u0131 nedir?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin her ay i\u00e7in toplam\u0131n\u0131, [date_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [time_column] ile grupland\u0131r\u0131lm\u0131\u015f e\u011filimlerini g\u00f6ster.", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "[column_name] de\u011ferinin zaman i\u00e7indeki e\u011filimlerini, [time_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr (\u00f6rne\u011fin, g\u00fcn, ay, y\u0131l)."}, {"question": "[table_name] tablosundaki en erken/en ge\u00e7 [column_name] de\u011feri nedir?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "[table_name] tablosundaki en erken [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131 nedir?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131 (histogram benzeri veri) g\u00f6ster.", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131, her de\u011ferin ne s\u0131kl\u0131kta g\u00f6r\u00fcnd\u00fc\u011f\u00fcn\u00fc g\u00f6sterir."}, {"question": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011feri nedir?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki korelasyon nedir?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki Pearson korelasyon katsay\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name2] > [value] olan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "[column_name2] de\u011feri belirli bir de\u011feri a\u015fan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda [category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini g\u00f6ster.", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "[category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131 nedir?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131 hesaplay\u0131n, [category_column] ile grupland\u0131r\u0131n.", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131, [category_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 bulun.", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) hesaplay\u0131n.", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 bulun ve oran\u0131 [value] de\u011ferinden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreleyin.", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 d\u00f6nd\u00fcr\u00fcr ve oran\u0131 belirli bir de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreler."}, {"question": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki her kay\u0131t i\u00e7in [column_name] de\u011ferinin y\u00fczde s\u0131ralamas\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "[table_name] tablosundaki her kay\u0131t i\u00e7in [column_name] de\u011ferinin y\u00fczde s\u0131ralamas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna [column1: value1, column2: value2] de\u011ferleriyle yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "[table_name] tablosuna [column1] ve [column2] i\u00e7in belirtilen de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] de\u011ferini [new_value] olarak g\u00fcncelleyin, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [new_value] olarak g\u00fcnceller."}, {"question": "[table_name] tablosundan [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan siler."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve [column1, column2, ...] s\u00fctunlar\u0131n\u0131 ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturur ve belirtilen s\u00fctunlar\u0131 ve veri t\u00fcrlerini ekler."}, {"question": "[table_name] tablosuna birden fazla kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "[table_name] tablosuna belirtilen de\u011ferlerle birden fazla kay\u0131t ekler."}, {"question": "[table_name] tablosunda [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu ([column1] ve [column2]) yeni de\u011ferlerle g\u00fcnceller."}, {"question": "Birincil anahtar, unique ve not null gibi k\u0131s\u0131tlamalarla bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez k\u0131s\u0131tlamalarla yeni bir tablo olu\u015fturur."}, {"question": "Bir s\u00fctun i\u00e7in varsay\u0131lan de\u011ferle bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] s\u00fctunu i\u00e7in varsay\u0131lan de\u011feri kullan\u0131r."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in, bir s\u00fctunu NULL olarak g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] s\u00fctununu NULL olarak g\u00fcnceller."}, {"question": "Ba\u015fka bir tabloya referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun s\u00fctununa referans veren bir yabanc\u0131 anahtar ile yeni bir tablo olu\u015fturur."}, {"question": "Bir tablodan ba\u015fka bir tabloya veri ekleyin.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "[table_name1] tablosundan [table_name2] tablosuna belirli bir ko\u015fula g\u00f6re veri ekler."}, {"question": "Bir s\u00fctunun de\u011ferini art\u0131r\u0131n/azalt\u0131n, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] kadar art\u0131r\u0131r."}, {"question": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 siler ancak tabloyu d\u00fc\u015f\u00fcrmez."}, {"question": "Veritaban\u0131ndan bir tabloyu tamamen d\u00fc\u015f\u00fcr\u00fcn.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, \u015femas\u0131 ve verileriyle birlikte d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndan bir tabloyu tamamen silin.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, \u015femas\u0131 ve verileriyle birlikte siler."}, {"question": "Mevcut bir tabloya yeni bir s\u00fctun ekleyin.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Mevcut bir tabloya yeni bir s\u00fctun ekler."}, {"question": "Mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirmek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Tablodaki mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirir."}, {"question": "[table_name] tablosundan [column_name] s\u00fctununu d\u00fc\u015f\u00fcr\u00fcn.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Mevcut bir tablodan bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Bile\u015fik anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "[column1] ve [column2]'den olu\u015fan bile\u015fik anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Ba\u015fka bir tablodan de\u011ferler almak i\u00e7in bir alt sorgu kullanarak veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Belirli bir ko\u015fula g\u00f6re ba\u015fka bir tablodan ([other_table]) de\u011ferler se\u00e7erek [table_name] tablosuna veri ekler."}, {"question": "Bir tabloyu k\u0131salt\u0131n (t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131y\u0131 korur).", "query": "TRUNCATE TABLE [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131s\u0131n\u0131 ve \u015femas\u0131n\u0131 korur."}, {"question": "T\u00fcm s\u00fctunlar i\u00e7in varsay\u0131lan de\u011ferlerle [table_name] tablosuna yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Tablodaki s\u00fctunlar i\u00e7in tan\u0131mlanan varsay\u0131lan de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[table_name] tablosunda [column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm sat\u0131rlar\u0131 g\u00fcncelleyin ve [column_name] de\u011ferini [new_value] olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini [new_value] olarak ayarlar."}, {"question": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan belirli bir kay\u0131t i\u00e7in [column_name] s\u00fctununu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan kay\u0131t i\u00e7in [column_name] de\u011ferini g\u00fcnceller."}, {"question": "[table_name] tablosunda [column_name] NULL olan t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "[column_name] NULL olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir s\u00fctunla [new_table_name] tablosunu olu\u015fturun (yabanc\u0131 anahtar).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturur."}, {"question": "[table_name] tablosunu g\u00fcncelleyin ve [column_name] de\u011ferini [value] olarak ayarlay\u0131n, [column_name] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan sat\u0131rlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] olarak g\u00fcnceller."}, {"question": "[table_name] tablosunda [column_name] de\u011feri [value] de\u011ferinden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 siler."}, {"question": "Benzersiz k\u0131s\u0131tlamaya sahip bir s\u00fctunla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "[column1] s\u00fctununda benzersiz k\u0131s\u0131tlamaya sahip yeni bir tablo olu\u015fturur."}, {"question": "Mevcut bir s\u00fctuna NOT NULL k\u0131s\u0131tlamas\u0131 eklemek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Tabloyu de\u011fi\u015ftirerek [column_name] s\u00fctununun NULL olamayaca\u011f\u0131n\u0131 garanti eder."}, {"question": "[table_name] tablosuna veri ekleyin, [column_name] de\u011ferini iki s\u00fctunun de\u011ferlerini birle\u015ftirerek hesaplay\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Yeni bir kay\u0131t ekler ve [column3] de\u011ferini [value1] ve [value2]'nin birle\u015fimi olarak hesaplar."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini o s\u00fctunun ortalama de\u011feri olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini ortalama de\u011feri olarak ayarlar."}, {"question": "Yeni bir tablo [new_table_name] olu\u015fturun ve bir zaman damgas\u0131 s\u00fctunu ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Yeni bir tablo olu\u015fturur ve yeni bir kay\u0131t eklendi\u011finde [created_at] s\u00fctununa otomatik olarak ge\u00e7erli zaman damgas\u0131n\u0131 ekler."}, {"question": "Ba\u015fka bir tablodan belirli bir ko\u015fula g\u00f6re veri ekleyin (alt sorgu kullanarak).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "[other_table] tablosundan [column3] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan verileri [table_name] tablosuna ekler."}, {"question": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosuna bir kay\u0131t ekleyin ve s\u00fctun de\u011ferlerinden biri i\u00e7in bir alt sorgu kullan\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] de\u011ferini [other_table] tablosundan bir alt sorgu ile al\u0131r."}, {"question": "Ba\u015fka bir tablodaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Ba\u015fka bir tablodaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Bir ko\u015fula dayal\u0131 olarak bir s\u00fctun de\u011ferini ayarlayarak [table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyin ve bir CASE ifadesi ekleyin.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcnceller, [column_name] de\u011ferini 'High' veya 'Low' olarak ayarlar."}, {"question": "Bir tabloyu de\u011fi\u015ftirerek birden fazla s\u00fctuna benzersiz k\u0131s\u0131tlama ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "[table_name] tablosuna [column1] ve [column2] s\u00fctunlar\u0131na benzersiz k\u0131s\u0131tlama ekler."}, {"question": "[table_name] tablosundan verileri \u00f6zetlemek i\u00e7in bir g\u00f6r\u00fcn\u00fcm olu\u015fturun.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "[column2] s\u00fctununu [column1]'e g\u00f6re grupland\u0131rarak sayan bir g\u00f6r\u00fcn\u00fcm olu\u015fturur."}, {"question": "Bir sat\u0131r g\u00fcncellendi\u011finde bir s\u00fctunu otomatik olarak ge\u00e7erli zamana g\u00fcncelleyen bir tetikleyici olu\u015fturun.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "[table_name] tablosundaki bir kay\u0131t g\u00fcncellendi\u011finde [timestamp_column] s\u00fctununu g\u00fcncelleyen bir tetikleyici olu\u015fturur."}, {"question": "[table_name] tablosunu k\u0131salt\u0131n ve kimlik s\u00fctununu s\u0131f\u0131rlay\u0131n.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ve kimlik s\u00fctununu ba\u015flang\u0131\u00e7 de\u011ferine s\u0131f\u0131rlar."}, {"question": "Belirli bir tarihten daha eski kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "[date_column] belirli bir tarihten daha eski olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablodan veri alarak [table_name] tablosuna bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Ba\u015fka bir tablodan se\u00e7me sorgusuna dayal\u0131 olarak [table_name] tablosuna veri ekler."}, {"question": "Bir s\u00fctuna belirli bir aral\u0131kta de\u011ferlerin olmas\u0131n\u0131 sa\u011flamak i\u00e7in CHECK k\u0131s\u0131tlamas\u0131 ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "[column_name] s\u00fctunundaki de\u011ferlerin 0 ile 100 aras\u0131nda olmas\u0131n\u0131 sa\u011flamak i\u00e7in bir k\u0131s\u0131tlama ekler."}, {"question": "[column_name] s\u00fctununda yinelenen kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen kay\u0131tlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosunda tan\u0131ml\u0131 tetikleyiciler nelerdir?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Belirtilen tabloda tan\u0131ml\u0131 tetikleyicileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 listeleyin.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun mevcut \u015femas\u0131 nedir?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun \u015femas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini g\u00f6sterin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda indekslere sahip s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslere sahip s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki indekslerin boyutu nedir?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Belirtilen tablodaki indekslerin boyutunu d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosunda ka\u00e7 indeks var?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda kullan\u0131lan indeks t\u00fcrleri nelerdir?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indeks t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuyla ili\u015fkili indekslerin adlar\u0131 nelerdir?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda bile\u015fik indeksler var m\u0131? Varsa, hangi s\u00fctunlar dahil?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Belirtilen tablodaki bile\u015fik indeksleri ve her birine dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosu i\u00e7in indeks olu\u015fturma betiklerini g\u00f6sterin.", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Belirtilen tablo i\u00e7in indeks olu\u015fturma betiklerini d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosu ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar nelerdir?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablo ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda ka\u00e7 yabanc\u0131 anahtar k\u0131s\u0131tlamas\u0131 var?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kural\u0131 nedir?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kurallar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki t\u00fcm k\u0131s\u0131tlamalar\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki t\u00fcm k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda yabanc\u0131 anahtar ihlalleri var m\u0131? Varsa, listeleyin.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar ihlallerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki benzersiz k\u0131s\u0131tlamalar\u0131 g\u00f6sterin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Belirtilen tablodaki benzersiz k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Belirtilen tablodaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna ba\u011f\u0131ml\u0131 g\u00f6r\u00fcn\u00fcmler nelerdir?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya ba\u011f\u0131ml\u0131 olan g\u00f6r\u00fcn\u00fcmleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki s\u00fctunlar\u0131n veri t\u00fcrlerini g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki s\u00fctunlar\u0131n veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[users/customers] taraf\u0131ndan en yayg\u0131n [product/behavior] kombinasyonu nedir?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Kullan\u0131c\u0131lar veya m\u00fc\u015fteriler taraf\u0131ndan en yayg\u0131n \u00fcr\u00fcn veya davran\u0131\u015f kombinasyonunu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde geri bildirimde bulunan t\u00fcm [users/customers] bulun.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde geri bildirimde bulunan t\u00fcm kullan\u0131c\u0131lar\u0131 veya m\u00fc\u015fterileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Stokta az olan [products/records] bulun.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Stokta az olan \u00fcr\u00fcnleri veya kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm [products] listeleyin.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Son belirtilen s\u00fcre i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek [return/complaint] oran\u0131na sahip [products] bulun.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "En y\u00fcksek iade veya \u015fikayet oran\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde en \u00e7ok satan [products] nelerdir?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Son belirtilen s\u00fcre i\u00e7inde en \u00e7ok satan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En uzun s\u00fcredir sat\u0131\u015fta olan [products] bulun.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "En uzun s\u00fcredir sat\u0131\u015fta olan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] s\u00fcresinden daha uzun s\u00fcredir stokta olmayan [products] belirleyin.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcreden daha uzun s\u00fcredir stokta olmayan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7in toplam [revenue/cost] nedir?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcre i\u00e7in toplam geliri veya maliyeti d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [expenses] bulun ve kategorilere ay\u0131r\u0131n.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Belirli bir s\u00fcre i\u00e7in giderleri d\u00f6nd\u00fcr\u00fcr ve t\u00fcrlerine g\u00f6re kategorilere ay\u0131r\u0131r."}, {"question": "En y\u00fcksek gelir getiren [items/products] nelerdir?", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "En y\u00fcksek gelir getiren N \u00fcr\u00fcn\u00fc veya \u00f6\u011feyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "Toplam [pending/unpaid] [invoices/orders] miktar\u0131 nedir?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Toplam bekleyen veya \u00f6denmemi\u015f faturalar\u0131 veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde verilen toplam [discount/bonus] miktar\u0131 nedir?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde verilen toplam indirim veya bonus miktar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [revenue/cost] ve [expenses/other_metric] kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirli bir s\u00fcre i\u00e7in gelir veya maliyeti giderler veya ba\u015fka bir metrik ile kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri/reklam metinlerini belirleyin.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Belirli bir PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri ve reklam metinlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u015e\u00fcpheli fatura adresi/\u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri/i\u015flemleri listeleyin.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "\u015e\u00fcpheli fatura adresi veya \u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri veya i\u015flemleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri/kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Belirtilen s\u00fcre i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri veya kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00fcvenlik/kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri/hizmetleri belirleyin.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "G\u00fcvenlik veya kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Doland\u0131r\u0131c\u0131l\u0131k tespit kural\u0131na g\u00f6re i\u015faretlenen i\u015flemler/sipari\u015fler nelerdir?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Doland\u0131r\u0131c\u0131l\u0131k tespit kurallar\u0131na g\u00f6re i\u015faretlenen i\u015flemleri veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Zorunlu e\u011fitim/sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 bulun.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Zorunlu e\u011fitim veya sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[field_name] gibi kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "M\u00fc\u015fteri/\u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri belirleyin.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki eksik kay\u0131tlar\u0131n y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Belirtilen tablodaki eksik kay\u0131tlar\u0131n y\u00fczdesini d\u00f6nd\u00fcr\u00fcr."}, {"question": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan t\u00fcm \u00fcr\u00fcnleri/hizmetleri listeleyin.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan t\u00fcm \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Farkl\u0131 alanlar/s\u00fctunlar aras\u0131nda tutars\u0131z veri olup olmad\u0131\u011f\u0131n\u0131 kontrol edin (\u00f6rne\u011fin, tarih formatlar\u0131).", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veriye sahip kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Do\u011frulama/kontrol\u00fc ge\u00e7emeyen kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Do\u011frulama veya kontrol\u00fc ge\u00e7emeyen kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "Ayl\u0131k bazda metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131 (\u00f6rne\u011fin, sat\u0131\u015flar, giderler) nas\u0131ld\u0131r?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Ayl\u0131k bazda sat\u0131\u015flar ve giderler gibi metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u00c7al\u0131\u015fan performans\u0131n\u0131 metric1 ve metric2'ye g\u00f6re kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "\u00c7al\u0131\u015fan performans\u0131n\u0131 metric1 ve metric2'ye g\u00f6re kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u00dcr\u00fcn1 ve \u00fcr\u00fcn2'yi sat\u0131\u015flar/iade a\u00e7\u0131s\u0131ndan kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "\u00dcr\u00fcn1 ve \u00fcr\u00fcn2'yi sat\u0131\u015flar ve iadeler a\u00e7\u0131s\u0131ndan kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131n\u0131 metric i\u00e7in bulun.", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Belirtilen metric i\u00e7in iki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[product_name] i\u00e7in ortalama puan nedir?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in ortalama puan\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "X y\u0131ld\u0131z\u0131n alt\u0131nda puana sahip t\u00fcm \u00fcr\u00fcnleri listeleyin.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Belirtilen y\u0131ld\u0131z say\u0131s\u0131n\u0131n alt\u0131nda puana sahip t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[product_name] i\u00e7in t\u00fcm yorumlar\u0131 bulun.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "M\u00fc\u015fteri geri bildirimleri ile iade/\u015fikayetler aras\u0131ndaki ili\u015fki nedir?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fkiyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri belirleyin.", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7inde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Belirtilen zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sipari\u015fin verilmesinden itibaren [X] g\u00fcn i\u00e7inde g\u00f6nderilen t\u00fcm sipari\u015fleri bulun.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Sipari\u015fin verilmesinden itibaren belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti/i\u015flem s\u00fcresi nedir?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresini d\u00f6nd\u00fcr\u00fcr."}, {"question": "H\u0131zl\u0131/overnight g\u00f6nderim gerektiren t\u00fcm sipari\u015fleri listeleyin.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri bulun.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "G\u00f6nderimden sonra iptal edilen t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [X] g\u00fcn i\u00e7inde giri\u015f yapan t\u00fcm kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Son belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde giri\u015f yapan t\u00fcm kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde [kullan\u0131c\u0131/m\u00fc\u015fteri] kay\u0131p oran\u0131 nedir?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Son belirtilen zaman diliminde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7inde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Belirtilen zaman diliminde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek ya\u015fam boyu de\u011fere (LTV) sahip kullan\u0131c\u0131lar\u0131 belirleyin.", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "En y\u00fcksek ya\u015fam boyu de\u011fere sahip kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst [N] kullan\u0131c\u0131y\u0131 bulun.", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst N kullan\u0131c\u0131y\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirir."}, {"question": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] nedir?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan [table2].[column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosunun detaylar\u0131n\u0131 ve [table2] tablosundan e\u015fle\u015fen sat\u0131rlar\u0131 al\u0131n.", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, [common_column] s\u00fctununa g\u00f6re e\u015fle\u015fen kay\u0131tlar i\u00e7in d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131n\u0131 birle\u015ftirip [table1.date] '2023-01-01' tarihinden b\u00fcy\u00fck olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, birle\u015ftirme ko\u015fulu sa\u011fland\u0131\u011f\u0131nda ve [table1].[date] '2023-01-01' tarihinden b\u00fcy\u00fck oldu\u011funda d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131ndan toplam [column_name] de\u011ferini al\u0131n, [table3.column_name] ile grupland\u0131r\u0131n ve [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "[table1] tablosundan toplam [column_name] de\u011ferini, [table3.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreler."}, {"question": "[table1] tablosundaki t\u00fcm kay\u0131tlar\u0131, [table2] ve [table3] tablolar\u0131ndaki e\u015fle\u015fen kay\u0131tlarla birlikte bulun, [table1.column_name] > [value], [table2.column_name] = 'active' ve sonu\u00e7lar\u0131 [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, belirtilen filtre ko\u015fullar\u0131na g\u00f6re ve [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan toplam [column_name] de\u011ferini hesaplay\u0131n, [table2.column_name] ile grupland\u0131r\u0131n, [table2.status] = 'approved' ve [table1.date] '2023-01-01' ile '2023-12-31' aras\u0131nda olan kay\u0131tlar\u0131 filtreleyin ve her grup i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 ekleyin.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan toplam [column_name] ve kay\u0131t say\u0131s\u0131n\u0131, [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.status] = 'approved' ve [table1.date] '2023' tarih aral\u0131\u011f\u0131nda olan kay\u0131tlar\u0131 filtreler."}, {"question": "Son 7 g\u00fcn i\u00e7inde eklenen/g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "[table_name] tablosundaki son 7 g\u00fcn i\u00e7inde eklenen veya g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr, [updated_at] s\u00fctununun var oldu\u011funu varsayar."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin ayl\u0131k/y\u0131ll\u0131k toplam\u0131 nedir?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin her ay i\u00e7in toplam\u0131n\u0131, [date_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [time_column] ile grupland\u0131r\u0131lm\u0131\u015f e\u011filimlerini g\u00f6ster.", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "[column_name] de\u011ferinin zaman i\u00e7indeki e\u011filimlerini, [time_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr (\u00f6rne\u011fin, g\u00fcn, ay, y\u0131l)."}, {"question": "[table_name] tablosundaki en erken/en ge\u00e7 [column_name] de\u011feri nedir?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "[table_name] tablosundaki en erken [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131 nedir?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131 (histogram benzeri veri) g\u00f6ster.", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131, her de\u011ferin ne s\u0131kl\u0131kta g\u00f6r\u00fcnd\u00fc\u011f\u00fcn\u00fc g\u00f6sterir."}, {"question": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011feri nedir?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki korelasyon nedir?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki Pearson korelasyon katsay\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name2] > [value] olan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "[column_name2] de\u011feri belirli bir de\u011feri a\u015fan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda [category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini g\u00f6ster.", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "[category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131 nedir?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131 hesaplay\u0131n, [category_column] ile grupland\u0131r\u0131n.", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131, [category_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 bulun.", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) hesaplay\u0131n.", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 bulun ve oran\u0131 [value] de\u011ferinden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreleyin.", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 d\u00f6nd\u00fcr\u00fcr ve oran\u0131 belirli bir de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreler."}, {"question": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] s\u00fctununun y\u00fczde s\u0131ralamas\u0131n\u0131 [table_name] tablosunda her sat\u0131r i\u00e7in hesaplay\u0131n.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "[table_name] tablosundaki her sat\u0131r i\u00e7in [column_name] s\u00fctununun y\u00fczde s\u0131ralamas\u0131n\u0131 hesaplar."}, {"question": "[table_name] tablosuna [column1] ve [column2] de\u011ferleriyle yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "[table_name] tablosuna [column1] ve [column2] i\u00e7in belirtilen de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] de\u011ferini [new_value] olarak g\u00fcncelleyin, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [new_value] olarak g\u00fcnceller."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan siler."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve [column1, column2, ...] s\u00fctunlar\u0131n\u0131 ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturur ve belirtilen s\u00fctunlar\u0131 ve veri t\u00fcrlerini ekler."}, {"question": "[table_name] tablosuna birden fazla kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "[table_name] tablosuna belirtilen de\u011ferlerle birden fazla kay\u0131t ekler."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [table_name] tablosunda birden fazla s\u00fctunu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu ([column1] ve [column2]) yeni de\u011ferlerle g\u00fcnceller."}, {"question": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez gibi k\u0131s\u0131tlamalarla bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez k\u0131s\u0131tlamalarla yeni bir tablo olu\u015fturur."}, {"question": "Bir s\u00fctun i\u00e7in varsay\u0131lan de\u011ferle bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] s\u00fctunu i\u00e7in varsay\u0131lan de\u011feri kullan\u0131r."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in bir s\u00fctunu NULL olarak g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] s\u00fctununu NULL olarak g\u00fcnceller."}, {"question": "Ba\u015fka bir tabloya referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun s\u00fctununa referans veren bir yabanc\u0131 anahtar ile yeni bir tablo olu\u015fturur."}, {"question": "Bir tablodan ba\u015fka bir tabloya veri ekleyin.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "[table_name1] tablosundan [table_name2] tablosuna belirli bir ko\u015fula g\u00f6re veri ekler."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in bir s\u00fctunun de\u011ferini art\u0131r\u0131n/azalt\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] kadar art\u0131r\u0131r."}, {"question": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 siler ancak tabloyu d\u00fc\u015f\u00fcrmez."}, {"question": "Veritaban\u0131ndan bir tabloyu d\u00fc\u015f\u00fcr\u00fcn.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, yap\u0131s\u0131 ve verileriyle birlikte d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Mevcut bir tabloya yeni bir s\u00fctun ekleyin.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Mevcut bir tabloya yeni bir s\u00fctun ekler."}, {"question": "Mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirmek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Tablodaki mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirir."}, {"question": "Bir tabloyu de\u011fi\u015ftirerek bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcn.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Mevcut bir tablodan bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Bile\u015fik birincil anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "[column1] ve [column2]'den olu\u015fan bile\u015fik birincil anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Ba\u015fka bir tablodan de\u011ferler almak i\u00e7in bir alt sorgu kullanarak veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Belirli bir ko\u015fula g\u00f6re ba\u015fka bir tablodan ([other_table]) de\u011ferler se\u00e7erek [table_name] tablosuna veri ekler."}, {"question": "Bir tabloyu k\u0131salt\u0131n (t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131y\u0131 korur).", "query": "TRUNCATE TABLE [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131s\u0131n\u0131 ve \u015femas\u0131n\u0131 korur."}, {"question": "T\u00fcm s\u00fctunlar i\u00e7in varsay\u0131lan de\u011ferlerle [table_name] tablosuna yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Tablodaki s\u00fctunlar i\u00e7in tan\u0131mlanan varsay\u0131lan de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm sat\u0131rlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini [new_value] olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini [new_value] olarak ayarlar."}, {"question": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan belirli bir kay\u0131t i\u00e7in [column_name] s\u00fctununu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan kay\u0131t i\u00e7in [column_name] de\u011ferini g\u00fcnceller."}, {"question": "[column_name] NULL olan t\u00fcm kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "[column_name] NULL olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir s\u00fctunla [new_table_name] tablosunu olu\u015fturun (yabanc\u0131 anahtar).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturur."}, {"question": "[column_name] de\u011ferini [value] olarak g\u00fcncelleyin, [column_name] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan sat\u0131rlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] olarak g\u00fcnceller."}, {"question": "[column_name] de\u011feri [value] de\u011ferinden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 siler."}, {"question": "Benzersiz k\u0131s\u0131tlamaya sahip bir s\u00fctunla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "[column1] s\u00fctununda benzersiz k\u0131s\u0131tlamaya sahip yeni bir tablo olu\u015fturur."}, {"question": "Mevcut bir s\u00fctuna NOT NULL k\u0131s\u0131tlamas\u0131 eklemek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Tabloyu de\u011fi\u015ftirerek [column_name] s\u00fctununun NULL olamayaca\u011f\u0131n\u0131 garanti eder."}, {"question": "[column1] ve [column2] de\u011ferlerini birle\u015ftirerek hesaplanan bir s\u00fctun de\u011feriyle [table_name] tablosuna veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Yeni bir kay\u0131t ekler ve [column3] de\u011ferini [value1] ve [value2]'nin birle\u015fimi olarak hesaplar."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini o s\u00fctunun ortalama de\u011feri olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini ortalama de\u011feri olarak ayarlar."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve bir zaman damgas\u0131 s\u00fctunu ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Yeni bir tablo olu\u015fturur ve yeni bir kay\u0131t eklendi\u011finde [created_at] s\u00fctununa otomatik olarak ge\u00e7erli zaman damgas\u0131n\u0131 ekler."}, {"question": "Ba\u015fka bir tablodan belirli bir ko\u015fula g\u00f6re veri ekleyin (alt sorgu kullanarak).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "[other_table] tablosundan [column3] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan verileri [table_name] tablosuna ekler."}, {"question": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosuna bir kay\u0131t ekleyin ve s\u00fctun de\u011ferlerinden biri i\u00e7in bir alt sorgu kullan\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] de\u011ferini [other_table] tablosundan bir alt sorgu ile al\u0131r."}, {"question": "[referenced_table] tablosundaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "[referenced_table] tablosundaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Bir ko\u015fula dayal\u0131 olarak bir s\u00fctun de\u011ferini ayarlayarak [table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyin ve bir CASE ifadesi ekleyin.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcnceller, [column_name] de\u011ferini 'High' veya 'Low' olarak ayarlar."}, {"question": "[table_name] tablosuna birden fazla s\u00fctuna benzersiz k\u0131s\u0131tlama ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "[table_name] tablosuna [column1] ve [column2] s\u00fctunlar\u0131na benzersiz k\u0131s\u0131tlama ekler."}, {"question": "[table_name] tablosundan verileri \u00f6zetlemek i\u00e7in bir g\u00f6r\u00fcn\u00fcm olu\u015fturun.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "[column2] s\u00fctununu [column1]'e g\u00f6re grupland\u0131rarak sayan bir g\u00f6r\u00fcn\u00fcm olu\u015fturur."}, {"question": "Bir sat\u0131r g\u00fcncellendi\u011finde bir s\u00fctunu otomatik olarak ge\u00e7erli zamana g\u00fcncelleyen bir tetikleyici olu\u015fturun.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "[table_name] tablosundaki bir kay\u0131t g\u00fcncellendi\u011finde [timestamp_column] s\u00fctununu g\u00fcncelleyen bir tetikleyici olu\u015fturur."}, {"question": "[table_name] tablosunu k\u0131salt\u0131n ve kimlik s\u00fctununu s\u0131f\u0131rlay\u0131n.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ve kimlik s\u00fctununu ba\u015flang\u0131\u00e7 de\u011ferine s\u0131f\u0131rlar."}, {"question": "Belirli bir tarihten daha eski kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "[date_column] belirli bir tarihten daha eski olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablodan veri alarak [table_name] tablosuna bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Ba\u015fka bir tablodan se\u00e7me sorgusuna dayal\u0131 olarak [table_name] tablosuna veri ekler."}, {"question": "Bir s\u00fctuna belirli bir aral\u0131kta de\u011ferlerin olmas\u0131n\u0131 sa\u011flamak i\u00e7in CHECK k\u0131s\u0131tlamas\u0131 ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "[column_name] s\u00fctunundaki de\u011ferlerin 0 ile 100 aras\u0131nda olmas\u0131n\u0131 sa\u011flamak i\u00e7in bir k\u0131s\u0131tlama ekler."}, {"question": "[column_name] s\u00fctununda yinelenen kay\u0131tlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen kay\u0131tlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosunda tan\u0131ml\u0131 tetikleyiciler nelerdir?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Belirtilen tabloda tan\u0131ml\u0131 tetikleyicileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 listeleyin.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun mevcut \u015femas\u0131 nedir?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun \u015femas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini g\u00f6sterin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda indekslere sahip s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslere sahip s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki indekslerin boyutu nedir?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Belirtilen tablodaki indekslerin boyutunu d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosunda ka\u00e7 indeks var?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda kullan\u0131lan indeks t\u00fcrleri nelerdir?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indeks t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuyla ili\u015fkili indekslerin adlar\u0131 nelerdir?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda bile\u015fik indeksler var m\u0131? Varsa, hangi s\u00fctunlar dahil?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Belirtilen tablodaki bile\u015fik indeksleri ve her birine dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosu i\u00e7in indeks olu\u015fturma betiklerini g\u00f6sterin.", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Belirtilen tablo i\u00e7in indeks olu\u015fturma betiklerini d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosu ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar nelerdir?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablo ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda ka\u00e7 yabanc\u0131 anahtar k\u0131s\u0131tlamas\u0131 var?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kural\u0131 nedir?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kurallar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki t\u00fcm k\u0131s\u0131tlamalar\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki t\u00fcm k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda yabanc\u0131 anahtar ihlalleri var m\u0131? Varsa, listeleyin.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar ihlallerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki benzersiz k\u0131s\u0131tlamalar\u0131 g\u00f6sterin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Belirtilen tablodaki benzersiz k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Belirtilen tablodaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna ba\u011f\u0131ml\u0131 g\u00f6r\u00fcn\u00fcmler nelerdir?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya ba\u011f\u0131ml\u0131 olan g\u00f6r\u00fcn\u00fcmleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki s\u00fctunlar\u0131n veri t\u00fcrlerini g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki s\u00fctunlar\u0131n veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[users/customers] taraf\u0131ndan en yayg\u0131n [product/behavior] kombinasyonu nedir?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Kullan\u0131c\u0131lar veya m\u00fc\u015fteriler taraf\u0131ndan en yayg\u0131n \u00fcr\u00fcn veya davran\u0131\u015f kombinasyonunu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde geri bildirimde bulunan t\u00fcm [users/customers] bulun.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde geri bildirimde bulunan t\u00fcm kullan\u0131c\u0131lar\u0131 veya m\u00fc\u015fterileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Stokta az olan [products/records] bulun.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Stokta az olan \u00fcr\u00fcnleri veya kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm [products] listeleyin.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Son belirtilen s\u00fcre i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek [return/complaint] oran\u0131na sahip [products] bulun.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "En y\u00fcksek iade veya \u015fikayet oran\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde en \u00e7ok satan [products] nelerdir?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Son belirtilen s\u00fcre i\u00e7inde en \u00e7ok satan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En uzun s\u00fcredir sat\u0131\u015fta olan [products] bulun.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "En uzun s\u00fcredir sat\u0131\u015fta olan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] s\u00fcresinden daha uzun s\u00fcredir stokta olmayan [products] belirleyin.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcreden daha uzun s\u00fcredir stokta olmayan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7in toplam [revenue/cost] nedir?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcre i\u00e7in toplam geliri veya maliyeti d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [expenses] bulun ve kategorilere ay\u0131r\u0131n.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Belirli bir s\u00fcre i\u00e7in giderleri d\u00f6nd\u00fcr\u00fcr ve t\u00fcrlerine g\u00f6re kategorilere ay\u0131r\u0131r."}, {"question": "En y\u00fcksek gelir getiren [items/products] nelerdir?", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "En y\u00fcksek gelir getiren N \u00fcr\u00fcn\u00fc veya \u00f6\u011feyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "Toplam [pending/unpaid] [invoices/orders] miktar\u0131 nedir?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Toplam bekleyen veya \u00f6denmemi\u015f faturalar\u0131 veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde verilen toplam [discount/bonus] miktar\u0131 nedir?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde verilen toplam indirim veya bonus miktar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [revenue/cost] ve [expenses/other_metric] kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirli bir s\u00fcre i\u00e7in gelir veya maliyeti giderler veya ba\u015fka bir metrik ile kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri/reklam metinlerini belirleyin.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Belirli bir PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri ve reklam metinlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u015e\u00fcpheli fatura adresi/\u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri/i\u015flemleri listeleyin.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "\u015e\u00fcpheli fatura adresi veya \u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri veya i\u015flemleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri/kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Belirtilen s\u00fcre i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri veya kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00fcvenlik/kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri/hizmetleri belirleyin.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "G\u00fcvenlik veya kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Doland\u0131r\u0131c\u0131l\u0131k tespit kural\u0131na g\u00f6re i\u015faretlenen i\u015flemler/sipari\u015fler nelerdir?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Doland\u0131r\u0131c\u0131l\u0131k tespit kurallar\u0131na g\u00f6re i\u015faretlenen i\u015flemleri veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Zorunlu e\u011fitim/sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 bulun.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Zorunlu e\u011fitim veya sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 listeler."}, {"question": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri belirleyin.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri bulur."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131n y\u00fczde ka\u00e7\u0131 eksik?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Belirtilen tablodaki eksik kay\u0131tlar\u0131n y\u00fczdesini hesaplar."}, {"question": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan \u00fcr\u00fcn veya hizmetleri listeleyin.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan \u00fcr\u00fcn veya hizmetleri bulur."}, {"question": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veri olup olmad\u0131\u011f\u0131n\u0131 kontrol edin.", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veriye sahip kay\u0131tlar\u0131 belirler."}, {"question": "Do\u011frulama kontrollerini ge\u00e7emeyen kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Do\u011frulama kontrollerini ge\u00e7emeyen kay\u0131tlar\u0131 listeler."}, {"question": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "Ayl\u0131k bazda metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131 nas\u0131ld\u0131r (\u00f6rne\u011fin, sat\u0131\u015flar, giderler)?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Ayl\u0131k bazda sat\u0131\u015flar ve giderler gibi metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131n\u0131 sa\u011flar."}, {"question": "\u0130ki metrik baz\u0131nda \u00e7al\u0131\u015fan performans\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "\u0130ki belirli metrik baz\u0131nda \u00e7al\u0131\u015fan performans\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki \u00fcr\u00fcn i\u00e7in sat\u0131\u015f ve iadeleri kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "\u0130ki belirli \u00fcr\u00fcn i\u00e7in sat\u0131\u015f ve iadeleri kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131 nedir?", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "\u0130ki d\u00f6nem aras\u0131ndaki bir metrik i\u00e7in b\u00fcy\u00fcme oran\u0131n\u0131 hesaplar."}, {"question": "Bir \u00fcr\u00fcn i\u00e7in ortalama puan nedir?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in ortalama puan\u0131 bulur."}, {"question": "Belirli bir e\u015fik de\u011ferinin alt\u0131nda puana sahip \u00fcr\u00fcnleri listeleyin.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Belirli bir e\u015fik de\u011ferinin alt\u0131nda puana sahip \u00fcr\u00fcnleri belirler."}, {"question": "Belirli bir \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 bulun.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 listeler."}, {"question": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fki nedir?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fkiyi analiz eder."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnler hangileridir?", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri belirler."}, {"question": "Belirli bir zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Belirtilen zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesini hesaplar."}, {"question": "Sipari\u015fin verilmesinden itibaren belirli bir g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen sipari\u015fleri bulun.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Sipari\u015fin verilmesinden itibaren belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen sipari\u015fleri listeler."}, {"question": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresi nedir?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresini hesaplar."}, {"question": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren sipari\u015fleri listeleyin.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren sipari\u015fleri belirler."}, {"question": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri bulun.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri listeler."}, {"question": "Son [X] g\u00fcn i\u00e7inde giri\u015f yapan kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Son belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde giri\u015f yapan kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Son [time_period] i\u00e7inde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131 nedir?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Belirtilen zaman diliminde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131n\u0131 hesaplar."}, {"question": "[time_period] i\u00e7inde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Belirtilen zaman diliminde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "En y\u00fcksek ya\u015fam boyu de\u011fere (LTV) sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "En y\u00fcksek ya\u015fam boyu de\u011fere sahip kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst [N] kullan\u0131c\u0131y\u0131 kimlerdir?", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst N kullan\u0131c\u0131y\u0131 listeler."}, {"question": "Bir kullan\u0131c\u0131n\u0131n ilk ziyareti ile ilk sat\u0131n almas\u0131 aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', first_visit_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(visit_date) AS first_visit_date, MIN(purchase_date) AS first_purchase_date FROM visits JOIN purchases ON visits.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Bir kullan\u0131c\u0131n\u0131n ilk ziyareti ile ilk sat\u0131n almas\u0131 aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Son [X] g\u00fcn i\u00e7inde siteye giri\u015f yapmayan veya ziyaret etmeyen kullan\u0131c\u0131lar\u0131 listeleyin.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde siteye giri\u015f yapmayan veya ziyaret etmeyen kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131lar\u0131n ortalama oturum s\u00fcresi nedir?", "query": "SELECT AVG(session_duration) AS avg_session_duration FROM user_sessions WHERE session_date >= CURRENT_DATE - INTERVAL '[time_period]';", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131lar\u0131n ortalama oturum s\u00fcresini hesaplar."}, {"question": "Al\u0131\u015fveri\u015f sepetlerini terk eden kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, cart_id, abandoned_date FROM shopping_carts WHERE abandoned_date IS NOT NULL;", "answer": "Al\u0131\u015fveri\u015f sepetlerini terk eden kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama sipari\u015f say\u0131s\u0131 nedir?", "query": "SELECT AVG(order_count) AS avg_orders_per_user FROM (SELECT user_id, COUNT(*) AS order_count FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_orders;", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama sipari\u015f say\u0131s\u0131n\u0131 hesaplar."}, {"question": "Onboarding s\u00fcrecini tamamlamayan kullan\u0131c\u0131lar\u0131 listeleyin.", "query": "SELECT user_id, username FROM users WHERE onboarding_complete = false;", "answer": "Onboarding s\u00fcrecini tamamlamayan kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "En y\u00fcksek y\u00f6nlendirme oran\u0131na sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS referral_count FROM referrals GROUP BY user_id ORDER BY referral_count DESC LIMIT 1;", "answer": "En y\u00fcksek y\u00f6nlendirme oran\u0131na sahip kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Belirli bir eylemi veya g\u00f6revi tamamlamayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_actions WHERE action_completed = true AND action_type = '[specific_action]');", "answer": "Belirli bir eylemi veya g\u00f6revi tamamlamayan kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, AVG(rating) AS avg_rating FROM user_reviews GROUP BY user_id ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama destek bileti say\u0131s\u0131 nedir?", "query": "SELECT AVG(ticket_count) AS avg_tickets_per_user FROM (SELECT user_id, COUNT(*) AS ticket_count FROM support_tickets WHERE ticket_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_tickets;", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama destek bileti say\u0131s\u0131n\u0131 hesaplar."}, {"question": "Belirli bir e\u011fitimi veya sertifikay\u0131 tamamlamayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_certifications WHERE certification_completed = true AND certification_type = '[specific_certification]');", "answer": "Belirli bir e\u011fitimi veya sertifikay\u0131 tamamlamayan kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Veritaban\u0131ndaki t\u00fcm tablolar\u0131 bulun.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm tablolar\u0131 listeler."}, {"question": "Veritaban\u0131ndaki t\u00fcm olu\u015fturulmu\u015f tablolar\u0131 bulun.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';", "answer": "Public \u015femas\u0131ndaki t\u00fcm olu\u015fturulmu\u015f tablolar\u0131 listeler."}, {"question": "Belirli bir tablonun s\u00fctunlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun s\u00fctunlar\u0131n\u0131 ve veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm s\u00fctunlar\u0131 listeleyin.", "query": "SELECT table_name, column_name, data_type FROM information_schema.columns WHERE table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tablonun birincil anahtar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = 'PRIMARY';", "answer": "Belirtilen tablonun birincil anahtar s\u00fctununu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm birincil anahtarlar\u0131 listeleyin.", "query": "SELECT table_name, column_name FROM information_schema.key_column_usage WHERE table_schema = 'public' AND constraint_name = 'PRIMARY';", "answer": "Public \u015femas\u0131ndaki t\u00fcm birincil anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tablonun yabanc\u0131 anahtarlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT kcu.column_name, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun yabanc\u0131 anahtarlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 listeleyin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 listeleyin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtar ili\u015fkilerini getirir."}, {"question": "Veritaban\u0131mdaki tablolar aras\u0131ndaki ili\u015fkileri nas\u0131l belirleyebilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Yabanc\u0131 anahtarlar\u0131 ve referans ald\u0131klar\u0131 tablolar\u0131 ve s\u00fctunlar\u0131 listeleyerek ili\u015fkileri belirler."}, {"question": "Veritaban\u0131mdaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131 bulmak i\u00e7in hangi sorguyu kullanabilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n detaylar\u0131n\u0131, referans alan ve referans al\u0131nan tablolar ve s\u00fctunlar dahil olmak \u00fczere sa\u011flar."}, {"question": "SQL'de yabanc\u0131 anahtarlar\u0131n listesini nas\u0131l alabilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, veritaban\u0131ndaki t\u00fcm tablolar aras\u0131ndaki yabanc\u0131 anahtar ili\u015fkilerinin bir listesini olu\u015fturur."}, {"question": "Veritaban\u0131mdaki hangi tablolar yabanc\u0131 anahtarlarla birbirine ba\u011fl\u0131?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, tablolar aras\u0131ndaki ili\u015fkileri, ba\u011flayan s\u00fctunlar ve referans al\u0131nan tablolar dahil olmak \u00fczere g\u00f6sterir."}, {"question": "Bir tabloya ait s\u00fctun adlar\u0131n\u0131 listele.", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Belirtilen tabloya ait t\u00fcm s\u00fctun adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tabloya ait s\u00fctunlar\u0131 nas\u0131l listeleyebilirim?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, belirtilen tablonun t\u00fcm s\u00fctunlar\u0131n\u0131 listeler."}, {"question": "Tablodaki s\u00fctun isimlerini \u00f6\u011frenmek i\u00e7in ne yapmal\u0131y\u0131m?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, tablodaki s\u00fctun isimlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir tabloya ait s\u00fctun isimlerini sorgulama y\u00f6ntemi nedir?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, ilgili tablonun s\u00fctun isimlerini getirir."}, {"question": "Find all tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Lists all tables in the public schema."}, {"question": "List all column names of [table_name].", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query returns all column names of the specified table."}, {"question": "Find me all fields in [table_name] table", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query lists all fields in the specified table."}, {"question": "How can I fetch the columns of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query retrieves the column names of the given table."}, {"question": "What is the query to get all column names of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query fetches all the column names of a specific table."}, {"question": "How do I list column names of [table_name]?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "This query lists the column names of the specified table."}, {"question": "What is the total number of records in the [table_name] table?", "query": "SELECT COUNT(*) AS total_records FROM [table_name];", "answer": "Returns the total count of rows in the [table_name] table."}, {"question": "Show me all data from the [table_name] table.", "query": "SELECT * FROM [table_name];", "answer": "Returns all rows and columns from the {table_name} table."}, {"question": "How can I view all records in the [table_name] table?", "query": "SELECT * FROM [table_name];", "answer": "This query displays all records from the specified table."}, {"question": "Show me [x] records from the [table_name] table.", "query": "SELECT * FROM [table_name] LIMIT [x];", "answer": "Returns the first [x] rows from the [table_name] table."}, {"question": "What are the distinct values in the [column_name] column of the [table_name] table?", "query": "SELECT DISTINCT [column_name] FROM [table_name];", "answer": "Returns all unique values present in the [column_name] column of the [table_name] table."}, {"question": "Find all records where [column_name] is equal to [value] in the [table_name] table.", "query": "SELECT * FROM [table_name] WHERE [column_name] = [value];", "answer": "Returns all rows where the [column_name] is equal to [value] in the [table_name] table."}, {"question": "What is the average, maximum, or minimum value of [column_name] in the [table_name] table?", "query": "SELECT AVG([column_name]) AS average_value, MAX([column_name]) AS max_value, MIN([column_name]) AS min_value FROM [table_name];", "answer": "Returns the average, maximum, and minimum values of [column_name] in the [table_name] table."}, {"question": "How many records have [column_name] > [value]?", "query": "SELECT COUNT(*) AS record_count FROM [table_name] WHERE [column_name] > [value];", "answer": "Returns the number of rows where the value in [column_name] is greater than [value]."}, {"question": "What is the sum of [column_name] grouped by [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the total sum of [column_name], grouped by [grouping_column]."}, {"question": "How many records exist for each [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the count of records for each unique value in [grouping_column]."}, {"question": "Give me the top 5 [grouping_column]s with the highest total [column_name].", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "Returns the top 5 [grouping_column]s with the highest total sum of [column_name]."}, {"question": "Find the percentage distribution of [column_name] grouped by [grouping_column].", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "Returns the percentage distribution of [column_name] for each unique value of [grouping_column]."}, {"question": "Show me the top 10 highest/lowest [column_name] from [table_name].", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; For lowest values, change DESC to ASC", "answer": "Returns the top 10 records with the highest values in [column_name]. Use ASC for the lowest values."}, {"question": "Find all records where [column_name] contains 'value'.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "Returns all records where [column_name] contains the substring 'value'."}, {"question": "List records where [column_name] falls between [value1] and [value2].", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "Returns all records where [column_name] is within the range of [value1] and [value2]."}, {"question": "Sort the [table_name] table by [column_name] in descending order.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "Returns all records from [table_name] sorted by [column_name] in descending order."}, {"question": "Combine data from [table1] and [table2] based on [common_column].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Returns the combined data from [table1] and [table2] where [common_column] matches in both tables."}, {"question": "Find all records in [table1] that have no matching records in [table2].", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "Returns all records from [table1] that do not have matching records in [table2]."}, {"question": "What is the total [column_name] from [table1] grouped by [table2.column_name]?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "Returns the total sum of [column_name] from [table1], grouped by [table2].[column_name]."}, {"question": "Get the details of [table1] and include matching rows from [table2].", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Returns all columns from both [table1] and [table2] for matching records based on [common_column]."}, {"question": "Combine data from [table1], [table2], and [table3] where [table1.column_name] = [table2.column_name] and [table2.column_name] = [table3.column_name], and filter for rows where [table1.date] is greater than [date_threshold].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > [date_threshold];", "answer": "Returns all columns from [table1], [table2], and [table3] where the join condition is met, and the date in [table1] is greater than [date_threshold]."}, {"question": "Get the total [column_name] from [table1], where records are joined with [table2] and [table3], grouped by [table3.column_name], and filter for records where [table2.column_name] = 'value' and [table1.date] is in the last [X] days.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] > CURRENT_DATE - INTERVAL '[X] days' GROUP BY [table3].[column_name];", "answer": "Returns the total sum of [column_name] from [table1], grouped by [table3.column_name], filtered by [table2.column_name] = 'value' and [table1.date] within the last 30 days."}, {"question": "Find all records from [table1] with their corresponding records from [table2] and [table3], where [table1.column_name] > [value], [table2.column_name] = 'active', and sort the results by [table3.column_name] in ascending order.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "Returns all columns from [table1], [table2], and [table3] based on the specified filter conditions and ordered by [table3.column_name] in ascending order."}, {"question": "Calculate the total [column_name] from [table1] grouped by [table2.column_name], filter for records where [table2.status] = 'approved' and [table1.date] is between '2023-01-01' and '2023-12-31', and include a count of records for each group.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "Returns the total sum and count of [column_name] from [table1], grouped by [table2.column_name], filtered by the status 'approved' and the date range in 2023."}, {"question": "Find all records added/updated in the last [X].", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '[X] days';", "answer": "Returns all records from [table_name] that were added or updated in the last 7 days, assuming the presence of an [updated_at] column."}, {"question": "What is the monthly/yearly total of [column_name] from [table_name]?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "Returns the total sum of [column_name] for each month, grouped by [date_column]."}, {"question": "Show me trends in [column_name] grouped by [time_column].", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "Returns the trend of [column_name] over time, grouped by [time_column] (e.g., day, month, year)."}, {"question": "What is the earliest/latest [column_name] in [table_name]?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "Returns the earliest value in [column_name] from [table_name]."}, {"question": "What is the standard deviation of [column_name] in [table_name]?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "Returns the standard deviation of [column_name] from [table_name]."}, {"question": "Show me the distribution (histogram-like data) of [column_name].", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "Returns the distribution of values in [column_name], showing how often each value appears."}, {"question": "Which [column_name] value appears most frequently in [table_name]?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "Returns the most frequent value of [column_name] from [table_name]."}, {"question": "What is the correlation between [column_name1] and [column_name2] in [table_name]?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "Returns the Pearson correlation coefficient between [column_name1] and [column_name2] in [table_name]."}, {"question": "Calculate the variance of [column_name] for records where [column_name2] > [value].", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "Returns the variance of [column_name] from records where [column_name2] exceeds a certain value."}, {"question": "Show me the average, minimum, and maximum values of [column_name] by [category_column] in [table_name].", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "Returns the average, minimum, and maximum values of [column_name], grouped by [category_column]."}, {"question": "What is the median value of [column_name] in [table_name]?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "Returns the median value of [column_name] from [table_name]."}, {"question": "Calculate the moving average of [column_name] for the last 30 days, grouped by [category_column].", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "Returns the moving average of [column_name] for the last 30 days, grouped by [category_column]."}, {"question": "Find the skewness of [column_name] in [table_name].", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "Returns the skewness of [column_name], which measures the asymmetry of the data distribution."}, {"question": "Show me the cumulative sum of [column_name] by [category_column] over time, ordered by [date_column].", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "Returns the cumulative sum of [column_name], grouped by [category_column], and ordered by [date_column]."}, {"question": "Calculate the interquartile range (IQR) of [column_name] in [table_name].", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "Returns the interquartile range (IQR) of [column_name] in [table_name]."}, {"question": "Find the ratio of [column_name1] to [column_name2] for each record and filter for records where the ratio is greater than [value].", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "Returns the ratio of [column_name1] to [column_name2] and filters for records where the ratio exceeds a certain value."}, {"question": "Show the rolling sum of [column_name] over the last 5 records, ordered by [date_column].", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "Returns the rolling sum of [column_name] over the last 5 records, ordered by [date_column]."}, {"question": "Calculate the percentile rank of [column_name] in [table_name] for each record.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "Returns the percentile rank of [column_name] for each record in [table_name]."}, {"question": "Insert a new record into [table_name] with [column1: value1, column2: value2].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "Inserts a new record with values for [column1] and [column2] into [table_name]."}, {"question": "Update [column_name] to [new_value] where [condition].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "Updates the value of [column_name] to [new_value] for records matching the [condition]."}, {"question": "Delete records from [table_name] where [condition].", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "Deletes records from [table_name] where the [condition] is met."}, {"question": "Create a new table [new_table_name] with columns [column1, column2, ...].", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "Creates a new table called [new_table_name] with the specified columns and data types."}, {"question": "Insert multiple records into [table_name].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "Inserts multiple records into [table_name] with specified values for [column1] and [column2]."}, {"question": "Update multiple columns in [table_name] where [condition].", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "Updates multiple columns ([column1] and [column2]) with new values where the [condition] is met."}, {"question": "Create a table with constraints (e.g., primary key, unique, not null).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Creates a new table with primary key, unique, and not null constraints."}, {"question": "Insert a record with a default value for a column.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "Inserts a new record into [table_name], with [column2] using its default value."}, {"question": "Update a record and set a column to NULL where [condition].", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "Updates records in [table_name] and sets [column_name] to NULL where the [condition] is met."}, {"question": "Create a table with a foreign key reference to another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a new table with a foreign key referencing another table's column."}, {"question": "Insert data from one table into another table.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "Inserts data from [table_name1] into [table_name2] based on a condition."}, {"question": "Update a record to increase/decrease a column's value.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "Increases the value of [column_name] by [value] for records matching [condition]."}, {"question": "Delete all records from [table_name].", "query": "DELETE FROM [table_name];", "answer": "Deletes all records from [table_name] but does not drop the table."}, {"question": "Drop a table from the database.", "query": "DROP TABLE [table_name];", "answer": "Drops the entire table from the database, including its structure and data."}, {"question": "Alter an existing table by adding a new column.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Adds a new column to an existing table."}, {"question": "Alter a table to modify an existing column's data type.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Alters the data type of an existing column in the table."}, {"question": "Alter a table to drop a column.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Drops a column from an existing table."}, {"question": "Create a new table with a composite primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "Creates a new table with a composite primary key consisting of [column1] and [column2]."}, {"question": "Insert data with a subquery to fetch values from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Inserts data into [table_name] by selecting values from another table ([other_table]) based on a condition."}, {"question": "Truncate a table (removes all records but keeps the structure).", "query": "TRUNCATE TABLE [table_name];", "answer": "Removes all records from [table_name] but preserves its structure and schema."}, {"question": "Insert a new record into [table_name] with default values for all columns.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Inserts a new record with the default values defined for the columns in the table."}, {"question": "Update multiple rows in [table_name] where [column_name] equals [old_value] and set [column_name] to [new_value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "Updates all records where [column_name] equals [old_value] and sets it to [new_value]."}, {"question": "Update the column [column_name] for a specific record where the primary key [id] equals [value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Updates the value of [column_name] for the record with primary key [id] equal to [value]."}, {"question": "Delete all records in [table_name] where [column_name] is NULL.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "Deletes records where [column_name] is NULL."}, {"question": "Create a table [new_table_name] with a column that references another table\u2019s primary key (foreign key).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a table with a foreign key that references a primary key in another table."}, {"question": "Update [table_name] and set [column_name] to [value] for rows where [column_name] is greater than [value].", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "Updates [column_name] to [value] for records where [column_name] is greater than the specified value."}, {"question": "Delete records in [table_name] where [column_name] is less than [value].", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "Deletes records where the value of [column_name] is less than the specified value."}, {"question": "Create a new table with a column that stores a unique constraint.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "Creates a new table with a unique constraint on [column1]."}, {"question": "Alter a table to add a NOT NULL constraint to an existing column.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Alters the table to ensure that [column_name] cannot have NULL values."}, {"question": "Insert data into [table_name] where [column_name] is calculated by combining values from two columns.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Inserts a new record and calculates [column3] as the combination of [value1] and [value2]."}, {"question": "Update records in [table_name] by setting [column_name] to the average value of that column.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "Updates all records in [table_name], setting [column_name] to its average value."}, {"question": "Create a new table [new_table_name] and include a timestamp column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Creates a new table and automatically inserts the current timestamp into [created_at] when a new record is added."}, {"question": "Insert data into [table_name] based on a condition from another table (using a subquery).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "Inserts data into [table_name] from [other_table], where [column3] is greater than [value]."}, {"question": "Delete duplicate rows from [table_name] based on [column_name] keeping only the first occurrence.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate rows in [table_name] based on [column_name], keeping the first occurrence."}, {"question": "Insert a record into [table_name] and use a subquery for one of the column values.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "Inserts a new record into [table_name], where [column2] is set by a subquery fetching data from [other_table]."}, {"question": "Create a new table with a composite foreign key referencing multiple columns from another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Creates a new table with a composite foreign key referencing multiple columns from [referenced_table]."}, {"question": "Update records in [table_name] by setting a column value based on a condition and include a CASE statement.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "Updates records in [table_name], setting [column_name] to 'High' or 'Low' based on the value comparison."}, {"question": "Alter a table by adding a unique constraint to multiple columns.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "Alters [table_name] by adding a unique constraint on [column1] and [column2]."}, {"question": "Create a view to summarize data from [table_name].", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "Creates a view that summarizes data by counting [column2] grouped by [column1]."}, {"question": "Create a trigger that automatically updates a column [timestamp_column] to the current time when a row is updated.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "Creates a trigger that updates the [timestamp_column] whenever a record in [table_name] is updated."}, {"question": "Truncate a table and reset its identity column.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "Removes all records from [table_name] and resets the identity column to its starting value."}, {"question": "Delete records older than a specific date.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "Deletes records where [date_column] is older than the specified date."}, {"question": "Insert a record into [table_name] with a subquery fetching data from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Inserts data into [table_name] based on a select query from [other_table]."}, {"question": "Add a CHECK constraint to a column to ensure values fall within a specific range.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "Adds a constraint to ensure values in [column_name] are between 0 and 100."}, {"question": "Delete records from [table_name] where [column_name] is duplicated.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate records from [table_name], keeping the first occurrence based on [column_name]."}, {"question": "What are the triggers defined on the [table_name] table?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Returns the triggers defined on the specified table."}, {"question": "List all stored procedures in the database:", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Returns all stored procedures in the public schema."}, {"question": "What is the current schema of the [table_name] table?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Returns the schema of the specified table."}, {"question": "Show the foreign key relationships of [table_name] with other tables:", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign key relationships of the specified table with other tables."}, {"question": "What are the columns that have indexes in the [table_name] table?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the columns that have indexes in the specified table."}, {"question": "What is the size of the indexes in the database?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Returns the size of the indexes in the specified table (PostgreSQL)."}, {"question": "How many indexes exist on [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the number of indexes on the specified table."}, {"question": "Show me all index definitions in the database:", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Returns all index definitions in the specified schema."}, {"question": "What are the types of indexes used on [table_name]?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the types of indexes used on the specified table."}, {"question": "What are the names of the indexes associated with the [table_name] table?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the names of the indexes associated with the specified table."}, {"question": "Are there any composite indexes on [table_name]? If so, which columns are included?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Returns the composite indexes on the specified table and the columns included in each."}, {"question": "Show the index creation scripts for [table_name]:", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Returns the index creation scripts for the specified table (PostgreSQL)."}, {"question": "What foreign keys exist between [table_name] and other tables?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys between the specified table and other tables."}, {"question": "How many foreign key constraints are there in [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns the number of foreign key constraints in the specified table."}, {"question": "What is the referential integrity rule (e.g., CASCADE, SET NULL) for the foreign keys in [table_name]?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Returns the referential integrity rules for the foreign keys in the specified table."}, {"question": "List all parent tables for foreign keys in [table_name]:", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns all parent tables for foreign keys in the specified table."}, {"question": "List all child tables that reference [table_name] via foreign keys:", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns all child tables that reference the specified table via foreign keys."}, {"question": "List all constraints on the [table_name] table:", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Returns all constraints on the specified table."}, {"question": "Are there any foreign key violations in [table_name]? If so, list them:", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Returns any foreign key violations in the specified table."}, {"question": "Show the unique constraints on the [table_name] table:", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Returns the unique constraints on the specified table."}, {"question": "List all check constraints in the database schema:[schema_name]", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = '[schema_name]';", "answer": "Returns all check constraints in the specified schema."}, {"question": "What are the columns involved in primary key constraints for [table_name]?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Returns the columns involved in primary key constraints for the specified table."}, {"question": "What views depend on [table_name]?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns the views that depend on the specified table."}, {"question": "Show me the data types of the columns in [table_name].", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the data types of the columns in the specified table."}, {"question": "What is the most common [product/behavior] combination by [users/customers]?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Returns the most common product or behavior combination by users or customers."}, {"question": "Find all [users/customers] who have provided feedback in the last [time_period].", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns all users or customers who have provided feedback in the last specified time period."}, {"question": "Find [products/records] that are low in stock.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Returns products or records that are low in stock."}, {"question": "List all [products] that haven\u2019t been sold in the last [time_period].", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Returns all products that haven\u2019t been sold in the last specified time period."}, {"question": "Find the [products] with the highest [return/complaint] rate.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "Returns the products with the highest return or complaint rate."}, {"question": "What are the top-selling [products] in the last [time_period]?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Returns the top-selling products in the last specified time period."}, {"question": "Find [products] that have been on sale for the longest.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "Returns the products that have been on sale for the longest time."}, {"question": "Identify [products] that have been out of stock for more than [time_period].", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns products that have been out of stock for more than the specified time period."}, {"question": "What is the total [revenue/cost] for the [time_period]?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total revenue or cost for the specified time period."}, {"question": "Find the [expenses] for a given [time_period] and categorize them.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Returns the expenses for a given time period, categorized by type."}, {"question": "Identify the top [N] highest revenue-generating [items/products].", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "Returns the top N highest revenue-generating items or products."}, {"question": "What is the total amount of [pending/unpaid] [invoices/orders]?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Returns the total amount of pending or unpaid invoices or orders."}, {"question": "What is the total [discount/bonus] given over the last [time_period]?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total discount or bonus given over the last specified time period."}, {"question": "Compare [revenue/cost] against [expenses/other_metric] for the given [time_period].", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns a comparison of revenue or cost against expenses or another metric for the given time period."}, {"question": "Identify the top-performing keywords/ad_copy for PPC_campaign.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Returns the top-performing keywords and ad copy for a specific PPC campaign."}, {"question": "List all orders/transactions with suspicious billing_address/payment_method.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "Returns all orders or transactions with suspicious billing addresses or payment methods."}, {"question": "Find customers/users who have not updated their contact_info in the last time period.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Returns customers or users who have not updated their contact information in the specified time period."}, {"question": "Identify products/services that are not compliant with safety/quality standards.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "Returns products or services that are not compliant with safety or quality standards."}, {"question": "What are the flagged transactions/orders based on fraud_detection_rule?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Returns transactions or orders that have been flagged based on fraud detection rules."}, {"question": "Find all employees overdue for mandatory training/certification.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Returns employees who are overdue for mandatory training or certification."}, {"question": "Find records with missing data in critical fields like [field_name].", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Returns records with missing data in critical fields."}, {"question": "What is the percentage of incomplete records in [table_name]?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Returns the percentage of incomplete records in the specified table."}, {"question": "List all products/services with no description or incomplete details.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "Returns all products or services with no description or incomplete details."}, {"question": "Check for inconsistent data across different fields/columns (e.g., date formats).", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Returns records with inconsistent data across different fields or columns."}, {"question": "Find records that failed validation/checks.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Returns records that failed validation or checks."}, {"question": "Compare metric1 in current_period to metric2 in previous_period.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Returns a comparison of metric1 in the current period to metric2 in the previous period."}, {"question": "How do metrics compare month-to-month (e.g., sales, expenses)?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Returns a month-to-month comparison of metrics such as sales and expenses."}, {"question": "Compare employee performance based on metric1 vs metric2.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "Returns a comparison of employee performance based on metric1 and metric2."}, {"question": "Compare product1 vs product2 in terms of sales/returns.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "Returns a comparison of product1 and product2 in terms of sales and returns."}, {"question": "Find the growth rate between two periods for metric.", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Returns the growth rate between two periods for a specified metric."}, {"question": "Find the average rating for [product_name].", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Returns the average rating for a specified product."}, {"question": "List all products with a rating below X stars.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Returns all products with a rating below a specified number of stars."}, {"question": "Find all reviews for [product_name].", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Returns all reviews for a specified product."}, {"question": "How does customer feedback correlate with returns/complaints?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "Returns the correlation between customer feedback and returns or complaints."}, {"question": "Identify products with the highest customer satisfaction ratings.", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "Returns the products with the highest customer satisfaction ratings."}, {"question": "What percentage of orders were shipped late in [time_period]?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Returns the percentage of orders that were shipped late in a specified time period."}, {"question": "Find all orders that were shipped within [X] days of placement.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Returns all orders that were shipped within a specified number of days of placement."}, {"question": "Identify the average shipping cost/processing time per order.", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Returns the average shipping cost and processing time per order."}, {"question": "List all orders that require expedited/overnight shipping.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "Returns all orders that require expedited or overnight shipping."}, {"question": "Find orders that have been canceled after shipment.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "Returns all orders that have been canceled after shipment."}, {"question": "Find all users who have logged in within the last [X] days.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Returns all users who have logged in within the last specified number of days."}, {"question": "What is the churn rate of [users/customers] within the last [time_period]?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Returns the churn rate of users or customers within the last specified time period."}, {"question": "Find users who have not made a purchase after their first visit in [time_period].", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Returns users who have not made a purchase after their first visit in the specified time period."}, {"question": "Identify users with the highest lifetime value (LTV).", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "Returns the users with the highest lifetime value."}, {"question": "Find the top [N] users based on purchase frequency.", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Returns the top N users based on purchase frequency."}, {"question": "How many rows are there in the {table_name} table?", "query": "SELECT COUNT(*) AS total_records FROM {table_name};", "answer": "Provides the total number of rows in the {table_name} table."}, {"question": "Retrieve all data from the {table_name} table.", "query": "SELECT * FROM {table_name};", "answer": "Fetches all rows and columns from the {table_name} table."}, {"question": "What unique values exist in the {column_name} column of the {table_name} table?", "query": "SELECT DISTINCT {column_name} FROM {table_name};", "answer": "Lists all distinct values in the {column_name} column of the {table_name} table."}, {"question": "Find all rows where {column_name} equals '{value}'.", "query": "SELECT * FROM {table_name} WHERE {column_name} = '{value}';", "answer": "Returns all rows where {column_name} is equal to {value}."}, {"question": "What are the average, maximum, and minimum values of {column_name} in {table_name}?", "query": "SELECT AVG({column_name}) AS average_value, MAX({column_name}) AS maximum_value, MIN({column_name}) AS minimum_value FROM {table_name};", "answer": "Provides the average, maximum, and minimum values of {column_name} in the {table_name} table."}, {"question": "How many rows have {column_name} greater than {value}?", "query": "SELECT COUNT(*) AS count_records FROM {table_name} WHERE {column_name} > {value};", "answer": "Counts the number of rows where {column_name} is greater than {value}."}, {"question": "What is the sum of [column_name] grouped by [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "Calculates the total sum of [column_name], grouped by [grouping_column]."}, {"question": "How many rows exist for each [grouping_column] in [table_name]?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "Counts the number of rows for each unique value in [grouping_column]."}, {"question": "Show the top 5 [grouping_column]s with the highest total [column_name].", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "Lists the top 5 [grouping_column]s with the highest total sum of [column_name]."}, {"question": "What is the percentage distribution of [column_name] grouped by [grouping_column]?", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "Shows the percentage distribution of [column_name] for each unique value of [grouping_column]."}, {"question": "Show the top 10 highest/lowest [column_name] values from [table_name].", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; For lowest values, change DESC to ASC", "answer": "Lists the top 10 records with the highest values in [column_name]. Use ASC for the lowest values."}, {"question": "Find all rows where [column_name] contains 'value'.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "Returns all rows where [column_name] contains the substring 'value'."}, {"question": "List rows where [column_name] is between [value1] and [value2].", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "Shows all rows where [column_name] is within the range of [value1] and [value2]."}, {"question": "Sort the [table_name] table by [column_name] in descending order.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "Sorts all rows from [table_name] by [column_name] in descending order."}, {"question": "Combine data from [table1] and [table2] based on [common_column].", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Combines data from [table1] and [table2] where [common_column] matches in both tables."}, {"question": "Find all rows in [table1] that have no matching rows in [table2].", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "Lists all rows from [table1] that do not have matching rows in [table2]."}, {"question": "What is the total [column_name] from [table1] grouped by [table2.column_name]?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "Calculates the total sum of [column_name] from [table1], grouped by [table2].[column_name]."}, {"question": "Get the details of [table1] and include matching rows from [table2].", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "Fetches all columns from both [table1] and [table2] for matching rows based on [common_column]."}, {"question": "Combine data from [table1], [table2], and [table3] where [table1.column_name] = [table2.column_name] and [table2.column_name] = [table3.column_name], and filter for rows where [table1.date] is greater than '2023-01-01'.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "Combines data from [table1], [table2], and [table3] where the join condition is met, and the date in [table1] is greater than '2023-01-01'."}, {"question": "Get the total [column_name] from [table1], where rows are joined with [table2] and [table3], grouped by [table3.column_name], and filter for rows where [table2.column_name] = 'value' and [table1.date] is in the last 30 days.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "Calculates the total sum of [column_name] from [table1], grouped by [table3.column_name], filtered by [table2.column_name] = 'value' and [table1.date] within the last 30 days."}, {"question": "Find all rows from [table1] with their corresponding rows from [table2] and [table3], where [table1.column_name] > [value], [table2.column_name] = 'active', and sort the results by [table3.column_name] in ascending order.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "Lists all columns from [table1], [table2], and [table3] based on the specified filter conditions and ordered by [table3.column_name] in ascending order."}, {"question": "Calculate the total [column_name] from [table1] grouped by [table2.column_name], filter for rows where [table2.status] = 'approved' and [table1.date] is between '2023-01-01' and '2023-12-31', and include a count of rows for each group.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "Calculates the total sum and count of [column_name] from [table1], grouped by [table2.column_name], filtered by the status 'approved' and the date range in 2023."}, {"question": "Find all rows added or updated in the last 7 days.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "Lists all rows from [table_name] that were added or updated in the last 7 days, assuming the presence of an [updated_at] column."}, {"question": "What is the monthly or yearly total of [column_name] from [table_name]?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "Calculates the total sum of [column_name] for each month, grouped by [date_column]."}, {"question": "Show trends in [column_name] grouped by [time_column].", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "Displays the trend of [column_name] over time, grouped by [time_column] (e.g., day, month, year)."}, {"question": "What is the earliest or latest [column_name] in [table_name]?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "Provides the earliest value in [column_name] from [table_name]."}, {"question": "What is the standard deviation of [column_name] in [table_name]?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "Calculates the standard deviation of [column_name] from [table_name]."}, {"question": "Show the distribution (histogram-like data) of [column_name].", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "Displays the distribution of values in [column_name], showing how often each value appears."}, {"question": "Which [column_name] value appears most frequently in [table_name]?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "Identifies the most frequent value of [column_name] from [table_name]."}, {"question": "What is the correlation between [column_name1] and [column_name2] in [table_name]?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "Calculates the Pearson correlation coefficient between [column_name1] and [column_name2] in [table_name]."}, {"question": "Calculate the variance of [column_name] for rows where [column_name2] is greater than [value].", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "Computes the variance of [column_name] from rows where [column_name2] exceeds a certain value."}, {"question": "Show the average, minimum, and maximum values of [column_name] by [category_column] in [table_name].", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "Provides the average, minimum, and maximum values of [column_name], grouped by [category_column]."}, {"question": "What is the median value of [column_name] in [table_name]?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "Calculates the median value of [column_name] from [table_name]."}, {"question": "Calculate the moving average of [column_name] for the last 30 days, grouped by [category_column].", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "Computes the moving average of [column_name] for the last 30 days, grouped by [category_column]."}, {"question": "Find the skewness of [column_name] in [table_name].", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "Calculates the skewness of [column_name], which measures the asymmetry of the data distribution."}, {"question": "Show the cumulative sum of [column_name] by [category_column] over time, ordered by [date_column].", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "Displays the cumulative sum of [column_name], grouped by [category_column], and ordered by [date_column]."}, {"question": "Calculate the interquartile range (IQR) of [column_name] in [table_name].", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "Computes the interquartile range (IQR) of [column_name] in [table_name]."}, {"question": "Find the ratio of [column_name1] to [column_name2] for each row and filter for rows where the ratio is greater than [value].", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "Calculates the ratio of [column_name1] to [column_name2] and filters for rows where the ratio exceeds a certain value."}, {"question": "Show the rolling sum of [column_name] over the last 5 rows, ordered by [date_column].", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "Displays the rolling sum of [column_name] over the last 5 rows, ordered by [date_column]."}, {"question": "Calculate the percentile rank of [column_name] in [table_name] for each row.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "Computes the percentile rank of [column_name] for each row in [table_name]."}, {"question": "Add a new entry to [table_name] with values for [column1] and [column2].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "Adds a new entry with specified values for [column1] and [column2] into [table_name]."}, {"question": "Modify [column_name] to [new_value] where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "Modifies the value of [column_name] to [new_value] for records that meet the [condition]."}, {"question": "Remove entries from [table_name] where [condition] is true.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "Removes entries from [table_name] where the [condition] is true."}, {"question": "Create a new table [new_table_name] with specified columns [column1, column2, ...].", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "Creates a new table named [new_table_name] with the specified columns and data types."}, {"question": "Add multiple entries to [table_name].", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "Adds multiple entries to [table_name] with specified values for [column1] and [column2]."}, {"question": "Modify multiple columns in [table_name] where [condition] is met.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "Modifies multiple columns ([column1] and [column2]) with new values where the [condition] is met."}, {"question": "Create a table with constraints like primary key, unique, and not null.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Creates a new table with primary key, unique, and not null constraints."}, {"question": "Add an entry with a default value for a column.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "Adds a new entry into [table_name], with [column2] using its default value."}, {"question": "Set a column to NULL for records where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "Sets [column_name] to NULL for records in [table_name] where the [condition] is met."}, {"question": "Create a table with a foreign key reference to another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a new table with a foreign key referencing another table's column."}, {"question": "Insert data from one table into another based on a condition.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "Inserts data from [table_name1] into [table_name2] based on a condition."}, {"question": "Increase or decrease a column's value for records where [condition] is met.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "Increases the value of [column_name] by [value] for records matching [condition]."}, {"question": "Remove all entries from [table_name].", "query": "DELETE FROM [table_name];", "answer": "Removes all entries from [table_name] but does not drop the table."}, {"question": "Remove a table from the database.", "query": "DROP TABLE [table_name];", "answer": "Removes the entire table from the database, including its structure and data."}, {"question": "Add a new column to an existing table.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Adds a new column to an existing table."}, {"question": "Change the data type of an existing column in a table.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Changes the data type of an existing column in the table."}, {"question": "Remove a column from an existing table.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Removes a column from an existing table."}, {"question": "Create a new table with a composite primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "Creates a new table with a composite primary key consisting of [column1] and [column2]."}, {"question": "Insert data using a subquery to fetch values from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Inserts data into [table_name] by selecting values from another table ([other_table]) based on a condition."}, {"question": "Remove all entries from a table but keep its structure.", "query": "TRUNCATE TABLE [table_name];", "answer": "Removes all entries from [table_name] but preserves its structure and schema."}, {"question": "Add a new entry with default values for all columns.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Adds a new entry with the default values defined for the columns in the table."}, {"question": "Update multiple rows where [column_name] equals [old_value] and set it to [new_value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "Updates all records where [column_name] equals [old_value] and sets it to [new_value]."}, {"question": "Update a specific record where the primary key [id] equals [value].", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Updates the value of [column_name] for the record with primary key [id] equal to [value]."}, {"question": "Remove all entries where [column_name] is NULL.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "Removes entries where [column_name] is NULL."}, {"question": "Create a table with a column that references another table\u2019s primary key.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Creates a table with a foreign key that references a primary key in another table."}, {"question": "Update [column_name] to [value] for rows where [column_name] is greater than [value].", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "Updates [column_name] to [value] for records where [column_name] is greater than the specified value."}, {"question": "Remove entries where [column_name] is less than [value].", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "Removes entries where the value of [column_name] is less than the specified value."}, {"question": "Create a new table with a unique constraint on a column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "Creates a new table with a unique constraint on [column1]."}, {"question": "Add a NOT NULL constraint to an existing column.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Adds a NOT NULL constraint to an existing column in the table."}, {"question": "Insert data where a column is calculated by combining values from two columns.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Adds a new entry and calculates [column3] as the combination of [value1] and [value2]."}, {"question": "Set a column value to the average value of that column.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "Sets [column_name] to its average value for all records in [table_name]."}, {"question": "Create a new table with a timestamp column.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Creates a new table and automatically inserts the current timestamp into [created_at] when a new entry is added."}, {"question": "Insert data based on a condition from another table using a subquery.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "Adds data into [table_name] from [other_table], where [column3] is greater than [value]."}, {"question": "Remove duplicate rows based on [column_name], keeping only the first occurrence.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Removes duplicate rows in [table_name] based on [column_name], keeping the first occurrence."}, {"question": "Add a new entry and use a subquery for one of the column values.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "Adds a new entry into [table_name], where [column2] is set by a subquery fetching data from [other_table]."}, {"question": "Create a new table with a composite foreign key referencing multiple columns from another table.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Creates a new table with a composite foreign key referencing multiple columns from [referenced_table]."}, {"question": "Update records by setting a column value based on a condition using a CASE statement.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "Updates records in [table_name], setting [column_name] to 'High' or 'Low' based on the value comparison."}, {"question": "Add a unique constraint to multiple columns in a table.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "Adds a unique constraint on [column1] and [column2] in [table_name]."}, {"question": "Create a view to aggregate data from a table.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "Creates a view that aggregates data by counting [column2] grouped by [column1]."}, {"question": "Set up a trigger to automatically update a timestamp column when a row is modified.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "Creates a trigger that updates the [timestamp_column] whenever a row in [table_name] is modified."}, {"question": "Clear a table and reset its auto-increment column.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "Clears all records from [table_name] and resets the auto-increment column."}, {"question": "Remove records older than a certain date.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "Deletes records from [table_name] where [date_column] is older than the specified date."}, {"question": "Insert a record into [table_name] using data from another table.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Inserts data into [table_name] based on a select query from [other_table]."}, {"question": "Add a constraint to ensure a column's values are within a specific range.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "Adds a check constraint to ensure values in [column_name] are between 0 and 100."}, {"question": "Delete duplicate records from [table_name] based on a column.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "Deletes duplicate records from [table_name], keeping the first occurrence based on [column_name]."}, {"question": "List the triggers defined on the [table_name] table.", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Returns the triggers defined on the specified table."}, {"question": "Show all stored procedures in the database.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Returns all stored procedures in the public schema."}, {"question": "What is the schema of the [table_name] table?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Returns the schema of the specified table."}, {"question": "Show the foreign key relationships of [table_name] with other tables.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign key relationships of the specified table with other tables."}, {"question": "Which columns in [table_name] have indexes?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the columns that have indexes in the specified table."}, {"question": "What is the size of the indexes in the database?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Returns the size of the indexes in the specified table (PostgreSQL)."}, {"question": "How many indexes are there on [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the number of indexes on the specified table."}, {"question": "Show all index definitions in the database.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Returns all index definitions in the specified schema."}, {"question": "What types of indexes are used on [table_name]?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the types of indexes used on the specified table."}, {"question": "What are the names of the indexes on the [table_name] table?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Returns the names of the indexes on the specified table."}, {"question": "Are there any composite indexes on [table_name]? If so, which columns are included?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Returns the composite indexes on the specified table and the columns included in each."}, {"question": "Show the index creation scripts for [table_name].", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Returns the index creation scripts for the specified table (PostgreSQL)."}, {"question": "What foreign keys exist between [table_name] and other tables?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys between the specified table and other tables."}, {"question": "How many foreign key constraints are there in [table_name]?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns the number of foreign key constraints in the specified table."}, {"question": "What is the referential integrity rule for the foreign keys in [table_name]?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Returns the referential integrity rules for the foreign keys in the specified table."}, {"question": "List all parent tables for foreign keys in [table_name].", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Returns all parent tables for foreign keys in the specified table."}, {"question": "List all child tables that reference [table_name] via foreign keys.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns all child tables that reference the specified table via foreign keys."}, {"question": "List all constraints on the [table_name] table.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Returns all constraints on the specified table."}, {"question": "Are there any foreign key violations in [table_name]? If so, list them.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Returns any foreign key violations in the specified table."}, {"question": "Show the unique constraints on the [table_name] table.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Returns the unique constraints on the specified table."}, {"question": "List all check constraints in the database.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Returns all check constraints in the specified schema."}, {"question": "What are the columns involved in primary key constraints for [table_name]?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Returns the columns involved in primary key constraints for the specified table."}, {"question": "What views depend on [table_name]?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Returns the views that depend on the specified table."}, {"question": "Show the data types of the columns in [table_name].", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the data types of the columns in the specified table."}, {"question": "What is the most common product or behavior combination by users or customers?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Returns the most common product or behavior combination by users or customers."}, {"question": "Find all users or customers who have provided feedback in the last time period.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns all users or customers who have provided feedback in the last specified time period."}, {"question": "Find products or records that are low in stock.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Returns products or records that are low in stock."}, {"question": "List all products that haven\u2019t been sold in the last time period.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Returns all products that haven\u2019t been sold in the last specified time period."}, {"question": "Find the products with the highest return or complaint rate.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "Returns the products with the highest return or complaint rate."}, {"question": "What are the top-selling products in the last time period?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Returns the top-selling products in the last specified time period."}, {"question": "Find products that have been on sale for the longest time.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "Returns the products that have been on sale for the longest time."}, {"question": "Identify products that have been out of stock for more than a specified time period.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns products that have been out of stock for more than the specified time period."}, {"question": "What is the total revenue or cost for the specified time period?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Returns the total revenue or cost for the specified time period."}, {"question": "Find the expenses for a given time period and categorize them.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Returns the expenses for a given time period, categorized by type."}, {"question": "Identify the top N highest revenue-generating items or products.", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "Returns the top N highest revenue-generating items or products."}, {"question": "What is the total amount of pending or unpaid invoices or orders?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Returns the total amount of pending or unpaid invoices or orders."}, {"question": "What is the total amount of discounts or bonuses given in the last [time_period]?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Calculates the total discounts or bonuses provided in the specified time period."}, {"question": "How does revenue compare to expenses for the given [time_period]?", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Compares revenue to expenses for the specified time period."}, {"question": "What are the top-performing keywords and ad copies for a PPC campaign?", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Identifies the best-performing keywords and ad copies for a specific PPC campaign."}, {"question": "List orders or transactions with suspicious billing addresses or payment methods.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "Finds orders or transactions with potentially fraudulent billing addresses or payment methods."}, {"question": "Which customers or users have not updated their contact information in the last [time_period]?", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Lists customers or users who have not updated their contact information within the specified time period."}, {"question": "Identify products or services that do not meet safety or quality standards.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "Finds products or services that fail to meet safety or quality standards."}, {"question": "What transactions or orders have been flagged for potential fraud?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Lists transactions or orders flagged for potential fraud."}, {"question": "Which employees are overdue for mandatory training or certification?", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Identifies employees who are overdue for required training or certification."}, {"question": "Find records with missing data in critical fields.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Lists records with missing data in important fields."}, {"question": "Identify duplicate entries in the customer or product database.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "Finds duplicate entries in the customer or product database."}, {"question": "What percentage of records in [table_name] are incomplete?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Calculates the percentage of incomplete records in the specified table."}, {"question": "List products or services with missing or incomplete descriptions.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "Finds products or services with missing or incomplete descriptions."}, {"question": "Check for inconsistent data across different fields or columns.", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Identifies records with inconsistent data across fields or columns."}, {"question": "Find records that failed validation checks.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Lists records that did not pass validation checks."}, {"question": "Compare metric1 in the current period to metric2 in the previous period.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Compares metric1 in the current period to metric2 in the previous period."}, {"question": "How do metrics like sales and expenses compare month-to-month?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Provides a month-to-month comparison of metrics such as sales and expenses."}, {"question": "Compare employee performance based on two metrics.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "Compares employee performance based on two specified metrics."}, {"question": "Compare sales and returns for two products.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "Compares sales and returns for two specified products."}, {"question": "What is the growth rate of a metric between two periods?", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Calculates the growth rate of a metric between two periods."}, {"question": "What is the average rating for a product?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Finds the average rating for a specified product."}, {"question": "List products with ratings below a certain threshold.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Identifies products with ratings below a specified threshold."}, {"question": "Find all reviews for a specific product.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Lists all reviews for a specified product."}, {"question": "How does customer feedback correlate with returns or complaints?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "Analyzes the correlation between customer feedback and returns or complaints."}, {"question": "Which products have the highest customer satisfaction ratings?", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "Identifies products with the highest customer satisfaction ratings."}, {"question": "What percentage of orders were shipped late in a given time period?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Calculates the percentage of orders shipped late in a specified time period."}, {"question": "Find orders shipped within a certain number of days after placement.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Lists orders shipped within a specified number of days after placement."}, {"question": "What is the average shipping cost and processing time per order?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Calculates the average shipping cost and processing time per order."}, {"question": "List orders requiring expedited or overnight shipping.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "Identifies orders that require expedited or overnight shipping."}, {"question": "Find orders canceled after shipment.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "Lists orders that were canceled after shipment."}, {"question": "Which users have logged in within the last [X] days?", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Finds users who have logged in within the last specified number of days."}, {"question": "What is the churn rate of users or customers in the last [time_period]?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Calculates the churn rate of users or customers in the specified time period."}, {"question": "Find users who have not made a purchase after their first visit in [time_period].", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Identifies users who have not made a purchase after their first visit in the specified time period."}, {"question": "Which users have the highest lifetime value (LTV)?", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "Finds users with the highest lifetime value."}, {"question": "Who are the top [N] users based on purchase frequency?", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Lists the top N users based on how frequently they make purchases."}, {"question": "What is the average time between a user's first visit and first purchase?", "query": "SELECT AVG(DATEDIFF('day', first_visit_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(visit_date) AS first_visit_date, MIN(purchase_date) AS first_purchase_date FROM visits JOIN purchases ON visits.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between a user's first visit and first purchase."}, {"question": "List users who have not logged in or visited the site in the last [X] days.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Identifies users who have not logged in or visited the site in the specified number of days."}, {"question": "What is the average session duration for users in the last [time_period]?", "query": "SELECT AVG(session_duration) AS avg_session_duration FROM user_sessions WHERE session_date >= CURRENT_DATE - INTERVAL '[time_period]';", "answer": "Calculates the average session duration for users in the specified time period."}, {"question": "Find users who have abandoned their shopping carts.", "query": "SELECT user_id, cart_id, abandoned_date FROM shopping_carts WHERE abandoned_date IS NOT NULL;", "answer": "Lists users who have abandoned their shopping carts."}, {"question": "Which users have the highest engagement or activity levels?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "Identifies users with the highest engagement or activity levels."}, {"question": "What is the average number of orders per user in the last [time_period]?", "query": "SELECT AVG(order_count) AS avg_orders_per_user FROM (SELECT user_id, COUNT(*) AS order_count FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_orders;", "answer": "Calculates the average number of orders per user in the specified time period."}, {"question": "List users who have not completed the onboarding process.", "query": "SELECT user_id, username FROM users WHERE onboarding_complete = false;", "answer": "Identifies users who have not completed the onboarding process."}, {"question": "Which users have the highest referral rates?", "query": "SELECT user_id, COUNT(*) AS referral_count FROM referrals GROUP BY user_id ORDER BY referral_count DESC LIMIT 1;", "answer": "Finds users with the highest referral rates."}, {"question": "What is the average time between user sign-up and first purchase?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between user sign-up and first purchase."}, {"question": "Find users who have not completed a specific action or task.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_actions WHERE action_completed = true AND action_type = '[specific_action]');", "answer": "Lists users who have not completed a specific action or task."}, {"question": "Which users have the highest retention rates?", "query": "SELECT user_id, (COUNT(DISTINCT purchase_date) * 100.0) / COUNT(DISTINCT visit_date) AS retention_rate FROM user_activity GROUP BY user_id ORDER BY retention_rate DESC LIMIT 1;", "answer": "Finds users with the highest retention rates."}, {"question": "What is the average time between user visits to the site?", "query": "SELECT AVG(DATEDIFF('day', LAG(visit_date) OVER (PARTITION BY user_id ORDER BY visit_date), visit_date)) AS avg_time_between_visits FROM user_visits;", "answer": "Calculates the average time between user visits to the site."}, {"question": "List users who have not interacted with the platform in the last [X] days.", "query": "SELECT user_id, username FROM users WHERE last_interaction_date < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Identifies users who have not interacted with the platform in the specified number of days."}, {"question": "Which users have the highest customer satisfaction ratings?", "query": "SELECT user_id, AVG(rating) AS avg_rating FROM user_reviews GROUP BY user_id ORDER BY avg_rating DESC LIMIT 1;", "answer": "Finds users with the highest customer satisfaction ratings."}, {"question": "What is the average number of support tickets per user in the last [time_period]?", "query": "SELECT AVG(ticket_count) AS avg_tickets_per_user FROM (SELECT user_id, COUNT(*) AS ticket_count FROM support_tickets WHERE ticket_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_tickets;", "answer": "Calculates the average number of support tickets per user in the specified time period."}, {"question": "Find users who have not completed a specific training or certification.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_certifications WHERE certification_completed = true AND certification_type = '[specific_certification]');", "answer": "Lists users who have not completed a specific training or certification."}, {"question": "Which users have the highest engagement or activity levels?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "Identifies users with the highest engagement or activity levels."}, {"question": "What is the average time between user sign-up and first purchase?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Calculates the average time between user sign-up and first purchase."}, {"question": "Find all tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Lists all tables in the public schema."}, {"question": "Find all created tables in the database.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';", "answer": "Lists all created tables in the public schema."}, {"question": "Show the columns of a specific table.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Returns the columns and data types of the specified table."}, {"question": "List all columns in the database.", "query": "SELECT table_name, column_name, data_type FROM information_schema.columns WHERE table_schema = 'public';", "answer": "Returns all columns in the public schema."}, {"question": "Show the primary key of a table.", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = 'PRIMARY';", "answer": "Returns the primary key column of the specified table."}, {"question": "List all primary keys in the database.", "query": "SELECT table_name, column_name FROM information_schema.key_column_usage WHERE table_schema = 'public' AND constraint_name = 'PRIMARY';", "answer": "Returns all primary keys in the public schema."}, {"question": "Show the foreign keys of a table.", "query": "SELECT kcu.column_name, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Returns the foreign keys of the specified table."}, {"question": "List all foreign keys in the database.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_schema = 'public';", "answer": "Returns all foreign keys in the public schema."}, {"question": "List all foreign keys in the database.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query retrieves all foreign key relationships across tables in the database."}, {"question": "How can I identify relationships between tables in my database?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "It identifies relationships by listing foreign keys and the tables and columns they reference."}, {"question": "What query can I use to find foreign key constraints in my database?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query provides details of foreign key constraints, including the referencing and referenced tables and columns."}, {"question": "How do I get a list of foreign keys in SQL?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "It generates a list of foreign key relationships across all tables in the database."}, {"question": "Which tables in my database are linked through foreign keys?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "This query shows the relationships between tables, including the linking columns and referenced tables."}, {"question": "{table_name} tablosundaki toplam kay\u0131t say\u0131s\u0131 nedir?", "query": "SELECT COUNT(*) AS total_records FROM {table_name};", "answer": "{table_name} tablosundaki toplam sat\u0131r say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki t\u00fcm verileri g\u00f6ster.", "query": "SELECT * FROM {table_name};", "answer": "{table_name} tablosundaki t\u00fcm sat\u0131r ve s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki {column_name} s\u00fctunundaki benzersiz de\u011ferler nelerdir?", "query": "SELECT DISTINCT {column_name} FROM {table_name};", "answer": "{table_name} tablosundaki {column_name} s\u00fctununda bulunan t\u00fcm benzersiz de\u011ferleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "{column_name} = '{value}' olan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM {table_name} WHERE {column_name} = '{value}';", "answer": "{column_name} de\u011feri {value} olan t\u00fcm sat\u0131rlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosundaki {column_name} s\u00fctununun ortalama, maksimum veya minimum de\u011feri nedir?", "query": "SELECT AVG({column_name}) AS average_value, MAX({column_name}) AS maximum_value, MIN({column_name}) AS minimum_value FROM {table_name};", "answer": "{table_name} tablosundaki {column_name} s\u00fctununun ortalama, maksimum ve minimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "{column_name} > {value} olan ka\u00e7 kay\u0131t var?", "query": "SELECT COUNT(*) AS count_records FROM {table_name} WHERE {column_name} > {value};", "answer": "{column_name} de\u011feri {value}'den b\u00fcy\u00fck olan sat\u0131rlar\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosunda [grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] toplam\u0131 nedir?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] toplam\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "{table_name} tablosunda her [grouping_column] i\u00e7in ka\u00e7 kay\u0131t var?", "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] i\u00e7indeki her benzersiz de\u011fer i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek toplam [column_name] de\u011ferine sahip ilk 5 [grouping_column] nedir?", "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;", "answer": "En y\u00fcksek toplam [column_name] de\u011ferine sahip ilk 5 [grouping_column]'u d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [grouping_column] ile grupland\u0131r\u0131lm\u0131\u015f y\u00fczde da\u011f\u0131l\u0131m\u0131 nedir?", "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];", "answer": "[grouping_column] i\u00e7indeki her benzersiz de\u011fer i\u00e7in [column_name] de\u011ferinin y\u00fczde da\u011f\u0131l\u0131m\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki en y\u00fcksek/en d\u00fc\u015f\u00fck 10 [column_name] de\u011ferini g\u00f6ster.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; En d\u00fc\u015f\u00fck de\u011ferler i\u00e7in DESC yerine ASC kullan\u0131n", "answer": "[column_name] i\u00e7indeki en y\u00fcksek de\u011ferlere sahip ilk 10 kayd\u0131 d\u00f6nd\u00fcr\u00fcr. En d\u00fc\u015f\u00fck de\u011ferler i\u00e7in ASC kullan\u0131n."}, {"question": "[column_name] 'value' i\u00e7eren t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';", "answer": "[column_name] 'value' alt dizesini i\u00e7eren t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011feri [value1] ile [value2] aras\u0131nda olan kay\u0131tlar\u0131 listeleyin.", "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];", "answer": "[column_name] de\u011feri [value1] ile [value2] aras\u0131nda olan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunu [column_name] s\u00fctununa g\u00f6re azalan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 [column_name] s\u00fctununa g\u00f6re azalan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirir."}, {"question": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] nedir?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan [table2].[column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosunun detaylar\u0131n\u0131 ve [table2] tablosundan e\u015fle\u015fen sat\u0131rlar\u0131 al\u0131n.", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, [common_column] s\u00fctununa g\u00f6re e\u015fle\u015fen kay\u0131tlar i\u00e7in d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131n\u0131 birle\u015ftirip [table1.date] '2023-01-01' tarihinden b\u00fcy\u00fck olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, birle\u015ftirme ko\u015fulu sa\u011fland\u0131\u011f\u0131nda ve [table1].[date] '2023-01-01' tarihinden b\u00fcy\u00fck oldu\u011funda d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131ndan toplam [column_name] de\u011ferini al\u0131n, [table3.column_name] ile grupland\u0131r\u0131n ve [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "[table1] tablosundan toplam [column_name] de\u011ferini, [table3.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreler."}, {"question": "[table1] tablosundaki t\u00fcm kay\u0131tlar\u0131, [table2] ve [table3] tablolar\u0131ndaki e\u015fle\u015fen kay\u0131tlarla birlikte bulun, [table1.column_name] > [value], [table2.column_name] = 'active' ve sonu\u00e7lar\u0131 [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, belirtilen filtre ko\u015fullar\u0131na g\u00f6re ve [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan toplam [column_name] de\u011ferini hesaplay\u0131n, [table2.column_name] ile grupland\u0131r\u0131n, [table2.status] = 'approved' ve [table1.date] '2023-01-01' ile '2023-12-31' aras\u0131nda olan kay\u0131tlar\u0131 filtreleyin ve her grup i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 ekleyin.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan toplam [column_name] ve kay\u0131t say\u0131s\u0131n\u0131, [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.status] = 'approved' ve [table1.date] '2023' tarih aral\u0131\u011f\u0131nda olan kay\u0131tlar\u0131 filtreler."}, {"question": "Son 7 g\u00fcn i\u00e7inde eklenen/g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "[table_name] tablosundaki son 7 g\u00fcn i\u00e7inde eklenen veya g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr, [updated_at] s\u00fctununun var oldu\u011funu varsayar."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin ayl\u0131k/y\u0131ll\u0131k toplam\u0131 nedir?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin her ay i\u00e7in toplam\u0131n\u0131, [date_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [time_column] ile grupland\u0131r\u0131lm\u0131\u015f e\u011filimlerini g\u00f6ster.", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "[column_name] de\u011ferinin zaman i\u00e7indeki e\u011filimlerini, [time_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr (\u00f6rne\u011fin, g\u00fcn, ay, y\u0131l)."}, {"question": "[table_name] tablosundaki en erken/en ge\u00e7 [column_name] de\u011feri nedir?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "[table_name] tablosundaki en erken [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131 nedir?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131 (histogram benzeri veri) g\u00f6ster.", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131, her de\u011ferin ne s\u0131kl\u0131kta g\u00f6r\u00fcnd\u00fc\u011f\u00fcn\u00fc g\u00f6sterir."}, {"question": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011feri nedir?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki korelasyon nedir?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki Pearson korelasyon katsay\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name2] > [value] olan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "[column_name2] de\u011feri belirli bir de\u011feri a\u015fan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda [category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini g\u00f6ster.", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "[category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131 nedir?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131 hesaplay\u0131n, [category_column] ile grupland\u0131r\u0131n.", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131, [category_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 bulun.", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) hesaplay\u0131n.", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 bulun ve oran\u0131 [value] de\u011ferinden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreleyin.", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 d\u00f6nd\u00fcr\u00fcr ve oran\u0131 belirli bir de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreler."}, {"question": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki her kay\u0131t i\u00e7in [column_name] de\u011ferinin y\u00fczde s\u0131ralamas\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "[table_name] tablosundaki her kay\u0131t i\u00e7in [column_name] de\u011ferinin y\u00fczde s\u0131ralamas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna [column1: value1, column2: value2] de\u011ferleriyle yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "[table_name] tablosuna [column1] ve [column2] i\u00e7in belirtilen de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] de\u011ferini [new_value] olarak g\u00fcncelleyin, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [new_value] olarak g\u00fcnceller."}, {"question": "[table_name] tablosundan [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan siler."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve [column1, column2, ...] s\u00fctunlar\u0131n\u0131 ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturur ve belirtilen s\u00fctunlar\u0131 ve veri t\u00fcrlerini ekler."}, {"question": "[table_name] tablosuna birden fazla kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "[table_name] tablosuna belirtilen de\u011ferlerle birden fazla kay\u0131t ekler."}, {"question": "[table_name] tablosunda [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu ([column1] ve [column2]) yeni de\u011ferlerle g\u00fcnceller."}, {"question": "Birincil anahtar, unique ve not null gibi k\u0131s\u0131tlamalarla bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez k\u0131s\u0131tlamalarla yeni bir tablo olu\u015fturur."}, {"question": "Bir s\u00fctun i\u00e7in varsay\u0131lan de\u011ferle bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] s\u00fctunu i\u00e7in varsay\u0131lan de\u011feri kullan\u0131r."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in, bir s\u00fctunu NULL olarak g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] s\u00fctununu NULL olarak g\u00fcnceller."}, {"question": "Ba\u015fka bir tabloya referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun s\u00fctununa referans veren bir yabanc\u0131 anahtar ile yeni bir tablo olu\u015fturur."}, {"question": "Bir tablodan ba\u015fka bir tabloya veri ekleyin.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "[table_name1] tablosundan [table_name2] tablosuna belirli bir ko\u015fula g\u00f6re veri ekler."}, {"question": "Bir s\u00fctunun de\u011ferini art\u0131r\u0131n/azalt\u0131n, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] kadar art\u0131r\u0131r."}, {"question": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 siler ancak tabloyu d\u00fc\u015f\u00fcrmez."}, {"question": "Veritaban\u0131ndan bir tabloyu tamamen d\u00fc\u015f\u00fcr\u00fcn.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, \u015femas\u0131 ve verileriyle birlikte d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndan bir tabloyu tamamen silin.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, \u015femas\u0131 ve verileriyle birlikte siler."}, {"question": "Mevcut bir tabloya yeni bir s\u00fctun ekleyin.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Mevcut bir tabloya yeni bir s\u00fctun ekler."}, {"question": "Mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirmek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Tablodaki mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirir."}, {"question": "[table_name] tablosundan [column_name] s\u00fctununu d\u00fc\u015f\u00fcr\u00fcn.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Mevcut bir tablodan bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Bile\u015fik anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "[column1] ve [column2]'den olu\u015fan bile\u015fik anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Ba\u015fka bir tablodan de\u011ferler almak i\u00e7in bir alt sorgu kullanarak veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Belirli bir ko\u015fula g\u00f6re ba\u015fka bir tablodan ([other_table]) de\u011ferler se\u00e7erek [table_name] tablosuna veri ekler."}, {"question": "Bir tabloyu k\u0131salt\u0131n (t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131y\u0131 korur).", "query": "TRUNCATE TABLE [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131s\u0131n\u0131 ve \u015femas\u0131n\u0131 korur."}, {"question": "T\u00fcm s\u00fctunlar i\u00e7in varsay\u0131lan de\u011ferlerle [table_name] tablosuna yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Tablodaki s\u00fctunlar i\u00e7in tan\u0131mlanan varsay\u0131lan de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[table_name] tablosunda [column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm sat\u0131rlar\u0131 g\u00fcncelleyin ve [column_name] de\u011ferini [new_value] olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini [new_value] olarak ayarlar."}, {"question": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan belirli bir kay\u0131t i\u00e7in [column_name] s\u00fctununu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan kay\u0131t i\u00e7in [column_name] de\u011ferini g\u00fcnceller."}, {"question": "[table_name] tablosunda [column_name] NULL olan t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "[column_name] NULL olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir s\u00fctunla [new_table_name] tablosunu olu\u015fturun (yabanc\u0131 anahtar).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturur."}, {"question": "[table_name] tablosunu g\u00fcncelleyin ve [column_name] de\u011ferini [value] olarak ayarlay\u0131n, [column_name] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan sat\u0131rlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] olarak g\u00fcnceller."}, {"question": "[table_name] tablosunda [column_name] de\u011feri [value] de\u011ferinden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 siler."}, {"question": "Benzersiz k\u0131s\u0131tlamaya sahip bir s\u00fctunla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "[column1] s\u00fctununda benzersiz k\u0131s\u0131tlamaya sahip yeni bir tablo olu\u015fturur."}, {"question": "Mevcut bir s\u00fctuna NOT NULL k\u0131s\u0131tlamas\u0131 eklemek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Tabloyu de\u011fi\u015ftirerek [column_name] s\u00fctununun NULL olamayaca\u011f\u0131n\u0131 garanti eder."}, {"question": "[table_name] tablosuna veri ekleyin, [column_name] de\u011ferini iki s\u00fctunun de\u011ferlerini birle\u015ftirerek hesaplay\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Yeni bir kay\u0131t ekler ve [column3] de\u011ferini [value1] ve [value2]'nin birle\u015fimi olarak hesaplar."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini o s\u00fctunun ortalama de\u011feri olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini ortalama de\u011feri olarak ayarlar."}, {"question": "Yeni bir tablo [new_table_name] olu\u015fturun ve bir zaman damgas\u0131 s\u00fctunu ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Yeni bir tablo olu\u015fturur ve yeni bir kay\u0131t eklendi\u011finde [created_at] s\u00fctununa otomatik olarak ge\u00e7erli zaman damgas\u0131n\u0131 ekler."}, {"question": "Ba\u015fka bir tablodan belirli bir ko\u015fula g\u00f6re veri ekleyin (alt sorgu kullanarak).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "[other_table] tablosundan [column3] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan verileri [table_name] tablosuna ekler."}, {"question": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosuna bir kay\u0131t ekleyin ve s\u00fctun de\u011ferlerinden biri i\u00e7in bir alt sorgu kullan\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] de\u011ferini [other_table] tablosundan bir alt sorgu ile al\u0131r."}, {"question": "Ba\u015fka bir tablodaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "Ba\u015fka bir tablodaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Bir ko\u015fula dayal\u0131 olarak bir s\u00fctun de\u011ferini ayarlayarak [table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyin ve bir CASE ifadesi ekleyin.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcnceller, [column_name] de\u011ferini 'High' veya 'Low' olarak ayarlar."}, {"question": "Bir tabloyu de\u011fi\u015ftirerek birden fazla s\u00fctuna benzersiz k\u0131s\u0131tlama ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "[table_name] tablosuna [column1] ve [column2] s\u00fctunlar\u0131na benzersiz k\u0131s\u0131tlama ekler."}, {"question": "[table_name] tablosundan verileri \u00f6zetlemek i\u00e7in bir g\u00f6r\u00fcn\u00fcm olu\u015fturun.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "[column2] s\u00fctununu [column1]'e g\u00f6re grupland\u0131rarak sayan bir g\u00f6r\u00fcn\u00fcm olu\u015fturur."}, {"question": "Bir sat\u0131r g\u00fcncellendi\u011finde bir s\u00fctunu otomatik olarak ge\u00e7erli zamana g\u00fcncelleyen bir tetikleyici olu\u015fturun.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "[table_name] tablosundaki bir kay\u0131t g\u00fcncellendi\u011finde [timestamp_column] s\u00fctununu g\u00fcncelleyen bir tetikleyici olu\u015fturur."}, {"question": "[table_name] tablosunu k\u0131salt\u0131n ve kimlik s\u00fctununu s\u0131f\u0131rlay\u0131n.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ve kimlik s\u00fctununu ba\u015flang\u0131\u00e7 de\u011ferine s\u0131f\u0131rlar."}, {"question": "Belirli bir tarihten daha eski kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "[date_column] belirli bir tarihten daha eski olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablodan veri alarak [table_name] tablosuna bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Ba\u015fka bir tablodan se\u00e7me sorgusuna dayal\u0131 olarak [table_name] tablosuna veri ekler."}, {"question": "Bir s\u00fctuna belirli bir aral\u0131kta de\u011ferlerin olmas\u0131n\u0131 sa\u011flamak i\u00e7in CHECK k\u0131s\u0131tlamas\u0131 ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "[column_name] s\u00fctunundaki de\u011ferlerin 0 ile 100 aras\u0131nda olmas\u0131n\u0131 sa\u011flamak i\u00e7in bir k\u0131s\u0131tlama ekler."}, {"question": "[column_name] s\u00fctununda yinelenen kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen kay\u0131tlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosunda tan\u0131ml\u0131 tetikleyiciler nelerdir?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Belirtilen tabloda tan\u0131ml\u0131 tetikleyicileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 listeleyin.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun mevcut \u015femas\u0131 nedir?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun \u015femas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini g\u00f6sterin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda indekslere sahip s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslere sahip s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki indekslerin boyutu nedir?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Belirtilen tablodaki indekslerin boyutunu d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosunda ka\u00e7 indeks var?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda kullan\u0131lan indeks t\u00fcrleri nelerdir?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indeks t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuyla ili\u015fkili indekslerin adlar\u0131 nelerdir?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda bile\u015fik indeksler var m\u0131? Varsa, hangi s\u00fctunlar dahil?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Belirtilen tablodaki bile\u015fik indeksleri ve her birine dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosu i\u00e7in indeks olu\u015fturma betiklerini g\u00f6sterin.", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Belirtilen tablo i\u00e7in indeks olu\u015fturma betiklerini d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosu ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar nelerdir?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablo ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda ka\u00e7 yabanc\u0131 anahtar k\u0131s\u0131tlamas\u0131 var?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kural\u0131 nedir?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kurallar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki t\u00fcm k\u0131s\u0131tlamalar\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki t\u00fcm k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda yabanc\u0131 anahtar ihlalleri var m\u0131? Varsa, listeleyin.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar ihlallerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki benzersiz k\u0131s\u0131tlamalar\u0131 g\u00f6sterin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Belirtilen tablodaki benzersiz k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Belirtilen tablodaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna ba\u011f\u0131ml\u0131 g\u00f6r\u00fcn\u00fcmler nelerdir?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya ba\u011f\u0131ml\u0131 olan g\u00f6r\u00fcn\u00fcmleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki s\u00fctunlar\u0131n veri t\u00fcrlerini g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki s\u00fctunlar\u0131n veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[users/customers] taraf\u0131ndan en yayg\u0131n [product/behavior] kombinasyonu nedir?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Kullan\u0131c\u0131lar veya m\u00fc\u015fteriler taraf\u0131ndan en yayg\u0131n \u00fcr\u00fcn veya davran\u0131\u015f kombinasyonunu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde geri bildirimde bulunan t\u00fcm [users/customers] bulun.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde geri bildirimde bulunan t\u00fcm kullan\u0131c\u0131lar\u0131 veya m\u00fc\u015fterileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Stokta az olan [products/records] bulun.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Stokta az olan \u00fcr\u00fcnleri veya kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm [products] listeleyin.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Son belirtilen s\u00fcre i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek [return/complaint] oran\u0131na sahip [products] bulun.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "En y\u00fcksek iade veya \u015fikayet oran\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde en \u00e7ok satan [products] nelerdir?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Son belirtilen s\u00fcre i\u00e7inde en \u00e7ok satan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En uzun s\u00fcredir sat\u0131\u015fta olan [products] bulun.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "En uzun s\u00fcredir sat\u0131\u015fta olan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] s\u00fcresinden daha uzun s\u00fcredir stokta olmayan [products] belirleyin.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcreden daha uzun s\u00fcredir stokta olmayan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7in toplam [revenue/cost] nedir?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcre i\u00e7in toplam geliri veya maliyeti d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [expenses] bulun ve kategorilere ay\u0131r\u0131n.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Belirli bir s\u00fcre i\u00e7in giderleri d\u00f6nd\u00fcr\u00fcr ve t\u00fcrlerine g\u00f6re kategorilere ay\u0131r\u0131r."}, {"question": "En y\u00fcksek gelir getiren [items/products] nelerdir?", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "En y\u00fcksek gelir getiren N \u00fcr\u00fcn\u00fc veya \u00f6\u011feyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "Toplam [pending/unpaid] [invoices/orders] miktar\u0131 nedir?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Toplam bekleyen veya \u00f6denmemi\u015f faturalar\u0131 veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde verilen toplam [discount/bonus] miktar\u0131 nedir?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde verilen toplam indirim veya bonus miktar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [revenue/cost] ve [expenses/other_metric] kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirli bir s\u00fcre i\u00e7in gelir veya maliyeti giderler veya ba\u015fka bir metrik ile kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri/reklam metinlerini belirleyin.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Belirli bir PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri ve reklam metinlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u015e\u00fcpheli fatura adresi/\u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri/i\u015flemleri listeleyin.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "\u015e\u00fcpheli fatura adresi veya \u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri veya i\u015flemleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri/kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Belirtilen s\u00fcre i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri veya kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00fcvenlik/kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri/hizmetleri belirleyin.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "G\u00fcvenlik veya kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Doland\u0131r\u0131c\u0131l\u0131k tespit kural\u0131na g\u00f6re i\u015faretlenen i\u015flemler/sipari\u015fler nelerdir?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Doland\u0131r\u0131c\u0131l\u0131k tespit kurallar\u0131na g\u00f6re i\u015faretlenen i\u015flemleri veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Zorunlu e\u011fitim/sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 bulun.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Zorunlu e\u011fitim veya sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[field_name] gibi kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "M\u00fc\u015fteri/\u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri belirleyin.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki eksik kay\u0131tlar\u0131n y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Belirtilen tablodaki eksik kay\u0131tlar\u0131n y\u00fczdesini d\u00f6nd\u00fcr\u00fcr."}, {"question": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan t\u00fcm \u00fcr\u00fcnleri/hizmetleri listeleyin.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan t\u00fcm \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Farkl\u0131 alanlar/s\u00fctunlar aras\u0131nda tutars\u0131z veri olup olmad\u0131\u011f\u0131n\u0131 kontrol edin (\u00f6rne\u011fin, tarih formatlar\u0131).", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veriye sahip kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Do\u011frulama/kontrol\u00fc ge\u00e7emeyen kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Do\u011frulama veya kontrol\u00fc ge\u00e7emeyen kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "Ayl\u0131k bazda metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131 (\u00f6rne\u011fin, sat\u0131\u015flar, giderler) nas\u0131ld\u0131r?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Ayl\u0131k bazda sat\u0131\u015flar ve giderler gibi metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u00c7al\u0131\u015fan performans\u0131n\u0131 metric1 ve metric2'ye g\u00f6re kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "\u00c7al\u0131\u015fan performans\u0131n\u0131 metric1 ve metric2'ye g\u00f6re kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u00dcr\u00fcn1 ve \u00fcr\u00fcn2'yi sat\u0131\u015flar/iade a\u00e7\u0131s\u0131ndan kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "\u00dcr\u00fcn1 ve \u00fcr\u00fcn2'yi sat\u0131\u015flar ve iadeler a\u00e7\u0131s\u0131ndan kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131n\u0131 metric i\u00e7in bulun.", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "Belirtilen metric i\u00e7in iki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[product_name] i\u00e7in ortalama puan nedir?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in ortalama puan\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "X y\u0131ld\u0131z\u0131n alt\u0131nda puana sahip t\u00fcm \u00fcr\u00fcnleri listeleyin.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Belirtilen y\u0131ld\u0131z say\u0131s\u0131n\u0131n alt\u0131nda puana sahip t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[product_name] i\u00e7in t\u00fcm yorumlar\u0131 bulun.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "M\u00fc\u015fteri geri bildirimleri ile iade/\u015fikayetler aras\u0131ndaki ili\u015fki nedir?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fkiyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri belirleyin.", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7inde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Belirtilen zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sipari\u015fin verilmesinden itibaren [X] g\u00fcn i\u00e7inde g\u00f6nderilen t\u00fcm sipari\u015fleri bulun.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Sipari\u015fin verilmesinden itibaren belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti/i\u015flem s\u00fcresi nedir?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresini d\u00f6nd\u00fcr\u00fcr."}, {"question": "H\u0131zl\u0131/overnight g\u00f6nderim gerektiren t\u00fcm sipari\u015fleri listeleyin.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri bulun.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "G\u00f6nderimden sonra iptal edilen t\u00fcm sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [X] g\u00fcn i\u00e7inde giri\u015f yapan t\u00fcm kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Son belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde giri\u015f yapan t\u00fcm kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde [kullan\u0131c\u0131/m\u00fc\u015fteri] kay\u0131p oran\u0131 nedir?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Son belirtilen zaman diliminde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7inde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Belirtilen zaman diliminde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek ya\u015fam boyu de\u011fere (LTV) sahip kullan\u0131c\u0131lar\u0131 belirleyin.", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "En y\u00fcksek ya\u015fam boyu de\u011fere sahip kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst [N] kullan\u0131c\u0131y\u0131 bulun.", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst N kullan\u0131c\u0131y\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131n\u0131 [common_column] s\u00fctununa g\u00f6re birle\u015ftirir."}, {"question": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;", "answer": "[table1] tablosunda [table2] tablosunda e\u015fle\u015fen kayd\u0131 olmayan t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] nedir?", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan [table2].[column_name] ile grupland\u0131r\u0131lm\u0131\u015f toplam [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosunun detaylar\u0131n\u0131 ve [table2] tablosundan e\u015fle\u015fen sat\u0131rlar\u0131 al\u0131n.", "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];", "answer": "[table1] ve [table2] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, [common_column] s\u00fctununa g\u00f6re e\u015fle\u015fen kay\u0131tlar i\u00e7in d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131n\u0131 birle\u015ftirip [table1.date] '2023-01-01' tarihinden b\u00fcy\u00fck olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, birle\u015ftirme ko\u015fulu sa\u011fland\u0131\u011f\u0131nda ve [table1].[date] '2023-01-01' tarihinden b\u00fcy\u00fck oldu\u011funda d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1], [table2] ve [table3] tablolar\u0131ndan toplam [column_name] de\u011ferini al\u0131n, [table3.column_name] ile grupland\u0131r\u0131n ve [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreleyin.", "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];", "answer": "[table1] tablosundan toplam [column_name] de\u011ferini, [table3.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.column_name] = 'value' ve [table1.date] son 30 g\u00fcn i\u00e7inde olan sat\u0131rlar\u0131 filtreler."}, {"question": "[table1] tablosundaki t\u00fcm kay\u0131tlar\u0131, [table2] ve [table3] tablolar\u0131ndaki e\u015fle\u015fen kay\u0131tlarla birlikte bulun, [table1.column_name] > [value], [table2.column_name] = 'active' ve sonu\u00e7lar\u0131 [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada s\u0131ralay\u0131n.", "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;", "answer": "[table1], [table2] ve [table3] tablolar\u0131ndaki t\u00fcm s\u00fctunlar\u0131, belirtilen filtre ko\u015fullar\u0131na g\u00f6re ve [table3.column_name] s\u00fctununa g\u00f6re artan s\u0131rada d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table1] tablosundan toplam [column_name] de\u011ferini hesaplay\u0131n, [table2.column_name] ile grupland\u0131r\u0131n, [table2.status] = 'approved' ve [table1.date] '2023-01-01' ile '2023-12-31' aras\u0131nda olan kay\u0131tlar\u0131 filtreleyin ve her grup i\u00e7in kay\u0131t say\u0131s\u0131n\u0131 ekleyin.", "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];", "answer": "[table1] tablosundan toplam [column_name] ve kay\u0131t say\u0131s\u0131n\u0131, [table2.column_name] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr, [table2.status] = 'approved' ve [table1.date] '2023' tarih aral\u0131\u011f\u0131nda olan kay\u0131tlar\u0131 filtreler."}, {"question": "Son 7 g\u00fcn i\u00e7inde eklenen/g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';", "answer": "[table_name] tablosundaki son 7 g\u00fcn i\u00e7inde eklenen veya g\u00fcncellenen t\u00fcm kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr, [updated_at] s\u00fctununun var oldu\u011funu varsayar."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin ayl\u0131k/y\u0131ll\u0131k toplam\u0131 nedir?", "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin her ay i\u00e7in toplam\u0131n\u0131, [date_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [time_column] ile grupland\u0131r\u0131lm\u0131\u015f e\u011filimlerini g\u00f6ster.", "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];", "answer": "[column_name] de\u011ferinin zaman i\u00e7indeki e\u011filimlerini, [time_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr (\u00f6rne\u011fin, g\u00fcn, ay, y\u0131l)."}, {"question": "[table_name] tablosundaki en erken/en ge\u00e7 [column_name] de\u011feri nedir?", "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];", "answer": "[table_name] tablosundaki en erken [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131 nedir?", "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin standart sapmas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131 (histogram benzeri veri) g\u00f6ster.", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;", "answer": "[column_name] de\u011ferinin da\u011f\u0131l\u0131m\u0131n\u0131, her de\u011ferin ne s\u0131kl\u0131kta g\u00f6r\u00fcnd\u00fc\u011f\u00fcn\u00fc g\u00f6sterir."}, {"question": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011feri nedir?", "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;", "answer": "[table_name] tablosundaki en s\u0131k g\u00f6r\u00fclen [column_name] de\u011ferini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki korelasyon nedir?", "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];", "answer": "[table_name] tablosundaki [column_name1] ve [column_name2] aras\u0131ndaki Pearson korelasyon katsay\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name2] > [value] olan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 hesaplay\u0131n.", "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];", "answer": "[column_name2] de\u011feri belirli bir de\u011feri a\u015fan kay\u0131tlar i\u00e7in [column_name] de\u011ferinin varyans\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda [category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini g\u00f6ster.", "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];", "answer": "[category_column] ile grupland\u0131r\u0131lm\u0131\u015f [column_name] de\u011ferinin ortalama, minimum ve maksimum de\u011ferlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131 nedir?", "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin medyan\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131 hesaplay\u0131n, [category_column] ile grupland\u0131r\u0131n.", "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];", "answer": "[column_name] i\u00e7in son 30 g\u00fcn\u00fcn hareketli ortalamas\u0131n\u0131, [category_column] ile grupland\u0131r\u0131lm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 bulun.", "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7arp\u0131kl\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin [category_column] ile grupland\u0131r\u0131lm\u0131\u015f k\u00fcm\u00fclatif toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) hesaplay\u0131n.", "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];", "answer": "[table_name] tablosundaki [column_name] de\u011ferinin \u00e7eyrekler aras\u0131 aral\u0131\u011f\u0131n\u0131 (IQR) d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 bulun ve oran\u0131 [value] de\u011ferinden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreleyin.", "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];", "answer": "[column_name1] ve [column_name2] aras\u0131ndaki oran\u0131 d\u00f6nd\u00fcr\u00fcr ve oran\u0131 belirli bir de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar\u0131 filtreler."}, {"question": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131 g\u00f6sterin, [date_column] ile s\u0131ralay\u0131n.", "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];", "answer": "[column_name] de\u011ferinin son 5 kay\u0131ttaki yuvarlanan toplam\u0131n\u0131, [date_column] ile s\u0131ralanm\u0131\u015f olarak d\u00f6nd\u00fcr\u00fcr."}, {"question": "[column_name] s\u00fctununun y\u00fczde s\u0131ralamas\u0131n\u0131 [table_name] tablosunda her sat\u0131r i\u00e7in hesaplay\u0131n.", "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];", "answer": "[table_name] tablosundaki her sat\u0131r i\u00e7in [column_name] s\u00fctununun y\u00fczde s\u0131ralamas\u0131n\u0131 hesaplar."}, {"question": "[table_name] tablosuna [column1] ve [column2] de\u011ferleriyle yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);", "answer": "[table_name] tablosuna [column1] ve [column2] i\u00e7in belirtilen de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] de\u011ferini [new_value] olarak g\u00fcncelleyin, [condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [new_value] olarak g\u00fcnceller."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar\u0131 [table_name] tablosundan siler."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve [column1, column2, ...] s\u00fctunlar\u0131n\u0131 ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);", "answer": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturur ve belirtilen s\u00fctunlar\u0131 ve veri t\u00fcrlerini ekler."}, {"question": "[table_name] tablosuna birden fazla kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);", "answer": "[table_name] tablosuna belirtilen de\u011ferlerle birden fazla kay\u0131t ekler."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [table_name] tablosunda birden fazla s\u00fctunu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in birden fazla s\u00fctunu ([column1] ve [column2]) yeni de\u011ferlerle g\u00fcnceller."}, {"question": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez gibi k\u0131s\u0131tlamalarla bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);", "answer": "Birincil anahtar, benzersiz ve bo\u015f ge\u00e7ilemez k\u0131s\u0131tlamalarla yeni bir tablo olu\u015fturur."}, {"question": "Bir s\u00fctun i\u00e7in varsay\u0131lan de\u011ferle bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] s\u00fctunu i\u00e7in varsay\u0131lan de\u011feri kullan\u0131r."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in bir s\u00fctunu NULL olarak g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] s\u00fctununu NULL olarak g\u00fcnceller."}, {"question": "Ba\u015fka bir tabloya referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun s\u00fctununa referans veren bir yabanc\u0131 anahtar ile yeni bir tablo olu\u015fturur."}, {"question": "Bir tablodan ba\u015fka bir tabloya veri ekleyin.", "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];", "answer": "[table_name1] tablosundan [table_name2] tablosuna belirli bir ko\u015fula g\u00f6re veri ekler."}, {"question": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in bir s\u00fctunun de\u011ferini art\u0131r\u0131n/azalt\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];", "answer": "[condition] ko\u015fulunu sa\u011flayan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] kadar art\u0131r\u0131r."}, {"question": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 siler ancak tabloyu d\u00fc\u015f\u00fcrmez."}, {"question": "Veritaban\u0131ndan bir tabloyu d\u00fc\u015f\u00fcr\u00fcn.", "query": "DROP TABLE [table_name];", "answer": "Veritaban\u0131ndan tabloyu, yap\u0131s\u0131 ve verileriyle birlikte d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Mevcut bir tabloya yeni bir s\u00fctun ekleyin.", "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];", "answer": "Mevcut bir tabloya yeni bir s\u00fctun ekler."}, {"question": "Mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirmek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];", "answer": "Tablodaki mevcut bir s\u00fctunun veri t\u00fcr\u00fcn\u00fc de\u011fi\u015ftirir."}, {"question": "Bir tabloyu de\u011fi\u015ftirerek bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcn.", "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];", "answer": "Mevcut bir tablodan bir s\u00fctunu d\u00fc\u015f\u00fcr\u00fcr."}, {"question": "Bile\u015fik birincil anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));", "answer": "[column1] ve [column2]'den olu\u015fan bile\u015fik birincil anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Ba\u015fka bir tablodan de\u011ferler almak i\u00e7in bir alt sorgu kullanarak veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];", "answer": "Belirli bir ko\u015fula g\u00f6re ba\u015fka bir tablodan ([other_table]) de\u011ferler se\u00e7erek [table_name] tablosuna veri ekler."}, {"question": "Bir tabloyu k\u0131salt\u0131n (t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131y\u0131 korur).", "query": "TRUNCATE TABLE [table_name];", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ancak yap\u0131s\u0131n\u0131 ve \u015femas\u0131n\u0131 korur."}, {"question": "T\u00fcm s\u00fctunlar i\u00e7in varsay\u0131lan de\u011ferlerle [table_name] tablosuna yeni bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] DEFAULT VALUES;", "answer": "Tablodaki s\u00fctunlar i\u00e7in tan\u0131mlanan varsay\u0131lan de\u011ferlerle yeni bir kay\u0131t ekler."}, {"question": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm sat\u0131rlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini [new_value] olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];", "answer": "[column_name] [old_value] de\u011ferine e\u015fit olan t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini [new_value] olarak ayarlar."}, {"question": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan belirli bir kay\u0131t i\u00e7in [column_name] s\u00fctununu g\u00fcncelleyin.", "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];", "answer": "Birincil anahtar [id] [value] de\u011ferine e\u015fit olan kay\u0131t i\u00e7in [column_name] de\u011ferini g\u00fcnceller."}, {"question": "[column_name] NULL olan t\u00fcm kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;", "answer": "[column_name] NULL olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir s\u00fctunla [new_table_name] tablosunu olu\u015fturun (yabanc\u0131 anahtar).", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));", "answer": "Ba\u015fka bir tablonun birincil anahtar\u0131na referans veren bir yabanc\u0131 anahtar ile bir tablo olu\u015fturur."}, {"question": "[column_name] de\u011ferini [value] olarak g\u00fcncelleyin, [column_name] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan sat\u0131rlar i\u00e7in.", "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden b\u00fcy\u00fck olan kay\u0131tlar i\u00e7in [column_name] de\u011ferini [value] olarak g\u00fcnceller."}, {"question": "[column_name] de\u011feri [value] de\u011ferinden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 [table_name] tablosundan silin.", "query": "DELETE FROM [table_name] WHERE [column_name] < [value];", "answer": "[column_name] de\u011feri belirtilen de\u011ferden k\u00fc\u00e7\u00fck olan kay\u0131tlar\u0131 siler."}, {"question": "Benzersiz k\u0131s\u0131tlamaya sahip bir s\u00fctunla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);", "answer": "[column1] s\u00fctununda benzersiz k\u0131s\u0131tlamaya sahip yeni bir tablo olu\u015fturur."}, {"question": "Mevcut bir s\u00fctuna NOT NULL k\u0131s\u0131tlamas\u0131 eklemek i\u00e7in bir tabloyu de\u011fi\u015ftirin.", "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;", "answer": "Tabloyu de\u011fi\u015ftirerek [column_name] s\u00fctununun NULL olamayaca\u011f\u0131n\u0131 garanti eder."}, {"question": "[column1] ve [column2] de\u011ferlerini birle\u015ftirerek hesaplanan bir s\u00fctun de\u011feriyle [table_name] tablosuna veri ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);", "answer": "Yeni bir kay\u0131t ekler ve [column3] de\u011ferini [value1] ve [value2]'nin birle\u015fimi olarak hesaplar."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyerek [column_name] de\u011ferini o s\u00fctunun ortalama de\u011feri olarak ayarlay\u0131n.", "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 g\u00fcnceller ve [column_name] de\u011ferini ortalama de\u011feri olarak ayarlar."}, {"question": "[new_table_name] ad\u0131nda yeni bir tablo olu\u015fturun ve bir zaman damgas\u0131 s\u00fctunu ekleyin.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);", "answer": "Yeni bir tablo olu\u015fturur ve yeni bir kay\u0131t eklendi\u011finde [created_at] s\u00fctununa otomatik olarak ge\u00e7erli zaman damgas\u0131n\u0131 ekler."}, {"question": "Ba\u015fka bir tablodan belirli bir ko\u015fula g\u00f6re veri ekleyin (alt sorgu kullanarak).", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];", "answer": "[other_table] tablosundan [column3] de\u011feri [value] de\u011ferinden b\u00fcy\u00fck olan verileri [table_name] tablosuna ekler."}, {"question": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen sat\u0131rlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosuna bir kay\u0131t ekleyin ve s\u00fctun de\u011ferlerinden biri i\u00e7in bir alt sorgu kullan\u0131n.", "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));", "answer": "[table_name] tablosuna yeni bir kay\u0131t ekler, [column2] de\u011ferini [other_table] tablosundan bir alt sorgu ile al\u0131r."}, {"question": "[referenced_table] tablosundaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturun.", "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));", "answer": "[referenced_table] tablosundaki birden fazla s\u00fctunu referans alan bile\u015fik yabanc\u0131 anahtarla yeni bir tablo olu\u015fturur."}, {"question": "Bir ko\u015fula dayal\u0131 olarak bir s\u00fctun de\u011ferini ayarlayarak [table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcncelleyin ve bir CASE ifadesi ekleyin.", "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];", "answer": "[table_name] tablosundaki kay\u0131tlar\u0131 g\u00fcnceller, [column_name] de\u011ferini 'High' veya 'Low' olarak ayarlar."}, {"question": "[table_name] tablosuna birden fazla s\u00fctuna benzersiz k\u0131s\u0131tlama ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);", "answer": "[table_name] tablosuna [column1] ve [column2] s\u00fctunlar\u0131na benzersiz k\u0131s\u0131tlama ekler."}, {"question": "[table_name] tablosundan verileri \u00f6zetlemek i\u00e7in bir g\u00f6r\u00fcn\u00fcm olu\u015fturun.", "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];", "answer": "[column2] s\u00fctununu [column1]'e g\u00f6re grupland\u0131rarak sayan bir g\u00f6r\u00fcn\u00fcm olu\u015fturur."}, {"question": "Bir sat\u0131r g\u00fcncellendi\u011finde bir s\u00fctunu otomatik olarak ge\u00e7erli zamana g\u00fcncelleyen bir tetikleyici olu\u015fturun.", "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();", "answer": "[table_name] tablosundaki bir kay\u0131t g\u00fcncellendi\u011finde [timestamp_column] s\u00fctununu g\u00fcncelleyen bir tetikleyici olu\u015fturur."}, {"question": "[table_name] tablosunu k\u0131salt\u0131n ve kimlik s\u00fctununu s\u0131f\u0131rlay\u0131n.", "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;", "answer": "[table_name] tablosundaki t\u00fcm kay\u0131tlar\u0131 kald\u0131r\u0131r ve kimlik s\u00fctununu ba\u015flang\u0131\u00e7 de\u011ferine s\u0131f\u0131rlar."}, {"question": "Belirli bir tarihten daha eski kay\u0131tlar\u0131 silin.", "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';", "answer": "[date_column] belirli bir tarihten daha eski olan kay\u0131tlar\u0131 siler."}, {"question": "Ba\u015fka bir tablodan veri alarak [table_name] tablosuna bir kay\u0131t ekleyin.", "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';", "answer": "Ba\u015fka bir tablodan se\u00e7me sorgusuna dayal\u0131 olarak [table_name] tablosuna veri ekler."}, {"question": "Bir s\u00fctuna belirli bir aral\u0131kta de\u011ferlerin olmas\u0131n\u0131 sa\u011flamak i\u00e7in CHECK k\u0131s\u0131tlamas\u0131 ekleyin.", "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);", "answer": "[column_name] s\u00fctunundaki de\u011ferlerin 0 ile 100 aras\u0131nda olmas\u0131n\u0131 sa\u011flamak i\u00e7in bir k\u0131s\u0131tlama ekler."}, {"question": "[column_name] s\u00fctununda yinelenen kay\u0131tlar\u0131 silin, yaln\u0131zca ilk kayd\u0131 saklay\u0131n.", "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);", "answer": "[column_name] s\u00fctununa g\u00f6re yinelenen kay\u0131tlar\u0131 siler, yaln\u0131zca ilk kayd\u0131 saklar."}, {"question": "[table_name] tablosunda tan\u0131ml\u0131 tetikleyiciler nelerdir?", "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';", "answer": "Belirtilen tabloda tan\u0131ml\u0131 tetikleyicileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 listeleyin.", "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm sakl\u0131 yordamlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun mevcut \u015femas\u0131 nedir?", "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun \u015femas\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini g\u00f6sterin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun di\u011fer tablolarla olan yabanc\u0131 anahtar ili\u015fkilerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda indekslere sahip s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslere sahip s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki indekslerin boyutu nedir?", "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));", "answer": "Belirtilen tablodaki indekslerin boyutunu d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosunda ka\u00e7 indeks var?", "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm indeks tan\u0131mlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda kullan\u0131lan indeks t\u00fcrleri nelerdir?", "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indeks t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuyla ili\u015fkili indekslerin adlar\u0131 nelerdir?", "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki indekslerin adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda bile\u015fik indeksler var m\u0131? Varsa, hangi s\u00fctunlar dahil?", "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;", "answer": "Belirtilen tablodaki bile\u015fik indeksleri ve her birine dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosu i\u00e7in indeks olu\u015fturma betiklerini g\u00f6sterin.", "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;", "answer": "Belirtilen tablo i\u00e7in indeks olu\u015fturma betiklerini d\u00f6nd\u00fcr\u00fcr (PostgreSQL)."}, {"question": "[table_name] tablosu ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar nelerdir?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablo ile di\u011fer tablolar aras\u0131ndaki yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda ka\u00e7 yabanc\u0131 anahtar k\u0131s\u0131tlamas\u0131 var?", "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n say\u0131s\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kural\u0131 nedir?", "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in referans b\u00fct\u00fcnl\u00fc\u011f\u00fc kurallar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;", "answer": "Belirtilen tablodaki yabanc\u0131 anahtarlar i\u00e7in t\u00fcm \u00fcst tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 listeleyin.", "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya yabanc\u0131 anahtarlarla referans veren t\u00fcm alt tablolar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki t\u00fcm k\u0131s\u0131tlamalar\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki t\u00fcm k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosunda yabanc\u0131 anahtar ihlalleri var m\u0131? Varsa, listeleyin.", "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);", "answer": "Belirtilen tablodaki yabanc\u0131 anahtar ihlallerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki benzersiz k\u0131s\u0131tlamalar\u0131 g\u00f6sterin.", "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';", "answer": "Belirtilen tablodaki benzersiz k\u0131s\u0131tlamalar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 listeleyin.", "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';", "answer": "Belirtilen \u015femadaki t\u00fcm CHECK k\u0131s\u0131tlamalar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar nelerdir?", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');", "answer": "Belirtilen tablodaki birincil anahtar k\u0131s\u0131tlamalar\u0131na dahil olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosuna ba\u011f\u0131ml\u0131 g\u00f6r\u00fcn\u00fcmler nelerdir?", "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';", "answer": "Belirtilen tabloya ba\u011f\u0131ml\u0131 olan g\u00f6r\u00fcn\u00fcmleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[table_name] tablosundaki s\u00fctunlar\u0131n veri t\u00fcrlerini g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablodaki s\u00fctunlar\u0131n veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "[users/customers] taraf\u0131ndan en yayg\u0131n [product/behavior] kombinasyonu nedir?", "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;", "answer": "Kullan\u0131c\u0131lar veya m\u00fc\u015fteriler taraf\u0131ndan en yayg\u0131n \u00fcr\u00fcn veya davran\u0131\u015f kombinasyonunu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde geri bildirimde bulunan t\u00fcm [users/customers] bulun.", "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde geri bildirimde bulunan t\u00fcm kullan\u0131c\u0131lar\u0131 veya m\u00fc\u015fterileri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Stokta az olan [products/records] bulun.", "query": "SELECT * FROM products WHERE stock_quantity < [threshold];", "answer": "Stokta az olan \u00fcr\u00fcnleri veya kay\u0131tlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm [products] listeleyin.", "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);", "answer": "Son belirtilen s\u00fcre i\u00e7inde sat\u0131lmam\u0131\u015f t\u00fcm \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En y\u00fcksek [return/complaint] oran\u0131na sahip [products] bulun.", "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;", "answer": "En y\u00fcksek iade veya \u015fikayet oran\u0131na sahip \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde en \u00e7ok satan [products] nelerdir?", "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;", "answer": "Son belirtilen s\u00fcre i\u00e7inde en \u00e7ok satan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "En uzun s\u00fcredir sat\u0131\u015fta olan [products] bulun.", "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;", "answer": "En uzun s\u00fcredir sat\u0131\u015fta olan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] s\u00fcresinden daha uzun s\u00fcredir stokta olmayan [products] belirleyin.", "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcreden daha uzun s\u00fcredir stokta olmayan \u00fcr\u00fcnleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "[time_period] i\u00e7in toplam [revenue/cost] nedir?", "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirtilen s\u00fcre i\u00e7in toplam geliri veya maliyeti d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [expenses] bulun ve kategorilere ay\u0131r\u0131n.", "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;", "answer": "Belirli bir s\u00fcre i\u00e7in giderleri d\u00f6nd\u00fcr\u00fcr ve t\u00fcrlerine g\u00f6re kategorilere ay\u0131r\u0131r."}, {"question": "En y\u00fcksek gelir getiren [items/products] nelerdir?", "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;", "answer": "En y\u00fcksek gelir getiren N \u00fcr\u00fcn\u00fc veya \u00f6\u011feyi d\u00f6nd\u00fcr\u00fcr."}, {"question": "Toplam [pending/unpaid] [invoices/orders] miktar\u0131 nedir?", "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';", "answer": "Toplam bekleyen veya \u00f6denmemi\u015f faturalar\u0131 veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde verilen toplam [discount/bonus] miktar\u0131 nedir?", "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Son belirtilen s\u00fcre i\u00e7inde verilen toplam indirim veya bonus miktar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir [time_period] i\u00e7in [revenue/cost] ve [expenses/other_metric] kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;", "answer": "Belirli bir s\u00fcre i\u00e7in gelir veya maliyeti giderler veya ba\u015fka bir metrik ile kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri/reklam metinlerini belirleyin.", "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;", "answer": "Belirli bir PPC kampanyas\u0131 i\u00e7in en iyi performans g\u00f6steren anahtar kelimeleri ve reklam metinlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "\u015e\u00fcpheli fatura adresi/\u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri/i\u015flemleri listeleyin.", "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';", "answer": "\u015e\u00fcpheli fatura adresi veya \u00f6deme y\u00f6ntemi olan t\u00fcm sipari\u015fleri veya i\u015flemleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Son [time_period] i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri/kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';", "answer": "Belirtilen s\u00fcre i\u00e7inde ileti\u015fim bilgilerini g\u00fcncellemeyen m\u00fc\u015fterileri veya kullan\u0131c\u0131lar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "G\u00fcvenlik/kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri/hizmetleri belirleyin.", "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';", "answer": "G\u00fcvenlik veya kalite standartlar\u0131na uymayan \u00fcr\u00fcnleri veya hizmetleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Doland\u0131r\u0131c\u0131l\u0131k tespit kural\u0131na g\u00f6re i\u015faretlenen i\u015flemler/sipari\u015fler nelerdir?", "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;", "answer": "Doland\u0131r\u0131c\u0131l\u0131k tespit kurallar\u0131na g\u00f6re i\u015faretlenen i\u015flemleri veya sipari\u015fleri d\u00f6nd\u00fcr\u00fcr."}, {"question": "Zorunlu e\u011fitim/sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 bulun.", "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';", "answer": "Zorunlu e\u011fitim veya sertifikasyon i\u00e7in gecikmi\u015f t\u00fcm \u00e7al\u0131\u015fanlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;", "answer": "Kritik alanlarda eksik veriye sahip kay\u0131tlar\u0131 listeler."}, {"question": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri belirleyin.", "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;", "answer": "M\u00fc\u015fteri veya \u00fcr\u00fcn veritaban\u0131nda yinelenen giri\u015fleri bulur."}, {"question": "[table_name] tablosundaki kay\u0131tlar\u0131n y\u00fczde ka\u00e7\u0131 eksik?", "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];", "answer": "Belirtilen tablodaki eksik kay\u0131tlar\u0131n y\u00fczdesini hesaplar."}, {"question": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan \u00fcr\u00fcn veya hizmetleri listeleyin.", "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';", "answer": "A\u00e7\u0131klamas\u0131 veya ayr\u0131nt\u0131lar\u0131 eksik olan \u00fcr\u00fcn veya hizmetleri bulur."}, {"question": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veri olup olmad\u0131\u011f\u0131n\u0131 kontrol edin.", "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];", "answer": "Farkl\u0131 alanlar veya s\u00fctunlar aras\u0131nda tutars\u0131z veriye sahip kay\u0131tlar\u0131 belirler."}, {"question": "Do\u011frulama kontrollerini ge\u00e7emeyen kay\u0131tlar\u0131 bulun.", "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';", "answer": "Do\u011frulama kontrollerini ge\u00e7emeyen kay\u0131tlar\u0131 listeler."}, {"question": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;", "answer": "Mevcut d\u00f6nemdeki metric1 ile \u00f6nceki d\u00f6nemdeki metric2'yi kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "Ayl\u0131k bazda metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131 nas\u0131ld\u0131r (\u00f6rne\u011fin, sat\u0131\u015flar, giderler)?", "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;", "answer": "Ayl\u0131k bazda sat\u0131\u015flar ve giderler gibi metriklerin kar\u015f\u0131la\u015ft\u0131rmas\u0131n\u0131 sa\u011flar."}, {"question": "\u0130ki metrik baz\u0131nda \u00e7al\u0131\u015fan performans\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;", "answer": "\u0130ki belirli metrik baz\u0131nda \u00e7al\u0131\u015fan performans\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki \u00fcr\u00fcn i\u00e7in sat\u0131\u015f ve iadeleri kar\u015f\u0131la\u015ft\u0131r\u0131n.", "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;", "answer": "\u0130ki belirli \u00fcr\u00fcn i\u00e7in sat\u0131\u015f ve iadeleri kar\u015f\u0131la\u015ft\u0131r\u0131r."}, {"question": "\u0130ki d\u00f6nem aras\u0131ndaki b\u00fcy\u00fcme oran\u0131 nedir?", "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];", "answer": "\u0130ki d\u00f6nem aras\u0131ndaki bir metrik i\u00e7in b\u00fcy\u00fcme oran\u0131n\u0131 hesaplar."}, {"question": "Bir \u00fcr\u00fcn i\u00e7in ortalama puan nedir?", "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in ortalama puan\u0131 bulur."}, {"question": "Belirli bir e\u015fik de\u011ferinin alt\u0131nda puana sahip \u00fcr\u00fcnleri listeleyin.", "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];", "answer": "Belirli bir e\u015fik de\u011ferinin alt\u0131nda puana sahip \u00fcr\u00fcnleri belirler."}, {"question": "Belirli bir \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 bulun.", "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';", "answer": "Belirtilen \u00fcr\u00fcn i\u00e7in t\u00fcm yorumlar\u0131 listeler."}, {"question": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fki nedir?", "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;", "answer": "M\u00fc\u015fteri geri bildirimleri ile iade veya \u015fikayetler aras\u0131ndaki ili\u015fkiyi analiz eder."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnler hangileridir?", "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip \u00fcr\u00fcnleri belirler."}, {"question": "Belirli bir zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesi nedir?", "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';", "answer": "Belirtilen zaman diliminde ge\u00e7 g\u00f6nderilen sipari\u015flerin y\u00fczdesini hesaplar."}, {"question": "Sipari\u015fin verilmesinden itibaren belirli bir g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen sipari\u015fleri bulun.", "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';", "answer": "Sipari\u015fin verilmesinden itibaren belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde g\u00f6nderilen sipari\u015fleri listeler."}, {"question": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresi nedir?", "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;", "answer": "Sipari\u015f ba\u015f\u0131na ortalama g\u00f6nderim maliyeti ve i\u015flem s\u00fcresini hesaplar."}, {"question": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren sipari\u015fleri listeleyin.", "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');", "answer": "H\u0131zl\u0131 veya overnight g\u00f6nderim gerektiren sipari\u015fleri belirler."}, {"question": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri bulun.", "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;", "answer": "G\u00f6nderimden sonra iptal edilen sipari\u015fleri listeler."}, {"question": "Son [X] g\u00fcn i\u00e7inde giri\u015f yapan kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';", "answer": "Son belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde giri\u015f yapan kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Son [time_period] i\u00e7inde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131 nedir?", "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;", "answer": "Belirtilen zaman diliminde kullan\u0131c\u0131 veya m\u00fc\u015fteri kay\u0131p oran\u0131n\u0131 hesaplar."}, {"question": "[time_period] i\u00e7inde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;", "answer": "Belirtilen zaman diliminde ilk ziyaretlerinden sonra sat\u0131n alma yapmayan kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "En y\u00fcksek ya\u015fam boyu de\u011fere (LTV) sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;", "answer": "En y\u00fcksek ya\u015fam boyu de\u011fere sahip kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst [N] kullan\u0131c\u0131y\u0131 kimlerdir?", "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];", "answer": "Sat\u0131n alma s\u0131kl\u0131\u011f\u0131na g\u00f6re en \u00fcst N kullan\u0131c\u0131y\u0131 listeler."}, {"question": "Bir kullan\u0131c\u0131n\u0131n ilk ziyareti ile ilk sat\u0131n almas\u0131 aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', first_visit_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(visit_date) AS first_visit_date, MIN(purchase_date) AS first_purchase_date FROM visits JOIN purchases ON visits.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Bir kullan\u0131c\u0131n\u0131n ilk ziyareti ile ilk sat\u0131n almas\u0131 aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Son [X] g\u00fcn i\u00e7inde siteye giri\u015f yapmayan veya ziyaret etmeyen kullan\u0131c\u0131lar\u0131 listeleyin.", "query": "SELECT user_id, username, last_login FROM users WHERE last_login < CURRENT_DATE - INTERVAL '[X] days';", "answer": "Belirtilen g\u00fcn say\u0131s\u0131 i\u00e7inde siteye giri\u015f yapmayan veya ziyaret etmeyen kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131lar\u0131n ortalama oturum s\u00fcresi nedir?", "query": "SELECT AVG(session_duration) AS avg_session_duration FROM user_sessions WHERE session_date >= CURRENT_DATE - INTERVAL '[time_period]';", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131lar\u0131n ortalama oturum s\u00fcresini hesaplar."}, {"question": "Al\u0131\u015fveri\u015f sepetlerini terk eden kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, cart_id, abandoned_date FROM shopping_carts WHERE abandoned_date IS NOT NULL;", "answer": "Al\u0131\u015fveri\u015f sepetlerini terk eden kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama sipari\u015f say\u0131s\u0131 nedir?", "query": "SELECT AVG(order_count) AS avg_orders_per_user FROM (SELECT user_id, COUNT(*) AS order_count FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_orders;", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama sipari\u015f say\u0131s\u0131n\u0131 hesaplar."}, {"question": "Onboarding s\u00fcrecini tamamlamayan kullan\u0131c\u0131lar\u0131 listeleyin.", "query": "SELECT user_id, username FROM users WHERE onboarding_complete = false;", "answer": "Onboarding s\u00fcrecini tamamlamayan kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "En y\u00fcksek y\u00f6nlendirme oran\u0131na sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS referral_count FROM referrals GROUP BY user_id ORDER BY referral_count DESC LIMIT 1;", "answer": "En y\u00fcksek y\u00f6nlendirme oran\u0131na sahip kullan\u0131c\u0131lar\u0131 bulur."}, {"question": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Belirli bir eylemi veya g\u00f6revi tamamlamayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_actions WHERE action_completed = true AND action_type = '[specific_action]');", "answer": "Belirli bir eylemi veya g\u00f6revi tamamlamayan kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, AVG(rating) AS avg_rating FROM user_reviews GROUP BY user_id ORDER BY avg_rating DESC LIMIT 1;", "answer": "En y\u00fcksek m\u00fc\u015fteri memnuniyeti puan\u0131na sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Son [time_period] i\u00e7indeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama destek bileti say\u0131s\u0131 nedir?", "query": "SELECT AVG(ticket_count) AS avg_tickets_per_user FROM (SELECT user_id, COUNT(*) AS ticket_count FROM support_tickets WHERE ticket_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_tickets;", "answer": "Belirtilen zaman dilimindeki kullan\u0131c\u0131 ba\u015f\u0131na ortalama destek bileti say\u0131s\u0131n\u0131 hesaplar."}, {"question": "Belirli bir e\u011fitimi veya sertifikay\u0131 tamamlamayan kullan\u0131c\u0131lar\u0131 bulun.", "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_certifications WHERE certification_completed = true AND certification_type = '[specific_certification]');", "answer": "Belirli bir e\u011fitimi veya sertifikay\u0131 tamamlamayan kullan\u0131c\u0131lar\u0131 listeler."}, {"question": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar kimlerdir?", "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;", "answer": "En y\u00fcksek etkile\u015fim veya aktivite seviyesine sahip kullan\u0131c\u0131lar\u0131 belirler."}, {"question": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcre nedir?", "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;", "answer": "Kullan\u0131c\u0131 kayd\u0131 ile ilk sat\u0131n alma aras\u0131ndaki ortalama s\u00fcreyi hesaplar."}, {"question": "Veritaban\u0131ndaki t\u00fcm tablolar\u0131 bulun.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm tablolar\u0131 listeler."}, {"question": "Veritaban\u0131ndaki t\u00fcm olu\u015fturulmu\u015f tablolar\u0131 bulun.", "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';", "answer": "Public \u015femas\u0131ndaki t\u00fcm olu\u015fturulmu\u015f tablolar\u0131 listeler."}, {"question": "Belirli bir tablonun s\u00fctunlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';", "answer": "Belirtilen tablonun s\u00fctunlar\u0131n\u0131 ve veri t\u00fcrlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm s\u00fctunlar\u0131 listeleyin.", "query": "SELECT table_name, column_name, data_type FROM information_schema.columns WHERE table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tablonun birincil anahtar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = 'PRIMARY';", "answer": "Belirtilen tablonun birincil anahtar s\u00fctununu d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm birincil anahtarlar\u0131 listeleyin.", "query": "SELECT table_name, column_name FROM information_schema.key_column_usage WHERE table_schema = 'public' AND constraint_name = 'PRIMARY';", "answer": "Public \u015femas\u0131ndaki t\u00fcm birincil anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tablonun yabanc\u0131 anahtarlar\u0131n\u0131 g\u00f6sterin.", "query": "SELECT kcu.column_name, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';", "answer": "Belirtilen tablonun yabanc\u0131 anahtarlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 listeleyin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_schema = 'public';", "answer": "Public \u015femas\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtarlar\u0131 listeleyin.", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, veritaban\u0131ndaki t\u00fcm yabanc\u0131 anahtar ili\u015fkilerini getirir."}, {"question": "Veritaban\u0131mdaki tablolar aras\u0131ndaki ili\u015fkileri nas\u0131l belirleyebilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Yabanc\u0131 anahtarlar\u0131 ve referans ald\u0131klar\u0131 tablolar\u0131 ve s\u00fctunlar\u0131 listeleyerek ili\u015fkileri belirler."}, {"question": "Veritaban\u0131mdaki yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131 bulmak i\u00e7in hangi sorguyu kullanabilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, yabanc\u0131 anahtar k\u0131s\u0131tlamalar\u0131n\u0131n detaylar\u0131n\u0131, referans alan ve referans al\u0131nan tablolar ve s\u00fctunlar dahil olmak \u00fczere sa\u011flar."}, {"question": "SQL'de yabanc\u0131 anahtarlar\u0131n listesini nas\u0131l alabilirim?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, veritaban\u0131ndaki t\u00fcm tablolar aras\u0131ndaki yabanc\u0131 anahtar ili\u015fkilerinin bir listesini olu\u015fturur."}, {"question": "Veritaban\u0131mdaki hangi tablolar yabanc\u0131 anahtarlarla birbirine ba\u011fl\u0131?", "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;", "answer": "Bu sorgu, tablolar aras\u0131ndaki ili\u015fkileri, ba\u011flayan s\u00fctunlar ve referans al\u0131nan tablolar dahil olmak \u00fczere g\u00f6sterir."}, {"question": "Bir tabloya ait s\u00fctun adlar\u0131n\u0131 listele.", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Belirtilen tabloya ait t\u00fcm s\u00fctun adlar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr."}, {"question": "Bir tabloya ait s\u00fctunlar\u0131 nas\u0131l listeleyebilirim?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, belirtilen tablonun t\u00fcm s\u00fctunlar\u0131n\u0131 listeler."}, {"question": "Tablodaki s\u00fctun isimlerini \u00f6\u011frenmek i\u00e7in ne yapmal\u0131y\u0131m?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, tablodaki s\u00fctun isimlerini d\u00f6nd\u00fcr\u00fcr."}, {"question": "Belirli bir tabloya ait s\u00fctun isimlerini sorgulama y\u00f6ntemi nedir?", "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';", "answer": "Bu sorgu, ilgili tablonun s\u00fctun isimlerini getirir."}]