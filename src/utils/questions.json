[
  {
    "question": "Find all tables in the database.",
    "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';",
    "answer": "Lists all tables in the public schema."
  },
  {
    "question": "List all column names of [table_name].",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "This query returns all column names of the specified table."
  },
  {
    "question": "Find me all fields in [table_name] table",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "This query lists all fields in the specified table."
  },
  {
    "question": "How can I fetch the columns of [table_name]?",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "This query retrieves the column names of the given table."
  },
  {
    "question": "What is the query to get all column names of [table_name]?",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "This query fetches all the column names of a specific table."
  },
  {
    "question": "How do I list column names of [table_name]?",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "This query lists the column names of the specified table."
  },
  {
    "question": "What is the total number of records in the [table_name] table?",
    "query": "SELECT COUNT(*) AS total_records FROM [table_name];",
    "answer": "Returns the total count of rows in the [table_name] table."
  },
  {
    "question": "Show me all data from the [table_name] table.",
    "query": "SELECT * FROM [table_name];",
    "answer": "Returns all rows and columns from the {table_name} table."
  },
  {
    "question": "How can I view all records in the [table_name] table?",
    "query": "SELECT * FROM [table_name];",
    "answer": "This query displays all records from the specified table."
  },
  {
    "question": "Show me [x] records from the [table_name] table.",
    "query": "SELECT * FROM [table_name] LIMIT [x];",
    "answer": "Returns the first [x] rows from the [table_name] table."
  },
  {
    "question": "What are the distinct values in the [column_name] column of the [table_name] table?",
    "query": "SELECT DISTINCT [column_name] FROM [table_name];",
    "answer": "Returns all unique values present in the [column_name] column of the [table_name] table."
  },
  {
    "question": "Find all records where [column_name] is equal to [value] in the [table_name] table.",
    "query": "SELECT * FROM [table_name] WHERE [column_name] = [value];",
    "answer": "Returns all rows where the [column_name] is equal to [value] in the [table_name] table."
  },
  {
    "question": "What is the average, maximum, or minimum value of [column_name] in the [table_name] table?",
    "query": "SELECT AVG([column_name]) AS average_value, MAX([column_name]) AS max_value, MIN([column_name]) AS min_value FROM [table_name];",
    "answer": "Returns the average, maximum, and minimum values of [column_name] in the [table_name] table."
  },
  {
    "question": "How many records have [column_name] > [value]?",
    "query": "SELECT COUNT(*) AS record_count FROM [table_name] WHERE [column_name] > [value];",
    "answer": "Returns the number of rows where the value in [column_name] is greater than [value]."
  },
  {
    "question": "What is the sum of [column_name] grouped by [grouping_column] in [table_name]?",
    "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];",
    "answer": "Returns the total sum of [column_name], grouped by [grouping_column]."
  },
  {
    "question": "How many records exist for each [grouping_column] in [table_name]?",
    "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];",
    "answer": "Returns the count of records for each unique value in [grouping_column]."
  },
  {
    "question": "Give me the top 5 [grouping_column]s with the highest total [column_name].",
    "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;",
    "answer": "Returns the top 5 [grouping_column]s with the highest total sum of [column_name]."
  },
  {
    "question": "Find the percentage distribution of [column_name] grouped by [grouping_column].",
    "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];",
    "answer": "Returns the percentage distribution of [column_name] for each unique value of [grouping_column]."
  },
  {
    "question": "Show me the top 10 highest/lowest [column_name] from [table_name].",
    "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; For lowest values, change DESC to ASC",
    "answer": "Returns the top 10 records with the highest values in [column_name]. Use ASC for the lowest values."
  },
  {
    "question": "Find all records where [column_name] contains 'value'.",
    "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';",
    "answer": "Returns all records where [column_name] contains the substring 'value'."
  },
  {
    "question": "List records where [column_name] falls between [value1] and [value2].",
    "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];",
    "answer": "Returns all records where [column_name] is within the range of [value1] and [value2]."
  },
  {
    "question": "Sort the [table_name] table by [column_name] in descending order.",
    "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;",
    "answer": "Returns all records from [table_name] sorted by [column_name] in descending order."
  },
  {
    "question": "Combine data from [table1] and [table2] based on [common_column].",
    "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];",
    "answer": "Returns the combined data from [table1] and [table2] where [common_column] matches in both tables."
  },
  {
    "question": "Find all records in [table1] that have no matching records in [table2].",
    "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;",
    "answer": "Returns all records from [table1] that do not have matching records in [table2]."
  },
  {
    "question": "What is the total [column_name] from [table1] grouped by [table2.column_name]?",
    "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];",
    "answer": "Returns the total sum of [column_name] from [table1], grouped by [table2].[column_name]."
  },
  {
    "question": "Get the details of [table1] and include matching rows from [table2].",
    "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];",
    "answer": "Returns all columns from both [table1] and [table2] for matching records based on [common_column]."
  },
  {
    "question": "Combine data from [table1], [table2], and [table3] where [table1.column_name] = [table2.column_name] and [table2.column_name] = [table3.column_name], and filter for rows where [table1.date] is greater than [date_threshold].",
    "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > [date_threshold];",
    "answer": "Returns all columns from [table1], [table2], and [table3] where the join condition is met, and the date in [table1] is greater than [date_threshold]."
  },
  {
    "question": "Get the total [column_name] from [table1], where records are joined with [table2] and [table3], grouped by [table3.column_name], and filter for records where [table2.column_name] = 'value' and [table1.date] is in the last [X] days.",
    "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] > CURRENT_DATE - INTERVAL '[X] days' GROUP BY [table3].[column_name];",
    "answer": "Returns the total sum of [column_name] from [table1], grouped by [table3.column_name], filtered by [table2.column_name] = 'value' and [table1.date] within the last 30 days."
  },
  {
    "question": "Find all records from [table1] with their corresponding records from [table2] and [table3], where [table1.column_name] > [value], [table2.column_name] = 'active', and sort the results by [table3.column_name] in ascending order.",
    "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;",
    "answer": "Returns all columns from [table1], [table2], and [table3] based on the specified filter conditions and ordered by [table3.column_name] in ascending order."
  },
  {
    "question": "Calculate the total [column_name] from [table1] grouped by [table2.column_name], filter for records where [table2.status] = 'approved' and [table1.date] is between '2023-01-01' and '2023-12-31', and include a count of records for each group.",
    "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];",
    "answer": "Returns the total sum and count of [column_name] from [table1], grouped by [table2.column_name], filtered by the status 'approved' and the date range in 2023."
  },
  {
    "question": "Find all records added/updated in the last [X].",
    "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '[X] days';",
    "answer": "Returns all records from [table_name] that were added or updated in the last 7 days, assuming the presence of an [updated_at] column."
  },
  {
    "question": "What is the monthly/yearly total of [column_name] from [table_name]?",
    "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;",
    "answer": "Returns the total sum of [column_name] for each month, grouped by [date_column]."
  },
  {
    "question": "Show me trends in [column_name] grouped by [time_column].",
    "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];",
    "answer": "Returns the trend of [column_name] over time, grouped by [time_column] (e.g., day, month, year)."
  },
  {
    "question": "What is the earliest/latest [column_name] in [table_name]?",
    "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];",
    "answer": "Returns the earliest value in [column_name] from [table_name]."
  },
  {
    "question": "What is the standard deviation of [column_name] in [table_name]?",
    "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];",
    "answer": "Returns the standard deviation of [column_name] from [table_name]."
  },
  {
    "question": "Show me the distribution (histogram-like data) of [column_name].",
    "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;",
    "answer": "Returns the distribution of values in [column_name], showing how often each value appears."
  },
  {
    "question": "Which [column_name] value appears most frequently in [table_name]?",
    "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;",
    "answer": "Returns the most frequent value of [column_name] from [table_name]."
  },
  {
    "question": "What is the correlation between [column_name1] and [column_name2] in [table_name]?",
    "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];",
    "answer": "Returns the Pearson correlation coefficient between [column_name1] and [column_name2] in [table_name]."
  },
  {
    "question": "Calculate the variance of [column_name] for records where [column_name2] > [value].",
    "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];",
    "answer": "Returns the variance of [column_name] from records where [column_name2] exceeds a certain value."
  },
  {
    "question": "Show me the average, minimum, and maximum values of [column_name] by [category_column] in [table_name].",
    "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];",
    "answer": "Returns the average, minimum, and maximum values of [column_name], grouped by [category_column]."
  },
  {
    "question": "What is the median value of [column_name] in [table_name]?",
    "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];",
    "answer": "Returns the median value of [column_name] from [table_name]."
  },
  {
    "question": "Calculate the moving average of [column_name] for the last 30 days, grouped by [category_column].",
    "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];",
    "answer": "Returns the moving average of [column_name] for the last 30 days, grouped by [category_column]."
  },
  {
    "question": "Find the skewness of [column_name] in [table_name].",
    "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];",
    "answer": "Returns the skewness of [column_name], which measures the asymmetry of the data distribution."
  },
  {
    "question": "Show me the cumulative sum of [column_name] by [category_column] over time, ordered by [date_column].",
    "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];",
    "answer": "Returns the cumulative sum of [column_name], grouped by [category_column], and ordered by [date_column]."
  },
  {
    "question": "Calculate the interquartile range (IQR) of [column_name] in [table_name].",
    "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];",
    "answer": "Returns the interquartile range (IQR) of [column_name] in [table_name]."
  },
  {
    "question": "Find the ratio of [column_name1] to [column_name2] for each record and filter for records where the ratio is greater than [value].",
    "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];",
    "answer": "Returns the ratio of [column_name1] to [column_name2] and filters for records where the ratio exceeds a certain value."
  },
  {
    "question": "Show the rolling sum of [column_name] over the last 5 records, ordered by [date_column].",
    "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];",
    "answer": "Returns the rolling sum of [column_name] over the last 5 records, ordered by [date_column]."
  },
  {
    "question": "Calculate the percentile rank of [column_name] in [table_name] for each record.",
    "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];",
    "answer": "Returns the percentile rank of [column_name] for each record in [table_name]."
  },
  {
    "question": "Insert a new record into [table_name] with [column1: value1, column2: value2].",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);",
    "answer": "Inserts a new record with values for [column1] and [column2] into [table_name]."
  },
  {
    "question": "Update [column_name] to [new_value] where [condition].",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];",
    "answer": "Updates the value of [column_name] to [new_value] for records matching the [condition]."
  },
  {
    "question": "Delete records from [table_name] where [condition].",
    "query": "DELETE FROM [table_name] WHERE [condition];",
    "answer": "Deletes records from [table_name] where the [condition] is met."
  },
  {
    "question": "Create a new table [new_table_name] with columns [column1, column2, ...].",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);",
    "answer": "Creates a new table called [new_table_name] with the specified columns and data types."
  },
  {
    "question": "Insert multiple records into [table_name].",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);",
    "answer": "Inserts multiple records into [table_name] with specified values for [column1] and [column2]."
  },
  {
    "question": "Update multiple columns in [table_name] where [condition].",
    "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];",
    "answer": "Updates multiple columns ([column1] and [column2]) with new values where the [condition] is met."
  },
  {
    "question": "Create a table with constraints (e.g., primary key, unique, not null).",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);",
    "answer": "Creates a new table with primary key, unique, and not null constraints."
  },
  {
    "question": "Insert a record with a default value for a column.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);",
    "answer": "Inserts a new record into [table_name], with [column2] using its default value."
  },
  {
    "question": "Update a record and set a column to NULL where [condition].",
    "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];",
    "answer": "Updates records in [table_name] and sets [column_name] to NULL where the [condition] is met."
  },
  {
    "question": "Create a table with a foreign key reference to another table.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));",
    "answer": "Creates a new table with a foreign key referencing another table's column."
  },
  {
    "question": "Insert data from one table into another table.",
    "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];",
    "answer": "Inserts data from [table_name1] into [table_name2] based on a condition."
  },
  {
    "question": "Update a record to increase/decrease a column's value.",
    "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];",
    "answer": "Increases the value of [column_name] by [value] for records matching [condition]."
  },
  {
    "question": "Delete all records from [table_name].",
    "query": "DELETE FROM [table_name];",
    "answer": "Deletes all records from [table_name] but does not drop the table."
  },
  {
    "question": "Drop a table from the database.",
    "query": "DROP TABLE [table_name];",
    "answer": "Drops the entire table from the database, including its structure and data."
  },
  {
    "question": "Alter an existing table by adding a new column.",
    "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];",
    "answer": "Adds a new column to an existing table."
  },
  {
    "question": "Alter a table to modify an existing column's data type.",
    "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];",
    "answer": "Alters the data type of an existing column in the table."
  },
  {
    "question": "Alter a table to drop a column.",
    "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];",
    "answer": "Drops a column from an existing table."
  },
  {
    "question": "Create a new table with a composite primary key.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));",
    "answer": "Creates a new table with a composite primary key consisting of [column1] and [column2]."
  },
  {
    "question": "Insert data with a subquery to fetch values from another table.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];",
    "answer": "Inserts data into [table_name] by selecting values from another table ([other_table]) based on a condition."
  },
  {
    "question": "Truncate a table (removes all records but keeps the structure).",
    "query": "TRUNCATE TABLE [table_name];",
    "answer": "Removes all records from [table_name] but preserves its structure and schema."
  },
  {
    "question": "Insert a new record into [table_name] with default values for all columns.",
    "query": "INSERT INTO [table_name] DEFAULT VALUES;",
    "answer": "Inserts a new record with the default values defined for the columns in the table."
  },
  {
    "question": "Update multiple rows in [table_name] where [column_name] equals [old_value] and set [column_name] to [new_value].",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];",
    "answer": "Updates all records where [column_name] equals [old_value] and sets it to [new_value]."
  },
  {
    "question": "Update the column [column_name] for a specific record where the primary key [id] equals [value].",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];",
    "answer": "Updates the value of [column_name] for the record with primary key [id] equal to [value]."
  },
  {
    "question": "Delete all records in [table_name] where [column_name] is NULL.",
    "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;",
    "answer": "Deletes records where [column_name] is NULL."
  },
  {
    "question": "Create a table [new_table_name] with a column that references another table’s primary key (foreign key).",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));",
    "answer": "Creates a table with a foreign key that references a primary key in another table."
  },
  {
    "question": "Update [table_name] and set [column_name] to [value] for rows where [column_name] is greater than [value].",
    "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];",
    "answer": "Updates [column_name] to [value] for records where [column_name] is greater than the specified value."
  },
  {
    "question": "Delete records in [table_name] where [column_name] is less than [value].",
    "query": "DELETE FROM [table_name] WHERE [column_name] < [value];",
    "answer": "Deletes records where the value of [column_name] is less than the specified value."
  },
  {
    "question": "Create a new table with a column that stores a unique constraint.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);",
    "answer": "Creates a new table with a unique constraint on [column1]."
  },
  {
    "question": "Alter a table to add a NOT NULL constraint to an existing column.",
    "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;",
    "answer": "Alters the table to ensure that [column_name] cannot have NULL values."
  },
  {
    "question": "Insert data into [table_name] where [column_name] is calculated by combining values from two columns.",
    "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);",
    "answer": "Inserts a new record and calculates [column3] as the combination of [value1] and [value2]."
  },
  {
    "question": "Update records in [table_name] by setting [column_name] to the average value of that column.",
    "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);",
    "answer": "Updates all records in [table_name], setting [column_name] to its average value."
  },
  {
    "question": "Create a new table [new_table_name] and include a timestamp column.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);",
    "answer": "Creates a new table and automatically inserts the current timestamp into [created_at] when a new record is added."
  },
  {
    "question": "Insert data into [table_name] based on a condition from another table (using a subquery).",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];",
    "answer": "Inserts data into [table_name] from [other_table], where [column3] is greater than [value]."
  },
  {
    "question": "Delete duplicate rows from [table_name] based on [column_name] keeping only the first occurrence.",
    "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);",
    "answer": "Deletes duplicate rows in [table_name] based on [column_name], keeping the first occurrence."
  },
  {
    "question": "Insert a record into [table_name] and use a subquery for one of the column values.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));",
    "answer": "Inserts a new record into [table_name], where [column2] is set by a subquery fetching data from [other_table]."
  },
  {
    "question": "Create a new table with a composite foreign key referencing multiple columns from another table.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));",
    "answer": "Creates a new table with a composite foreign key referencing multiple columns from [referenced_table]."
  },
  {
    "question": "Update records in [table_name] by setting a column value based on a condition and include a CASE statement.",
    "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];",
    "answer": "Updates records in [table_name], setting [column_name] to 'High' or 'Low' based on the value comparison."
  },
  {
    "question": "Alter a table by adding a unique constraint to multiple columns.",
    "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);",
    "answer": "Alters [table_name] by adding a unique constraint on [column1] and [column2]."
  },
  {
    "question": "Create a view to summarize data from [table_name].",
    "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];",
    "answer": "Creates a view that summarizes data by counting [column2] grouped by [column1]."
  },
  {
    "question": "Create a trigger that automatically updates a column [timestamp_column] to the current time when a row is updated.",
    "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();",
    "answer": "Creates a trigger that updates the [timestamp_column] whenever a record in [table_name] is updated."
  },
  {
    "question": "Truncate a table and reset its identity column.",
    "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;",
    "answer": "Removes all records from [table_name] and resets the identity column to its starting value."
  },
  {
    "question": "Delete records older than a specific date.",
    "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';",
    "answer": "Deletes records where [date_column] is older than the specified date."
  },
  {
    "question": "Insert a record into [table_name] with a subquery fetching data from another table.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';",
    "answer": "Inserts data into [table_name] based on a select query from [other_table]."
  },
  {
    "question": "Add a CHECK constraint to a column to ensure values fall within a specific range.",
    "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);",
    "answer": "Adds a constraint to ensure values in [column_name] are between 0 and 100."
  },
  {
    "question": "Delete records from [table_name] where [column_name] is duplicated.",
    "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);",
    "answer": "Deletes duplicate records from [table_name], keeping the first occurrence based on [column_name]."
  },
  {
    "question": "What are the triggers defined on the [table_name] table?",
    "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';",
    "answer": "Returns the triggers defined on the specified table."
  },
  {
    "question": "List all stored procedures in the database:",
    "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';",
    "answer": "Returns all stored procedures in the public schema."
  },
  {
    "question": "What is the current schema of the [table_name] table?",
    "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';",
    "answer": "Returns the schema of the specified table."
  },
  {
    "question": "Show the foreign key relationships of [table_name] with other tables:",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Returns the foreign key relationships of the specified table with other tables."
  },
  {
    "question": "What are the columns that have indexes in the [table_name] table?",
    "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Returns the columns that have indexes in the specified table."
  },
  {
    "question": "What is the size of the indexes in the database?",
    "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));",
    "answer": "Returns the size of the indexes in the specified table (PostgreSQL)."
  },
  {
    "question": "How many indexes exist on [table_name]?",
    "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Returns the number of indexes on the specified table."
  },
  {
    "question": "Show me all index definitions in the database:",
    "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';",
    "answer": "Returns all index definitions in the specified schema."
  },
  {
    "question": "What are the types of indexes used on [table_name]?",
    "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Returns the types of indexes used on the specified table."
  },
  {
    "question": "What are the names of the indexes associated with the [table_name] table?",
    "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Returns the names of the indexes associated with the specified table."
  },
  {
    "question": "Are there any composite indexes on [table_name]? If so, which columns are included?",
    "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;",
    "answer": "Returns the composite indexes on the specified table and the columns included in each."
  },
  {
    "question": "Show the index creation scripts for [table_name]:",
    "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;",
    "answer": "Returns the index creation scripts for the specified table (PostgreSQL)."
  },
  {
    "question": "What foreign keys exist between [table_name] and other tables?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Returns the foreign keys between the specified table and other tables."
  },
  {
    "question": "How many foreign key constraints are there in [table_name]?",
    "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;",
    "answer": "Returns the number of foreign key constraints in the specified table."
  },
  {
    "question": "What is the referential integrity rule (e.g., CASCADE, SET NULL) for the foreign keys in [table_name]?",
    "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');",
    "answer": "Returns the referential integrity rules for the foreign keys in the specified table."
  },
  {
    "question": "List all parent tables for foreign keys in [table_name]:",
    "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;",
    "answer": "Returns all parent tables for foreign keys in the specified table."
  },
  {
    "question": "List all child tables that reference [table_name] via foreign keys:",
    "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';",
    "answer": "Returns all child tables that reference the specified table via foreign keys."
  },
  {
    "question": "List all constraints on the [table_name] table:",
    "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';",
    "answer": "Returns all constraints on the specified table."
  },
  {
    "question": "Are there any foreign key violations in [table_name]? If so, list them:",
    "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);",
    "answer": "Returns any foreign key violations in the specified table."
  },
  {
    "question": "Show the unique constraints on the [table_name] table:",
    "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';",
    "answer": "Returns the unique constraints on the specified table."
  },
  {
    "question": "List all check constraints in the database schema:[schema_name]",
    "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = '[schema_name]';",
    "answer": "Returns all check constraints in the specified schema."
  },
  {
    "question": "What are the columns involved in primary key constraints for [table_name]?",
    "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');",
    "answer": "Returns the columns involved in primary key constraints for the specified table."
  },
  {
    "question": "What views depend on [table_name]?",
    "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';",
    "answer": "Returns the views that depend on the specified table."
  },
  {
    "question": "Show me the data types of the columns in [table_name].",
    "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "Returns the data types of the columns in the specified table."
  },
  {
    "question": "What is the most common [product/behavior] combination by [users/customers]?",
    "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;",
    "answer": "Returns the most common product or behavior combination by users or customers."
  },
  {
    "question": "Find all [users/customers] who have provided feedback in the last [time_period].",
    "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Returns all users or customers who have provided feedback in the last specified time period."
  },
  {
    "question": "Find [products/records] that are low in stock.",
    "query": "SELECT * FROM products WHERE stock_quantity < [threshold];",
    "answer": "Returns products or records that are low in stock."
  },
  {
    "question": "List all [products] that haven’t been sold in the last [time_period].",
    "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);",
    "answer": "Returns all products that haven’t been sold in the last specified time period."
  },
  {
    "question": "Find the [products] with the highest [return/complaint] rate.",
    "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;",
    "answer": "Returns the products with the highest return or complaint rate."
  },
  {
    "question": "What are the top-selling [products] in the last [time_period]?",
    "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;",
    "answer": "Returns the top-selling products in the last specified time period."
  },
  {
    "question": "Find [products] that have been on sale for the longest.",
    "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;",
    "answer": "Returns the products that have been on sale for the longest time."
  },
  {
    "question": "Identify [products] that have been out of stock for more than [time_period].",
    "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Returns products that have been out of stock for more than the specified time period."
  },
  {
    "question": "What is the total [revenue/cost] for the [time_period]?",
    "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Returns the total revenue or cost for the specified time period."
  },
  {
    "question": "Find the [expenses] for a given [time_period] and categorize them.",
    "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;",
    "answer": "Returns the expenses for a given time period, categorized by type."
  },
  {
    "question": "Identify the top [N] highest revenue-generating [items/products].",
    "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;",
    "answer": "Returns the top N highest revenue-generating items or products."
  },
  {
    "question": "What is the total amount of [pending/unpaid] [invoices/orders]?",
    "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';",
    "answer": "Returns the total amount of pending or unpaid invoices or orders."
  },
  {
    "question": "What is the total [discount/bonus] given over the last [time_period]?",
    "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Returns the total discount or bonus given over the last specified time period."
  },
  {
    "question": "Compare [revenue/cost] against [expenses/other_metric] for the given [time_period].",
    "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Returns a comparison of revenue or cost against expenses or another metric for the given time period."
  },

  {
    "question": "Identify the top-performing keywords/ad_copy for PPC_campaign.",
    "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;",
    "answer": "Returns the top-performing keywords and ad copy for a specific PPC campaign."
  },
  {
    "question": "List all orders/transactions with suspicious billing_address/payment_method.",
    "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';",
    "answer": "Returns all orders or transactions with suspicious billing addresses or payment methods."
  },
  {
    "question": "Find customers/users who have not updated their contact_info in the last time period.",
    "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';",
    "answer": "Returns customers or users who have not updated their contact information in the specified time period."
  },
  {
    "question": "Identify products/services that are not compliant with safety/quality standards.",
    "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';",
    "answer": "Returns products or services that are not compliant with safety or quality standards."
  },
  {
    "question": "What are the flagged transactions/orders based on fraud_detection_rule?",
    "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;",
    "answer": "Returns transactions or orders that have been flagged based on fraud detection rules."
  },
  {
    "question": "Find all employees overdue for mandatory training/certification.",
    "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';",
    "answer": "Returns employees who are overdue for mandatory training or certification."
  },
  {
    "question": "Find records with missing data in critical fields like [field_name].",
    "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;",
    "answer": "Returns records with missing data in critical fields."
  },
  {
    "question": "What is the percentage of incomplete records in [table_name]?",
    "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];",
    "answer": "Returns the percentage of incomplete records in the specified table."
  },
  {
    "question": "List all products/services with no description or incomplete details.",
    "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';",
    "answer": "Returns all products or services with no description or incomplete details."
  },
  {
    "question": "Check for inconsistent data across different fields/columns (e.g., date formats).",
    "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];",
    "answer": "Returns records with inconsistent data across different fields or columns."
  },
  {
    "question": "Find records that failed validation/checks.",
    "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';",
    "answer": "Returns records that failed validation or checks."
  },
  {
    "question": "Compare metric1 in current_period to metric2 in previous_period.",
    "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;",
    "answer": "Returns a comparison of metric1 in the current period to metric2 in the previous period."
  },
  {
    "question": "How do metrics compare month-to-month (e.g., sales, expenses)?",
    "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;",
    "answer": "Returns a month-to-month comparison of metrics such as sales and expenses."
  },
  {
    "question": "Compare employee performance based on metric1 vs metric2.",
    "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;",
    "answer": "Returns a comparison of employee performance based on metric1 and metric2."
  },
  {
    "question": "Compare product1 vs product2 in terms of sales/returns.",
    "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;",
    "answer": "Returns a comparison of product1 and product2 in terms of sales and returns."
  },
  {
    "question": "Find the growth rate between two periods for metric.",
    "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];",
    "answer": "Returns the growth rate between two periods for a specified metric."
  },
  {
    "question": "Find the average rating for [product_name].",
    "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';",
    "answer": "Returns the average rating for a specified product."
  },
  {
    "question": "List all products with a rating below X stars.",
    "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];",
    "answer": "Returns all products with a rating below a specified number of stars."
  },
  {
    "question": "Find all reviews for [product_name].",
    "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';",
    "answer": "Returns all reviews for a specified product."
  },
  {
    "question": "How does customer feedback correlate with returns/complaints?",
    "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;",
    "answer": "Returns the correlation between customer feedback and returns or complaints."
  },
  {
    "question": "Identify products with the highest customer satisfaction ratings.",
    "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;",
    "answer": "Returns the products with the highest customer satisfaction ratings."
  },
  {
    "question": "What percentage of orders were shipped late in [time_period]?",
    "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';",
    "answer": "Returns the percentage of orders that were shipped late in a specified time period."
  },
  {
    "question": "Find all orders that were shipped within [X] days of placement.",
    "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';",
    "answer": "Returns all orders that were shipped within a specified number of days of placement."
  },
  {
    "question": "Identify the average shipping cost/processing time per order.",
    "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;",
    "answer": "Returns the average shipping cost and processing time per order."
  },
  {
    "question": "List all orders that require expedited/overnight shipping.",
    "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');",
    "answer": "Returns all orders that require expedited or overnight shipping."
  },
  {
    "question": "Find orders that have been canceled after shipment.",
    "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;",
    "answer": "Returns all orders that have been canceled after shipment."
  },
  {
    "question": "Find all users who have logged in within the last [X] days.",
    "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';",
    "answer": "Returns all users who have logged in within the last specified number of days."
  },
  {
    "question": "What is the churn rate of [users/customers] within the last [time_period]?",
    "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;",
    "answer": "Returns the churn rate of users or customers within the last specified time period."
  },
  {
    "question": "Find users who have not made a purchase after their first visit in [time_period].",
    "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;",
    "answer": "Returns users who have not made a purchase after their first visit in the specified time period."
  },
  {
    "question": "Identify users with the highest lifetime value (LTV).",
    "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;",
    "answer": "Returns the users with the highest lifetime value."
  },
  {
    "question": "Find the top [N] users based on purchase frequency.",
    "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];",
    "answer": "Returns the top N users based on purchase frequency."
  },
  {
    "question": "How many rows are there in the {table_name} table?",
    "query": "SELECT COUNT(*) AS total_records FROM {table_name};",
    "answer": "Provides the total number of rows in the {table_name} table."
  },
  {
    "question": "Retrieve all data from the {table_name} table.",
    "query": "SELECT * FROM {table_name};",
    "answer": "Fetches all rows and columns from the {table_name} table."
  },
  {
    "question": "What unique values exist in the {column_name} column of the {table_name} table?",
    "query": "SELECT DISTINCT {column_name} FROM {table_name};",
    "answer": "Lists all distinct values in the {column_name} column of the {table_name} table."
  },
  {
    "question": "Find all rows where {column_name} equals '{value}'.",
    "query": "SELECT * FROM {table_name} WHERE {column_name} = '{value}';",
    "answer": "Returns all rows where {column_name} is equal to {value}."
  },
  {
    "question": "What are the average, maximum, and minimum values of {column_name} in {table_name}?",
    "query": "SELECT AVG({column_name}) AS average_value, MAX({column_name}) AS maximum_value, MIN({column_name}) AS minimum_value FROM {table_name};",
    "answer": "Provides the average, maximum, and minimum values of {column_name} in the {table_name} table."
  },
  {
    "question": "How many rows have {column_name} greater than {value}?",
    "query": "SELECT COUNT(*) AS count_records FROM {table_name} WHERE {column_name} > {value};",
    "answer": "Counts the number of rows where {column_name} is greater than {value}."
  },
  {
    "question": "What is the sum of [column_name] grouped by [grouping_column] in [table_name]?",
    "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];",
    "answer": "Calculates the total sum of [column_name], grouped by [grouping_column]."
  },
  {
    "question": "How many rows exist for each [grouping_column] in [table_name]?",
    "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];",
    "answer": "Counts the number of rows for each unique value in [grouping_column]."
  },
  {
    "question": "Show the top 5 [grouping_column]s with the highest total [column_name].",
    "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;",
    "answer": "Lists the top 5 [grouping_column]s with the highest total sum of [column_name]."
  },
  {
    "question": "What is the percentage distribution of [column_name] grouped by [grouping_column]?",
    "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];",
    "answer": "Shows the percentage distribution of [column_name] for each unique value of [grouping_column]."
  },
  {
    "question": "Show the top 10 highest/lowest [column_name] values from [table_name].",
    "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; For lowest values, change DESC to ASC",
    "answer": "Lists the top 10 records with the highest values in [column_name]. Use ASC for the lowest values."
  },
  {
    "question": "Find all rows where [column_name] contains 'value'.",
    "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';",
    "answer": "Returns all rows where [column_name] contains the substring 'value'."
  },
  {
    "question": "List rows where [column_name] is between [value1] and [value2].",
    "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];",
    "answer": "Shows all rows where [column_name] is within the range of [value1] and [value2]."
  },
  {
    "question": "Sort the [table_name] table by [column_name] in descending order.",
    "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;",
    "answer": "Sorts all rows from [table_name] by [column_name] in descending order."
  },
  {
    "question": "Combine data from [table1] and [table2] based on [common_column].",
    "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];",
    "answer": "Combines data from [table1] and [table2] where [common_column] matches in both tables."
  },
  {
    "question": "Find all rows in [table1] that have no matching rows in [table2].",
    "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;",
    "answer": "Lists all rows from [table1] that do not have matching rows in [table2]."
  },
  {
    "question": "What is the total [column_name] from [table1] grouped by [table2.column_name]?",
    "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];",
    "answer": "Calculates the total sum of [column_name] from [table1], grouped by [table2].[column_name]."
  },
  {
    "question": "Get the details of [table1] and include matching rows from [table2].",
    "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];",
    "answer": "Fetches all columns from both [table1] and [table2] for matching rows based on [common_column]."
  },
  {
    "question": "Combine data from [table1], [table2], and [table3] where [table1.column_name] = [table2.column_name] and [table2.column_name] = [table3.column_name], and filter for rows where [table1.date] is greater than '2023-01-01'.",
    "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';",
    "answer": "Combines data from [table1], [table2], and [table3] where the join condition is met, and the date in [table1] is greater than '2023-01-01'."
  },
  {
    "question": "Get the total [column_name] from [table1], where rows are joined with [table2] and [table3], grouped by [table3.column_name], and filter for rows where [table2.column_name] = 'value' and [table1.date] is in the last 30 days.",
    "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];",
    "answer": "Calculates the total sum of [column_name] from [table1], grouped by [table3.column_name], filtered by [table2.column_name] = 'value' and [table1.date] within the last 30 days."
  },
  {
    "question": "Find all rows from [table1] with their corresponding rows from [table2] and [table3], where [table1.column_name] > [value], [table2.column_name] = 'active', and sort the results by [table3.column_name] in ascending order.",
    "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;",
    "answer": "Lists all columns from [table1], [table2], and [table3] based on the specified filter conditions and ordered by [table3.column_name] in ascending order."
  },
  {
    "question": "Calculate the total [column_name] from [table1] grouped by [table2.column_name], filter for rows where [table2.status] = 'approved' and [table1.date] is between '2023-01-01' and '2023-12-31', and include a count of rows for each group.",
    "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];",
    "answer": "Calculates the total sum and count of [column_name] from [table1], grouped by [table2.column_name], filtered by the status 'approved' and the date range in 2023."
  },
  {
    "question": "Find all rows added or updated in the last 7 days.",
    "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';",
    "answer": "Lists all rows from [table_name] that were added or updated in the last 7 days, assuming the presence of an [updated_at] column."
  },
  {
    "question": "What is the monthly or yearly total of [column_name] from [table_name]?",
    "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;",
    "answer": "Calculates the total sum of [column_name] for each month, grouped by [date_column]."
  },
  {
    "question": "Show trends in [column_name] grouped by [time_column].",
    "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];",
    "answer": "Displays the trend of [column_name] over time, grouped by [time_column] (e.g., day, month, year)."
  },
  {
    "question": "What is the earliest or latest [column_name] in [table_name]?",
    "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];",
    "answer": "Provides the earliest value in [column_name] from [table_name]."
  },
  {
    "question": "What is the standard deviation of [column_name] in [table_name]?",
    "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];",
    "answer": "Calculates the standard deviation of [column_name] from [table_name]."
  },
  {
    "question": "Show the distribution (histogram-like data) of [column_name].",
    "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;",
    "answer": "Displays the distribution of values in [column_name], showing how often each value appears."
  },
  {
    "question": "Which [column_name] value appears most frequently in [table_name]?",
    "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;",
    "answer": "Identifies the most frequent value of [column_name] from [table_name]."
  },
  {
    "question": "What is the correlation between [column_name1] and [column_name2] in [table_name]?",
    "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];",
    "answer": "Calculates the Pearson correlation coefficient between [column_name1] and [column_name2] in [table_name]."
  },
  {
    "question": "Calculate the variance of [column_name] for rows where [column_name2] is greater than [value].",
    "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];",
    "answer": "Computes the variance of [column_name] from rows where [column_name2] exceeds a certain value."
  },
  {
    "question": "Show the average, minimum, and maximum values of [column_name] by [category_column] in [table_name].",
    "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];",
    "answer": "Provides the average, minimum, and maximum values of [column_name], grouped by [category_column]."
  },
  {
    "question": "What is the median value of [column_name] in [table_name]?",
    "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];",
    "answer": "Calculates the median value of [column_name] from [table_name]."
  },
  {
    "question": "Calculate the moving average of [column_name] for the last 30 days, grouped by [category_column].",
    "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];",
    "answer": "Computes the moving average of [column_name] for the last 30 days, grouped by [category_column]."
  },
  {
    "question": "Find the skewness of [column_name] in [table_name].",
    "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];",
    "answer": "Calculates the skewness of [column_name], which measures the asymmetry of the data distribution."
  },
  {
    "question": "Show the cumulative sum of [column_name] by [category_column] over time, ordered by [date_column].",
    "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];",
    "answer": "Displays the cumulative sum of [column_name], grouped by [category_column], and ordered by [date_column]."
  },
  {
    "question": "Calculate the interquartile range (IQR) of [column_name] in [table_name].",
    "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];",
    "answer": "Computes the interquartile range (IQR) of [column_name] in [table_name]."
  },
  {
    "question": "Find the ratio of [column_name1] to [column_name2] for each row and filter for rows where the ratio is greater than [value].",
    "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];",
    "answer": "Calculates the ratio of [column_name1] to [column_name2] and filters for rows where the ratio exceeds a certain value."
  },
  {
    "question": "Show the rolling sum of [column_name] over the last 5 rows, ordered by [date_column].",
    "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];",
    "answer": "Displays the rolling sum of [column_name] over the last 5 rows, ordered by [date_column]."
  },
  {
    "question": "Calculate the percentile rank of [column_name] in [table_name] for each row.",
    "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];",
    "answer": "Computes the percentile rank of [column_name] for each row in [table_name]."
  },
  {
    "question": "Add a new entry to [table_name] with values for [column1] and [column2].",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);",
    "answer": "Adds a new entry with specified values for [column1] and [column2] into [table_name]."
  },
  {
    "question": "Modify [column_name] to [new_value] where [condition] is met.",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];",
    "answer": "Modifies the value of [column_name] to [new_value] for records that meet the [condition]."
  },
  {
    "question": "Remove entries from [table_name] where [condition] is true.",
    "query": "DELETE FROM [table_name] WHERE [condition];",
    "answer": "Removes entries from [table_name] where the [condition] is true."
  },
  {
    "question": "Create a new table [new_table_name] with specified columns [column1, column2, ...].",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);",
    "answer": "Creates a new table named [new_table_name] with the specified columns and data types."
  },
  {
    "question": "Add multiple entries to [table_name].",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);",
    "answer": "Adds multiple entries to [table_name] with specified values for [column1] and [column2]."
  },
  {
    "question": "Modify multiple columns in [table_name] where [condition] is met.",
    "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];",
    "answer": "Modifies multiple columns ([column1] and [column2]) with new values where the [condition] is met."
  },
  {
    "question": "Create a table with constraints like primary key, unique, and not null.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);",
    "answer": "Creates a new table with primary key, unique, and not null constraints."
  },
  {
    "question": "Add an entry with a default value for a column.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);",
    "answer": "Adds a new entry into [table_name], with [column2] using its default value."
  },
  {
    "question": "Set a column to NULL for records where [condition] is met.",
    "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];",
    "answer": "Sets [column_name] to NULL for records in [table_name] where the [condition] is met."
  },
  {
    "question": "Create a table with a foreign key reference to another table.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));",
    "answer": "Creates a new table with a foreign key referencing another table's column."
  },
  {
    "question": "Insert data from one table into another based on a condition.",
    "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];",
    "answer": "Inserts data from [table_name1] into [table_name2] based on a condition."
  },
  {
    "question": "Increase or decrease a column's value for records where [condition] is met.",
    "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];",
    "answer": "Increases the value of [column_name] by [value] for records matching [condition]."
  },
  {
    "question": "Remove all entries from [table_name].",
    "query": "DELETE FROM [table_name];",
    "answer": "Removes all entries from [table_name] but does not drop the table."
  },
  {
    "question": "Remove a table from the database.",
    "query": "DROP TABLE [table_name];",
    "answer": "Removes the entire table from the database, including its structure and data."
  },
  {
    "question": "Add a new column to an existing table.",
    "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];",
    "answer": "Adds a new column to an existing table."
  },
  {
    "question": "Change the data type of an existing column in a table.",
    "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];",
    "answer": "Changes the data type of an existing column in the table."
  },
  {
    "question": "Remove a column from an existing table.",
    "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];",
    "answer": "Removes a column from an existing table."
  },
  {
    "question": "Create a new table with a composite primary key.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));",
    "answer": "Creates a new table with a composite primary key consisting of [column1] and [column2]."
  },
  {
    "question": "Insert data using a subquery to fetch values from another table.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];",
    "answer": "Inserts data into [table_name] by selecting values from another table ([other_table]) based on a condition."
  },
  {
    "question": "Remove all entries from a table but keep its structure.",
    "query": "TRUNCATE TABLE [table_name];",
    "answer": "Removes all entries from [table_name] but preserves its structure and schema."
  },
  {
    "question": "Add a new entry with default values for all columns.",
    "query": "INSERT INTO [table_name] DEFAULT VALUES;",
    "answer": "Adds a new entry with the default values defined for the columns in the table."
  },
  {
    "question": "Update multiple rows where [column_name] equals [old_value] and set it to [new_value].",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];",
    "answer": "Updates all records where [column_name] equals [old_value] and sets it to [new_value]."
  },
  {
    "question": "Update a specific record where the primary key [id] equals [value].",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];",
    "answer": "Updates the value of [column_name] for the record with primary key [id] equal to [value]."
  },
  {
    "question": "Remove all entries where [column_name] is NULL.",
    "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;",
    "answer": "Removes entries where [column_name] is NULL."
  },
  {
    "question": "Create a table with a column that references another table’s primary key.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));",
    "answer": "Creates a table with a foreign key that references a primary key in another table."
  },
  {
    "question": "Update [column_name] to [value] for rows where [column_name] is greater than [value].",
    "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];",
    "answer": "Updates [column_name] to [value] for records where [column_name] is greater than the specified value."
  },
  {
    "question": "Remove entries where [column_name] is less than [value].",
    "query": "DELETE FROM [table_name] WHERE [column_name] < [value];",
    "answer": "Removes entries where the value of [column_name] is less than the specified value."
  },
  {
    "question": "Create a new table with a unique constraint on a column.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);",
    "answer": "Creates a new table with a unique constraint on [column1]."
  },
  {
    "question": "Add a NOT NULL constraint to an existing column.",
    "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;",
    "answer": "Adds a NOT NULL constraint to an existing column in the table."
  },
  {
    "question": "Insert data where a column is calculated by combining values from two columns.",
    "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);",
    "answer": "Adds a new entry and calculates [column3] as the combination of [value1] and [value2]."
  },
  {
    "question": "Set a column value to the average value of that column.",
    "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);",
    "answer": "Sets [column_name] to its average value for all records in [table_name]."
  },
  {
    "question": "Create a new table with a timestamp column.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);",
    "answer": "Creates a new table and automatically inserts the current timestamp into [created_at] when a new entry is added."
  },
  {
    "question": "Insert data based on a condition from another table using a subquery.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];",
    "answer": "Adds data into [table_name] from [other_table], where [column3] is greater than [value]."
  },
  {
    "question": "Remove duplicate rows based on [column_name], keeping only the first occurrence.",
    "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);",
    "answer": "Removes duplicate rows in [table_name] based on [column_name], keeping the first occurrence."
  },
  {
    "question": "Add a new entry and use a subquery for one of the column values.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));",
    "answer": "Adds a new entry into [table_name], where [column2] is set by a subquery fetching data from [other_table]."
  },
  {
    "question": "Create a new table with a composite foreign key referencing multiple columns from another table.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));",
    "answer": "Creates a new table with a composite foreign key referencing multiple columns from [referenced_table]."
  },
  {
    "question": "Update records by setting a column value based on a condition using a CASE statement.",
    "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];",
    "answer": "Updates records in [table_name], setting [column_name] to 'High' or 'Low' based on the value comparison."
  },
  {
    "question": "Add a unique constraint to multiple columns in a table.",
    "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);",
    "answer": "Adds a unique constraint on [column1] and [column2] in [table_name]."
  },
  {
    "question": "Create a view to aggregate data from a table.",
    "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];",
    "answer": "Creates a view that aggregates data by counting [column2] grouped by [column1]."
  },
  {
    "question": "Set up a trigger to automatically update a timestamp column when a row is modified.",
    "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();",
    "answer": "Creates a trigger that updates the [timestamp_column] whenever a row in [table_name] is modified."
  },
  {
    "question": "Clear a table and reset its auto-increment column.",
    "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;",
    "answer": "Clears all records from [table_name] and resets the auto-increment column."
  },
  {
    "question": "Remove records older than a certain date.",
    "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';",
    "answer": "Deletes records from [table_name] where [date_column] is older than the specified date."
  },
  {
    "question": "Insert a record into [table_name] using data from another table.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';",
    "answer": "Inserts data into [table_name] based on a select query from [other_table]."
  },
  {
    "question": "Add a constraint to ensure a column's values are within a specific range.",
    "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);",
    "answer": "Adds a check constraint to ensure values in [column_name] are between 0 and 100."
  },
  {
    "question": "Delete duplicate records from [table_name] based on a column.",
    "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);",
    "answer": "Deletes duplicate records from [table_name], keeping the first occurrence based on [column_name]."
  },
  {
    "question": "List the triggers defined on the [table_name] table.",
    "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';",
    "answer": "Returns the triggers defined on the specified table."
  },
  {
    "question": "Show all stored procedures in the database.",
    "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';",
    "answer": "Returns all stored procedures in the public schema."
  },
  {
    "question": "What is the schema of the [table_name] table?",
    "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';",
    "answer": "Returns the schema of the specified table."
  },
  {
    "question": "Show the foreign key relationships of [table_name] with other tables.",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Returns the foreign key relationships of the specified table with other tables."
  },
  {
    "question": "Which columns in [table_name] have indexes?",
    "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Returns the columns that have indexes in the specified table."
  },
  {
    "question": "What is the size of the indexes in the database?",
    "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));",
    "answer": "Returns the size of the indexes in the specified table (PostgreSQL)."
  },
  {
    "question": "How many indexes are there on [table_name]?",
    "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Returns the number of indexes on the specified table."
  },
  {
    "question": "Show all index definitions in the database.",
    "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';",
    "answer": "Returns all index definitions in the specified schema."
  },
  {
    "question": "What types of indexes are used on [table_name]?",
    "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Returns the types of indexes used on the specified table."
  },
  {
    "question": "What are the names of the indexes on the [table_name] table?",
    "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Returns the names of the indexes on the specified table."
  },
  {
    "question": "Are there any composite indexes on [table_name]? If so, which columns are included?",
    "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;",
    "answer": "Returns the composite indexes on the specified table and the columns included in each."
  },
  {
    "question": "Show the index creation scripts for [table_name].",
    "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;",
    "answer": "Returns the index creation scripts for the specified table (PostgreSQL)."
  },
  {
    "question": "What foreign keys exist between [table_name] and other tables?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Returns the foreign keys between the specified table and other tables."
  },
  {
    "question": "How many foreign key constraints are there in [table_name]?",
    "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;",
    "answer": "Returns the number of foreign key constraints in the specified table."
  },
  {
    "question": "What is the referential integrity rule for the foreign keys in [table_name]?",
    "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');",
    "answer": "Returns the referential integrity rules for the foreign keys in the specified table."
  },
  {
    "question": "List all parent tables for foreign keys in [table_name].",
    "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;",
    "answer": "Returns all parent tables for foreign keys in the specified table."
  },
  {
    "question": "List all child tables that reference [table_name] via foreign keys.",
    "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';",
    "answer": "Returns all child tables that reference the specified table via foreign keys."
  },
  {
    "question": "List all constraints on the [table_name] table.",
    "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';",
    "answer": "Returns all constraints on the specified table."
  },
  {
    "question": "Are there any foreign key violations in [table_name]? If so, list them.",
    "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);",
    "answer": "Returns any foreign key violations in the specified table."
  },
  {
    "question": "Show the unique constraints on the [table_name] table.",
    "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';",
    "answer": "Returns the unique constraints on the specified table."
  },
  {
    "question": "List all check constraints in the database.",
    "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';",
    "answer": "Returns all check constraints in the specified schema."
  },
  {
    "question": "What are the columns involved in primary key constraints for [table_name]?",
    "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');",
    "answer": "Returns the columns involved in primary key constraints for the specified table."
  },
  {
    "question": "What views depend on [table_name]?",
    "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';",
    "answer": "Returns the views that depend on the specified table."
  },
  {
    "question": "Show the data types of the columns in [table_name].",
    "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "Returns the data types of the columns in the specified table."
  },
  {
    "question": "What is the most common product or behavior combination by users or customers?",
    "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;",
    "answer": "Returns the most common product or behavior combination by users or customers."
  },
  {
    "question": "Find all users or customers who have provided feedback in the last time period.",
    "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Returns all users or customers who have provided feedback in the last specified time period."
  },
  {
    "question": "Find products or records that are low in stock.",
    "query": "SELECT * FROM products WHERE stock_quantity < [threshold];",
    "answer": "Returns products or records that are low in stock."
  },
  {
    "question": "List all products that haven’t been sold in the last time period.",
    "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);",
    "answer": "Returns all products that haven’t been sold in the last specified time period."
  },
  {
    "question": "Find the products with the highest return or complaint rate.",
    "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;",
    "answer": "Returns the products with the highest return or complaint rate."
  },
  {
    "question": "What are the top-selling products in the last time period?",
    "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;",
    "answer": "Returns the top-selling products in the last specified time period."
  },
  {
    "question": "Find products that have been on sale for the longest time.",
    "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;",
    "answer": "Returns the products that have been on sale for the longest time."
  },
  {
    "question": "Identify products that have been out of stock for more than a specified time period.",
    "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Returns products that have been out of stock for more than the specified time period."
  },
  {
    "question": "What is the total revenue or cost for the specified time period?",
    "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Returns the total revenue or cost for the specified time period."
  },
  {
    "question": "Find the expenses for a given time period and categorize them.",
    "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;",
    "answer": "Returns the expenses for a given time period, categorized by type."
  },
  {
    "question": "Identify the top N highest revenue-generating items or products.",
    "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;",
    "answer": "Returns the top N highest revenue-generating items or products."
  },
  {
    "question": "What is the total amount of pending or unpaid invoices or orders?",
    "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';",
    "answer": "Returns the total amount of pending or unpaid invoices or orders."
  },
  {
    "question": "What is the total amount of discounts or bonuses given in the last [time_period]?",
    "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Calculates the total discounts or bonuses provided in the specified time period."
  },
  {
    "question": "How does revenue compare to expenses for the given [time_period]?",
    "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Compares revenue to expenses for the specified time period."
  },
  {
    "question": "What are the top-performing keywords and ad copies for a PPC campaign?",
    "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;",
    "answer": "Identifies the best-performing keywords and ad copies for a specific PPC campaign."
  },
  {
    "question": "List orders or transactions with suspicious billing addresses or payment methods.",
    "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';",
    "answer": "Finds orders or transactions with potentially fraudulent billing addresses or payment methods."
  },
  {
    "question": "Which customers or users have not updated their contact information in the last [time_period]?",
    "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';",
    "answer": "Lists customers or users who have not updated their contact information within the specified time period."
  },
  {
    "question": "Identify products or services that do not meet safety or quality standards.",
    "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';",
    "answer": "Finds products or services that fail to meet safety or quality standards."
  },
  {
    "question": "What transactions or orders have been flagged for potential fraud?",
    "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;",
    "answer": "Lists transactions or orders flagged for potential fraud."
  },
  {
    "question": "Which employees are overdue for mandatory training or certification?",
    "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';",
    "answer": "Identifies employees who are overdue for required training or certification."
  },
  {
    "question": "Find records with missing data in critical fields.",
    "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;",
    "answer": "Lists records with missing data in important fields."
  },
  {
    "question": "Identify duplicate entries in the customer or product database.",
    "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;",
    "answer": "Finds duplicate entries in the customer or product database."
  },
  {
    "question": "What percentage of records in [table_name] are incomplete?",
    "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];",
    "answer": "Calculates the percentage of incomplete records in the specified table."
  },
  {
    "question": "List products or services with missing or incomplete descriptions.",
    "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';",
    "answer": "Finds products or services with missing or incomplete descriptions."
  },
  {
    "question": "Check for inconsistent data across different fields or columns.",
    "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];",
    "answer": "Identifies records with inconsistent data across fields or columns."
  },
  {
    "question": "Find records that failed validation checks.",
    "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';",
    "answer": "Lists records that did not pass validation checks."
  },
  {
    "question": "Compare metric1 in the current period to metric2 in the previous period.",
    "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;",
    "answer": "Compares metric1 in the current period to metric2 in the previous period."
  },
  {
    "question": "How do metrics like sales and expenses compare month-to-month?",
    "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;",
    "answer": "Provides a month-to-month comparison of metrics such as sales and expenses."
  },
  {
    "question": "Compare employee performance based on two metrics.",
    "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;",
    "answer": "Compares employee performance based on two specified metrics."
  },
  {
    "question": "Compare sales and returns for two products.",
    "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;",
    "answer": "Compares sales and returns for two specified products."
  },
  {
    "question": "What is the growth rate of a metric between two periods?",
    "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];",
    "answer": "Calculates the growth rate of a metric between two periods."
  },
  {
    "question": "What is the average rating for a product?",
    "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';",
    "answer": "Finds the average rating for a specified product."
  },
  {
    "question": "List products with ratings below a certain threshold.",
    "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];",
    "answer": "Identifies products with ratings below a specified threshold."
  },
  {
    "question": "Find all reviews for a specific product.",
    "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';",
    "answer": "Lists all reviews for a specified product."
  },
  {
    "question": "How does customer feedback correlate with returns or complaints?",
    "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;",
    "answer": "Analyzes the correlation between customer feedback and returns or complaints."
  },
  {
    "question": "Which products have the highest customer satisfaction ratings?",
    "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;",
    "answer": "Identifies products with the highest customer satisfaction ratings."
  },
  {
    "question": "What percentage of orders were shipped late in a given time period?",
    "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';",
    "answer": "Calculates the percentage of orders shipped late in a specified time period."
  },
  {
    "question": "Find orders shipped within a certain number of days after placement.",
    "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';",
    "answer": "Lists orders shipped within a specified number of days after placement."
  },
  {
    "question": "What is the average shipping cost and processing time per order?",
    "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;",
    "answer": "Calculates the average shipping cost and processing time per order."
  },
  {
    "question": "List orders requiring expedited or overnight shipping.",
    "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');",
    "answer": "Identifies orders that require expedited or overnight shipping."
  },
  {
    "question": "Find orders canceled after shipment.",
    "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;",
    "answer": "Lists orders that were canceled after shipment."
  },
  {
    "question": "Which users have logged in within the last [X] days?",
    "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';",
    "answer": "Finds users who have logged in within the last specified number of days."
  },
  {
    "question": "What is the churn rate of users or customers in the last [time_period]?",
    "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;",
    "answer": "Calculates the churn rate of users or customers in the specified time period."
  },
  {
    "question": "Find users who have not made a purchase after their first visit in [time_period].",
    "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;",
    "answer": "Identifies users who have not made a purchase after their first visit in the specified time period."
  },
  {
    "question": "Which users have the highest lifetime value (LTV)?",
    "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;",
    "answer": "Finds users with the highest lifetime value."
  },
  {
    "question": "Who are the top [N] users based on purchase frequency?",
    "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];",
    "answer": "Lists the top N users based on how frequently they make purchases."
  },
  {
    "question": "What is the average time between a user's first visit and first purchase?",
    "query": "SELECT AVG(DATEDIFF('day', first_visit_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(visit_date) AS first_visit_date, MIN(purchase_date) AS first_purchase_date FROM visits JOIN purchases ON visits.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;",
    "answer": "Calculates the average time between a user's first visit and first purchase."
  },
  {
    "question": "List users who have not logged in or visited the site in the last [X] days.",
    "query": "SELECT user_id, username, last_login FROM users WHERE last_login < CURRENT_DATE - INTERVAL '[X] days';",
    "answer": "Identifies users who have not logged in or visited the site in the specified number of days."
  },
  {
    "question": "What is the average session duration for users in the last [time_period]?",
    "query": "SELECT AVG(session_duration) AS avg_session_duration FROM user_sessions WHERE session_date >= CURRENT_DATE - INTERVAL '[time_period]';",
    "answer": "Calculates the average session duration for users in the specified time period."
  },
  {
    "question": "Find users who have abandoned their shopping carts.",
    "query": "SELECT user_id, cart_id, abandoned_date FROM shopping_carts WHERE abandoned_date IS NOT NULL;",
    "answer": "Lists users who have abandoned their shopping carts."
  },
  {
    "question": "Which users have the highest engagement or activity levels?",
    "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;",
    "answer": "Identifies users with the highest engagement or activity levels."
  },
  {
    "question": "What is the average number of orders per user in the last [time_period]?",
    "query": "SELECT AVG(order_count) AS avg_orders_per_user FROM (SELECT user_id, COUNT(*) AS order_count FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_orders;",
    "answer": "Calculates the average number of orders per user in the specified time period."
  },
  {
    "question": "List users who have not completed the onboarding process.",
    "query": "SELECT user_id, username FROM users WHERE onboarding_complete = false;",
    "answer": "Identifies users who have not completed the onboarding process."
  },
  {
    "question": "Which users have the highest referral rates?",
    "query": "SELECT user_id, COUNT(*) AS referral_count FROM referrals GROUP BY user_id ORDER BY referral_count DESC LIMIT 1;",
    "answer": "Finds users with the highest referral rates."
  },
  {
    "question": "What is the average time between user sign-up and first purchase?",
    "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;",
    "answer": "Calculates the average time between user sign-up and first purchase."
  },
  {
    "question": "Find users who have not completed a specific action or task.",
    "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_actions WHERE action_completed = true AND action_type = '[specific_action]');",
    "answer": "Lists users who have not completed a specific action or task."
  },
  {
    "question": "Which users have the highest retention rates?",
    "query": "SELECT user_id, (COUNT(DISTINCT purchase_date) * 100.0) / COUNT(DISTINCT visit_date) AS retention_rate FROM user_activity GROUP BY user_id ORDER BY retention_rate DESC LIMIT 1;",
    "answer": "Finds users with the highest retention rates."
  },
  {
    "question": "What is the average time between user visits to the site?",
    "query": "SELECT AVG(DATEDIFF('day', LAG(visit_date) OVER (PARTITION BY user_id ORDER BY visit_date), visit_date)) AS avg_time_between_visits FROM user_visits;",
    "answer": "Calculates the average time between user visits to the site."
  },
  {
    "question": "List users who have not interacted with the platform in the last [X] days.",
    "query": "SELECT user_id, username FROM users WHERE last_interaction_date < CURRENT_DATE - INTERVAL '[X] days';",
    "answer": "Identifies users who have not interacted with the platform in the specified number of days."
  },
  {
    "question": "Which users have the highest customer satisfaction ratings?",
    "query": "SELECT user_id, AVG(rating) AS avg_rating FROM user_reviews GROUP BY user_id ORDER BY avg_rating DESC LIMIT 1;",
    "answer": "Finds users with the highest customer satisfaction ratings."
  },
  {
    "question": "What is the average number of support tickets per user in the last [time_period]?",
    "query": "SELECT AVG(ticket_count) AS avg_tickets_per_user FROM (SELECT user_id, COUNT(*) AS ticket_count FROM support_tickets WHERE ticket_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_tickets;",
    "answer": "Calculates the average number of support tickets per user in the specified time period."
  },
  {
    "question": "Find users who have not completed a specific training or certification.",
    "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_certifications WHERE certification_completed = true AND certification_type = '[specific_certification]');",
    "answer": "Lists users who have not completed a specific training or certification."
  },
  {
    "question": "Which users have the highest engagement or activity levels?",
    "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;",
    "answer": "Identifies users with the highest engagement or activity levels."
  },
  {
    "question": "What is the average time between user sign-up and first purchase?",
    "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;",
    "answer": "Calculates the average time between user sign-up and first purchase."
  },
  {
    "question": "Find all tables in the database.",
    "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';",
    "answer": "Lists all tables in the public schema."
  },
  {
    "question": "Find all created tables in the database.",
    "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';",
    "answer": "Lists all created tables in the public schema."
  },
  {
    "question": "Show the columns of a specific table.",
    "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "Returns the columns and data types of the specified table."
  },
  {
    "question": "List all columns in the database.",
    "query": "SELECT table_name, column_name, data_type FROM information_schema.columns WHERE table_schema = 'public';",
    "answer": "Returns all columns in the public schema."
  },
  {
    "question": "Show the primary key of a table.",
    "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = 'PRIMARY';",
    "answer": "Returns the primary key column of the specified table."
  },
  {
    "question": "List all primary keys in the database.",
    "query": "SELECT table_name, column_name FROM information_schema.key_column_usage WHERE table_schema = 'public' AND constraint_name = 'PRIMARY';",
    "answer": "Returns all primary keys in the public schema."
  },
  {
    "question": "Show the foreign keys of a table.",
    "query": "SELECT kcu.column_name, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Returns the foreign keys of the specified table."
  },
  {
    "question": "List all foreign keys in the database.",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_schema = 'public';",
    "answer": "Returns all foreign keys in the public schema."
  },

  {
    "question": "List all foreign keys in the database.",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "This query retrieves all foreign key relationships across tables in the database."
  },
  {
    "question": "How can I identify relationships between tables in my database?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "It identifies relationships by listing foreign keys and the tables and columns they reference."
  },
  {
    "question": "What query can I use to find foreign key constraints in my database?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "This query provides details of foreign key constraints, including the referencing and referenced tables and columns."
  },
  {
    "question": "How do I get a list of foreign keys in SQL?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "It generates a list of foreign key relationships across all tables in the database."
  },
  {
    "question": "Which tables in my database are linked through foreign keys?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "This query shows the relationships between tables, including the linking columns and referenced tables."
  },
  {
    "question": "{table_name} tablosundaki toplam kayıt sayısı nedir?",
    "query": "SELECT COUNT(*) AS total_records FROM {table_name};",
    "answer": "{table_name} tablosundaki toplam satır sayısını döndürür."
  },
  {
    "question": "{table_name} tablosundaki tüm verileri göster.",
    "query": "SELECT * FROM {table_name};",
    "answer": "{table_name} tablosundaki tüm satır ve sütunları döndürür."
  },
  {
    "question": "{table_name} tablosundaki {column_name} sütunundaki benzersiz değerler nelerdir?",
    "query": "SELECT DISTINCT {column_name} FROM {table_name};",
    "answer": "{table_name} tablosundaki {column_name} sütununda bulunan tüm benzersiz değerleri döndürür."
  },
  {
    "question": "{column_name} = '{value}' olan tüm kayıtları bulun.",
    "query": "SELECT * FROM {table_name} WHERE {column_name} = '{value}';",
    "answer": "{column_name} değeri {value} olan tüm satırları döndürür."
  },
  {
    "question": "{table_name} tablosundaki {column_name} sütununun ortalama, maksimum veya minimum değeri nedir?",
    "query": "SELECT AVG({column_name}) AS average_value, MAX({column_name}) AS maximum_value, MIN({column_name}) AS minimum_value FROM {table_name};",
    "answer": "{table_name} tablosundaki {column_name} sütununun ortalama, maksimum ve minimum değerlerini döndürür."
  },
  {
    "question": "{column_name} > {value} olan kaç kayıt var?",
    "query": "SELECT COUNT(*) AS count_records FROM {table_name} WHERE {column_name} > {value};",
    "answer": "{column_name} değeri {value}'den büyük olan satırların sayısını döndürür."
  },
  {
    "question": "{table_name} tablosunda [grouping_column] ile gruplandırılmış [column_name] toplamı nedir?",
    "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column];",
    "answer": "[grouping_column] ile gruplandırılmış [column_name] toplamını döndürür."
  },
  {
    "question": "{table_name} tablosunda her [grouping_column] için kaç kayıt var?",
    "query": "SELECT [grouping_column], COUNT(*) AS record_count FROM [table_name] GROUP BY [grouping_column];",
    "answer": "[grouping_column] içindeki her benzersiz değer için kayıt sayısını döndürür."
  },
  {
    "question": "En yüksek toplam [column_name] değerine sahip ilk 5 [grouping_column] nedir?",
    "query": "SELECT [grouping_column], SUM([column_name]) AS total_sum FROM [table_name] GROUP BY [grouping_column] ORDER BY total_sum DESC LIMIT 5;",
    "answer": "En yüksek toplam [column_name] değerine sahip ilk 5 [grouping_column]'u döndürür."
  },
  {
    "question": "[column_name] değerinin [grouping_column] ile gruplandırılmış yüzde dağılımı nedir?",
    "query": "SELECT [grouping_column], SUM([column_name]) * 100.0 / (SELECT SUM([column_name]) FROM [table_name]) AS percentage FROM [table_name] GROUP BY [grouping_column];",
    "answer": "[grouping_column] içindeki her benzersiz değer için [column_name] değerinin yüzde dağılımını döndürür."
  },
  {
    "question": "[table_name] tablosundaki en yüksek/en düşük 10 [column_name] değerini göster.",
    "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC LIMIT 10; En düşük değerler için DESC yerine ASC kullanın",
    "answer": "[column_name] içindeki en yüksek değerlere sahip ilk 10 kaydı döndürür. En düşük değerler için ASC kullanın."
  },
  {
    "question": "[column_name] 'value' içeren tüm kayıtları bulun.",
    "query": "SELECT * FROM [table_name] WHERE [column_name] LIKE '%value%';",
    "answer": "[column_name] 'value' alt dizesini içeren tüm kayıtları döndürür."
  },
  {
    "question": "[column_name] değeri [value1] ile [value2] arasında olan kayıtları listeleyin.",
    "query": "SELECT * FROM [table_name] WHERE [column_name] BETWEEN [value1] AND [value2];",
    "answer": "[column_name] değeri [value1] ile [value2] arasında olan tüm kayıtları döndürür."
  },
  {
    "question": "[table_name] tablosunu [column_name] sütununa göre azalan sırada sıralayın.",
    "query": "SELECT * FROM [table_name] ORDER BY [column_name] DESC;",
    "answer": "[table_name] tablosundaki tüm kayıtları [column_name] sütununa göre azalan sırada döndürür."
  },
  {
    "question": "[table1] ve [table2] tablolarını [common_column] sütununa göre birleştirin.",
    "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];",
    "answer": "[table1] ve [table2] tablolarını [common_column] sütununa göre birleştirir."
  },
  {
    "question": "[table1] tablosunda [table2] tablosunda eşleşen kaydı olmayan tüm kayıtları bulun.",
    "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;",
    "answer": "[table1] tablosunda [table2] tablosunda eşleşen kaydı olmayan tüm kayıtları döndürür."
  },
  {
    "question": "[table1] tablosundan [table2.column_name] ile gruplandırılmış toplam [column_name] nedir?",
    "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];",
    "answer": "[table1] tablosundan [table2].[column_name] ile gruplandırılmış toplam [column_name] değerini döndürür."
  },
  {
    "question": "[table1] tablosunun detaylarını ve [table2] tablosundan eşleşen satırları alın.",
    "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];",
    "answer": "[table1] ve [table2] tablolarındaki tüm sütunları, [common_column] sütununa göre eşleşen kayıtlar için döndürür."
  },
  {
    "question": "[table1], [table2] ve [table3] tablolarını birleştirip [table1.date] '2023-01-01' tarihinden büyük olan satırları filtreleyin.",
    "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';",
    "answer": "[table1], [table2] ve [table3] tablolarındaki tüm sütunları, birleştirme koşulu sağlandığında ve [table1].[date] '2023-01-01' tarihinden büyük olduğunda döndürür."
  },
  {
    "question": "[table1], [table2] ve [table3] tablolarından toplam [column_name] değerini alın, [table3.column_name] ile gruplandırın ve [table2.column_name] = 'value' ve [table1.date] son 30 gün içinde olan satırları filtreleyin.",
    "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];",
    "answer": "[table1] tablosundan toplam [column_name] değerini, [table3.column_name] ile gruplandırılmış olarak döndürür, [table2.column_name] = 'value' ve [table1.date] son 30 gün içinde olan satırları filtreler."
  },
  {
    "question": "[table1] tablosundaki tüm kayıtları, [table2] ve [table3] tablolarındaki eşleşen kayıtlarla birlikte bulun, [table1.column_name] > [value], [table2.column_name] = 'active' ve sonuçları [table3.column_name] sütununa göre artan sırada sıralayın.",
    "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;",
    "answer": "[table1], [table2] ve [table3] tablolarındaki tüm sütunları, belirtilen filtre koşullarına göre ve [table3.column_name] sütununa göre artan sırada döndürür."
  },
  {
    "question": "[table1] tablosundan toplam [column_name] değerini hesaplayın, [table2.column_name] ile gruplandırın, [table2.status] = 'approved' ve [table1.date] '2023-01-01' ile '2023-12-31' arasında olan kayıtları filtreleyin ve her grup için kayıt sayısını ekleyin.",
    "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];",
    "answer": "[table1] tablosundan toplam [column_name] ve kayıt sayısını, [table2.column_name] ile gruplandırılmış olarak döndürür, [table2.status] = 'approved' ve [table1.date] '2023' tarih aralığında olan kayıtları filtreler."
  },
  {
    "question": "Son 7 gün içinde eklenen/güncellenen tüm kayıtları bulun.",
    "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';",
    "answer": "[table_name] tablosundaki son 7 gün içinde eklenen veya güncellenen tüm kayıtları döndürür, [updated_at] sütununun var olduğunu varsayar."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin aylık/yıllık toplamı nedir?",
    "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;",
    "answer": "[table_name] tablosundaki [column_name] değerinin her ay için toplamını, [date_column] ile gruplandırılmış olarak döndürür."
  },
  {
    "question": "[column_name] değerinin [time_column] ile gruplandırılmış eğilimlerini göster.",
    "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];",
    "answer": "[column_name] değerinin zaman içindeki eğilimlerini, [time_column] ile gruplandırılmış olarak döndürür (örneğin, gün, ay, yıl)."
  },
  {
    "question": "[table_name] tablosundaki en erken/en geç [column_name] değeri nedir?",
    "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];",
    "answer": "[table_name] tablosundaki en erken [column_name] değerini döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin standart sapması nedir?",
    "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name] değerinin standart sapmasını döndürür."
  },
  {
    "question": "[column_name] değerinin dağılımını (histogram benzeri veri) göster.",
    "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;",
    "answer": "[column_name] değerinin dağılımını, her değerin ne sıklıkta göründüğünü gösterir."
  },
  {
    "question": "[table_name] tablosundaki en sık görülen [column_name] değeri nedir?",
    "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;",
    "answer": "[table_name] tablosundaki en sık görülen [column_name] değerini döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name1] ve [column_name2] arasındaki korelasyon nedir?",
    "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name1] ve [column_name2] arasındaki Pearson korelasyon katsayısını döndürür."
  },
  {
    "question": "[column_name2] > [value] olan kayıtlar için [column_name] değerinin varyansını hesaplayın.",
    "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];",
    "answer": "[column_name2] değeri belirli bir değeri aşan kayıtlar için [column_name] değerinin varyansını döndürür."
  },
  {
    "question": "[table_name] tablosunda [category_column] ile gruplandırılmış [column_name] değerinin ortalama, minimum ve maksimum değerlerini göster.",
    "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];",
    "answer": "[category_column] ile gruplandırılmış [column_name] değerinin ortalama, minimum ve maksimum değerlerini döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin medyanı nedir?",
    "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name] değerinin medyanını döndürür."
  },
  {
    "question": "[column_name] için son 30 günün hareketli ortalamasını hesaplayın, [category_column] ile gruplandırın.",
    "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];",
    "answer": "[column_name] için son 30 günün hareketli ortalamasını, [category_column] ile gruplandırılmış olarak döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin çarpıklığını bulun.",
    "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name] değerinin çarpıklığını döndürür."
  },
  {
    "question": "[column_name] değerinin [category_column] ile gruplandırılmış kümülatif toplamını gösterin, [date_column] ile sıralayın.",
    "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];",
    "answer": "[column_name] değerinin [category_column] ile gruplandırılmış kümülatif toplamını, [date_column] ile sıralanmış olarak döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin çeyrekler arası aralığını (IQR) hesaplayın.",
    "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name] değerinin çeyrekler arası aralığını (IQR) döndürür."
  },
  {
    "question": "[column_name1] ve [column_name2] arasındaki oranı bulun ve oranı [value] değerinden büyük olan kayıtları filtreleyin.",
    "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];",
    "answer": "[column_name1] ve [column_name2] arasındaki oranı döndürür ve oranı belirli bir değerden büyük olan kayıtları filtreler."
  },
  {
    "question": "[column_name] değerinin son 5 kayıttaki yuvarlanan toplamını gösterin, [date_column] ile sıralayın.",
    "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];",
    "answer": "[column_name] değerinin son 5 kayıttaki yuvarlanan toplamını, [date_column] ile sıralanmış olarak döndürür."
  },
  {
    "question": "[table_name] tablosundaki her kayıt için [column_name] değerinin yüzde sıralamasını hesaplayın.",
    "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];",
    "answer": "[table_name] tablosundaki her kayıt için [column_name] değerinin yüzde sıralamasını döndürür."
  },
  {
    "question": "[table_name] tablosuna [column1: value1, column2: value2] değerleriyle yeni bir kayıt ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);",
    "answer": "[table_name] tablosuna [column1] ve [column2] için belirtilen değerlerle yeni bir kayıt ekler."
  },
  {
    "question": "[column_name] değerini [new_value] olarak güncelleyin, [condition] koşulunu sağlayan kayıtlar için.",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtlar için [column_name] değerini [new_value] olarak günceller."
  },
  {
    "question": "[table_name] tablosundan [condition] koşulunu sağlayan kayıtları silin.",
    "query": "DELETE FROM [table_name] WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtları [table_name] tablosundan siler."
  },
  {
    "question": "[new_table_name] adında yeni bir tablo oluşturun ve [column1, column2, ...] sütunlarını ekleyin.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);",
    "answer": "[new_table_name] adında yeni bir tablo oluşturur ve belirtilen sütunları ve veri türlerini ekler."
  },
  {
    "question": "[table_name] tablosuna birden fazla kayıt ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);",
    "answer": "[table_name] tablosuna belirtilen değerlerle birden fazla kayıt ekler."
  },
  {
    "question": "[table_name] tablosunda [condition] koşulunu sağlayan kayıtlar için birden fazla sütunu güncelleyin.",
    "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtlar için birden fazla sütunu ([column1] ve [column2]) yeni değerlerle günceller."
  },
  {
    "question": "Birincil anahtar, unique ve not null gibi kısıtlamalarla bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);",
    "answer": "Birincil anahtar, benzersiz ve boş geçilemez kısıtlamalarla yeni bir tablo oluşturur."
  },
  {
    "question": "Bir sütun için varsayılan değerle bir kayıt ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);",
    "answer": "[table_name] tablosuna yeni bir kayıt ekler, [column2] sütunu için varsayılan değeri kullanır."
  },
  {
    "question": "[condition] koşulunu sağlayan kayıtlar için, bir sütunu NULL olarak güncelleyin.",
    "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtlar için [column_name] sütununu NULL olarak günceller."
  },
  {
    "question": "Başka bir tabloya referans veren bir yabancı anahtar ile bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));",
    "answer": "Başka bir tablonun sütununa referans veren bir yabancı anahtar ile yeni bir tablo oluşturur."
  },
  {
    "question": "Bir tablodan başka bir tabloya veri ekleyin.",
    "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];",
    "answer": "[table_name1] tablosundan [table_name2] tablosuna belirli bir koşula göre veri ekler."
  },
  {
    "question": "Bir sütunun değerini artırın/azaltın, [condition] koşulunu sağlayan kayıtlar için.",
    "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtlar için [column_name] değerini [value] kadar artırır."
  },
  {
    "question": "[table_name] tablosundaki tüm kayıtları silin.",
    "query": "DELETE FROM [table_name];",
    "answer": "[table_name] tablosundaki tüm kayıtları siler ancak tabloyu düşürmez."
  },
  {
    "question": "Veritabanından bir tabloyu tamamen düşürün.",
    "query": "DROP TABLE [table_name];",
    "answer": "Veritabanından tabloyu, şeması ve verileriyle birlikte düşürür."
  },
  {
    "question": "Veritabanından bir tabloyu tamamen silin.",
    "query": "DROP TABLE [table_name];",
    "answer": "Veritabanından tabloyu, şeması ve verileriyle birlikte siler."
  },
  {
    "question": "Mevcut bir tabloya yeni bir sütun ekleyin.",
    "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];",
    "answer": "Mevcut bir tabloya yeni bir sütun ekler."
  },
  {
    "question": "Mevcut bir sütunun veri türünü değiştirmek için bir tabloyu değiştirin.",
    "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];",
    "answer": "Tablodaki mevcut bir sütunun veri türünü değiştirir."
  },
  {
    "question": "[table_name] tablosundan [column_name] sütununu düşürün.",
    "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];",
    "answer": "Mevcut bir tablodan bir sütunu düşürür."
  },
  {
    "question": "Bileşik anahtarla yeni bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));",
    "answer": "[column1] ve [column2]'den oluşan bileşik anahtarla yeni bir tablo oluşturur."
  },
  {
    "question": "Başka bir tablodan değerler almak için bir alt sorgu kullanarak veri ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];",
    "answer": "Belirli bir koşula göre başka bir tablodan ([other_table]) değerler seçerek [table_name] tablosuna veri ekler."
  },
  {
    "question": "Bir tabloyu kısaltın (tüm kayıtları kaldırır ancak yapıyı korur).",
    "query": "TRUNCATE TABLE [table_name];",
    "answer": "[table_name] tablosundaki tüm kayıtları kaldırır ancak yapısını ve şemasını korur."
  },
  {
    "question": "Tüm sütunlar için varsayılan değerlerle [table_name] tablosuna yeni bir kayıt ekleyin.",
    "query": "INSERT INTO [table_name] DEFAULT VALUES;",
    "answer": "Tablodaki sütunlar için tanımlanan varsayılan değerlerle yeni bir kayıt ekler."
  },
  {
    "question": "[table_name] tablosunda [column_name] [old_value] değerine eşit olan tüm satırları güncelleyin ve [column_name] değerini [new_value] olarak ayarlayın.",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];",
    "answer": "[column_name] [old_value] değerine eşit olan tüm kayıtları günceller ve [column_name] değerini [new_value] olarak ayarlar."
  },
  {
    "question": "Birincil anahtar [id] [value] değerine eşit olan belirli bir kayıt için [column_name] sütununu güncelleyin.",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];",
    "answer": "Birincil anahtar [id] [value] değerine eşit olan kayıt için [column_name] değerini günceller."
  },
  {
    "question": "[table_name] tablosunda [column_name] NULL olan tüm kayıtları silin.",
    "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;",
    "answer": "[column_name] NULL olan kayıtları siler."
  },
  {
    "question": "Başka bir tablonun birincil anahtarına referans veren bir sütunla [new_table_name] tablosunu oluşturun (yabancı anahtar).",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));",
    "answer": "Başka bir tablonun birincil anahtarına referans veren bir yabancı anahtar ile bir tablo oluşturur."
  },
  {
    "question": "[table_name] tablosunu güncelleyin ve [column_name] değerini [value] olarak ayarlayın, [column_name] değeri [value] değerinden büyük olan satırlar için.",
    "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];",
    "answer": "[column_name] değeri belirtilen değerden büyük olan kayıtlar için [column_name] değerini [value] olarak günceller."
  },
  {
    "question": "[table_name] tablosunda [column_name] değeri [value] değerinden küçük olan kayıtları silin.",
    "query": "DELETE FROM [table_name] WHERE [column_name] < [value];",
    "answer": "[column_name] değeri belirtilen değerden küçük olan kayıtları siler."
  },
  {
    "question": "Benzersiz kısıtlamaya sahip bir sütunla yeni bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);",
    "answer": "[column1] sütununda benzersiz kısıtlamaya sahip yeni bir tablo oluşturur."
  },
  {
    "question": "Mevcut bir sütuna NOT NULL kısıtlaması eklemek için bir tabloyu değiştirin.",
    "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;",
    "answer": "Tabloyu değiştirerek [column_name] sütununun NULL olamayacağını garanti eder."
  },
  {
    "question": "[table_name] tablosuna veri ekleyin, [column_name] değerini iki sütunun değerlerini birleştirerek hesaplayın.",
    "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);",
    "answer": "Yeni bir kayıt ekler ve [column3] değerini [value1] ve [value2]'nin birleşimi olarak hesaplar."
  },
  {
    "question": "[table_name] tablosundaki kayıtları güncelleyerek [column_name] değerini o sütunun ortalama değeri olarak ayarlayın.",
    "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);",
    "answer": "[table_name] tablosundaki tüm kayıtları günceller ve [column_name] değerini ortalama değeri olarak ayarlar."
  },
  {
    "question": "Yeni bir tablo [new_table_name] oluşturun ve bir zaman damgası sütunu ekleyin.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);",
    "answer": "Yeni bir tablo oluşturur ve yeni bir kayıt eklendiğinde [created_at] sütununa otomatik olarak geçerli zaman damgasını ekler."
  },
  {
    "question": "Başka bir tablodan belirli bir koşula göre veri ekleyin (alt sorgu kullanarak).",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];",
    "answer": "[other_table] tablosundan [column3] değeri [value] değerinden büyük olan verileri [table_name] tablosuna ekler."
  },
  {
    "question": "[column_name] sütununa göre yinelenen satırları silin, yalnızca ilk kaydı saklayın.",
    "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);",
    "answer": "[column_name] sütununa göre yinelenen satırları siler, yalnızca ilk kaydı saklar."
  },
  {
    "question": "[table_name] tablosuna bir kayıt ekleyin ve sütun değerlerinden biri için bir alt sorgu kullanın.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));",
    "answer": "[table_name] tablosuna yeni bir kayıt ekler, [column2] değerini [other_table] tablosundan bir alt sorgu ile alır."
  },
  {
    "question": "Başka bir tablodaki birden fazla sütunu referans alan bileşik yabancı anahtarla yeni bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));",
    "answer": "Başka bir tablodaki birden fazla sütunu referans alan bileşik yabancı anahtarla yeni bir tablo oluşturur."
  },
  {
    "question": "Bir koşula dayalı olarak bir sütun değerini ayarlayarak [table_name] tablosundaki kayıtları güncelleyin ve bir CASE ifadesi ekleyin.",
    "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];",
    "answer": "[table_name] tablosundaki kayıtları günceller, [column_name] değerini 'High' veya 'Low' olarak ayarlar."
  },
  {
    "question": "Bir tabloyu değiştirerek birden fazla sütuna benzersiz kısıtlama ekleyin.",
    "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);",
    "answer": "[table_name] tablosuna [column1] ve [column2] sütunlarına benzersiz kısıtlama ekler."
  },
  {
    "question": "[table_name] tablosundan verileri özetlemek için bir görünüm oluşturun.",
    "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];",
    "answer": "[column2] sütununu [column1]'e göre gruplandırarak sayan bir görünüm oluşturur."
  },
  {
    "question": "Bir satır güncellendiğinde bir sütunu otomatik olarak geçerli zamana güncelleyen bir tetikleyici oluşturun.",
    "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();",
    "answer": "[table_name] tablosundaki bir kayıt güncellendiğinde [timestamp_column] sütununu güncelleyen bir tetikleyici oluşturur."
  },
  {
    "question": "[table_name] tablosunu kısaltın ve kimlik sütununu sıfırlayın.",
    "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;",
    "answer": "[table_name] tablosundaki tüm kayıtları kaldırır ve kimlik sütununu başlangıç değerine sıfırlar."
  },
  {
    "question": "Belirli bir tarihten daha eski kayıtları silin.",
    "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';",
    "answer": "[date_column] belirli bir tarihten daha eski olan kayıtları siler."
  },
  {
    "question": "Başka bir tablodan veri alarak [table_name] tablosuna bir kayıt ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';",
    "answer": "Başka bir tablodan seçme sorgusuna dayalı olarak [table_name] tablosuna veri ekler."
  },
  {
    "question": "Bir sütuna belirli bir aralıkta değerlerin olmasını sağlamak için CHECK kısıtlaması ekleyin.",
    "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);",
    "answer": "[column_name] sütunundaki değerlerin 0 ile 100 arasında olmasını sağlamak için bir kısıtlama ekler."
  },
  {
    "question": "[column_name] sütununda yinelenen kayıtları silin.",
    "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);",
    "answer": "[column_name] sütununa göre yinelenen kayıtları siler, yalnızca ilk kaydı saklar."
  },
  {
    "question": "[table_name] tablosunda tanımlı tetikleyiciler nelerdir?",
    "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';",
    "answer": "Belirtilen tabloda tanımlı tetikleyicileri döndürür."
  },
  {
    "question": "Veritabanındaki tüm saklı yordamları listeleyin.",
    "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';",
    "answer": "Public şemasındaki tüm saklı yordamları döndürür."
  },
  {
    "question": "[table_name] tablosunun mevcut şeması nedir?",
    "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablonun şemasını döndürür."
  },
  {
    "question": "[table_name] tablosunun diğer tablolarla olan yabancı anahtar ilişkilerini gösterin.",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Belirtilen tablonun diğer tablolarla olan yabancı anahtar ilişkilerini döndürür."
  },
  {
    "question": "[table_name] tablosunda indekslere sahip sütunlar nelerdir?",
    "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki indekslere sahip sütunları döndürür."
  },
  {
    "question": "Veritabanındaki indekslerin boyutu nedir?",
    "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));",
    "answer": "Belirtilen tablodaki indekslerin boyutunu döndürür (PostgreSQL)."
  },
  {
    "question": "[table_name] tablosunda kaç indeks var?",
    "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki indekslerin sayısını döndürür."
  },
  {
    "question": "Veritabanındaki tüm indeks tanımlarını gösterin.",
    "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';",
    "answer": "Belirtilen şemadaki tüm indeks tanımlarını döndürür."
  },
  {
    "question": "[table_name] tablosunda kullanılan indeks türleri nelerdir?",
    "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki indeks türlerini döndürür."
  },
  {
    "question": "[table_name] tablosuyla ilişkili indekslerin adları nelerdir?",
    "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki indekslerin adlarını döndürür."
  },
  {
    "question": "[table_name] tablosunda bileşik indeksler var mı? Varsa, hangi sütunlar dahil?",
    "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;",
    "answer": "Belirtilen tablodaki bileşik indeksleri ve her birine dahil olan sütunları döndürür."
  },
  {
    "question": "[table_name] tablosu için indeks oluşturma betiklerini gösterin.",
    "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;",
    "answer": "Belirtilen tablo için indeks oluşturma betiklerini döndürür (PostgreSQL)."
  },
  {
    "question": "[table_name] tablosu ile diğer tablolar arasındaki yabancı anahtarlar nelerdir?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Belirtilen tablo ile diğer tablolar arasındaki yabancı anahtarları döndürür."
  },
  {
    "question": "[table_name] tablosunda kaç yabancı anahtar kısıtlaması var?",
    "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;",
    "answer": "Belirtilen tablodaki yabancı anahtar kısıtlamalarının sayısını döndürür."
  },
  {
    "question": "[table_name] tablosundaki yabancı anahtarlar için referans bütünlüğü kuralı nedir?",
    "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');",
    "answer": "Belirtilen tablodaki yabancı anahtarlar için referans bütünlüğü kurallarını döndürür."
  },
  {
    "question": "[table_name] tablosundaki yabancı anahtarlar için tüm üst tabloları listeleyin.",
    "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;",
    "answer": "Belirtilen tablodaki yabancı anahtarlar için tüm üst tabloları döndürür."
  },
  {
    "question": "[table_name] tablosuna yabancı anahtarlarla referans veren tüm alt tabloları listeleyin.",
    "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';",
    "answer": "Belirtilen tabloya yabancı anahtarlarla referans veren tüm alt tabloları döndürür."
  },
  {
    "question": "[table_name] tablosundaki tüm kısıtlamaları listeleyin.",
    "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki tüm kısıtlamaları döndürür."
  },
  {
    "question": "[table_name] tablosunda yabancı anahtar ihlalleri var mı? Varsa, listeleyin.",
    "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);",
    "answer": "Belirtilen tablodaki yabancı anahtar ihlallerini döndürür."
  },
  {
    "question": "[table_name] tablosundaki benzersiz kısıtlamaları gösterin.",
    "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';",
    "answer": "Belirtilen tablodaki benzersiz kısıtlamaları döndürür."
  },
  {
    "question": "Veritabanındaki tüm CHECK kısıtlamalarını listeleyin.",
    "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';",
    "answer": "Belirtilen şemadaki tüm CHECK kısıtlamalarını döndürür."
  },
  {
    "question": "[table_name] tablosundaki birincil anahtar kısıtlamalarına dahil olan sütunlar nelerdir?",
    "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');",
    "answer": "Belirtilen tablodaki birincil anahtar kısıtlamalarına dahil olan sütunları döndürür."
  },
  {
    "question": "[table_name] tablosuna bağımlı görünümler nelerdir?",
    "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';",
    "answer": "Belirtilen tabloya bağımlı olan görünümleri döndürür."
  },
  {
    "question": "[table_name] tablosundaki sütunların veri türlerini gösterin.",
    "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki sütunların veri türlerini döndürür."
  },
  {
    "question": "[users/customers] tarafından en yaygın [product/behavior] kombinasyonu nedir?",
    "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;",
    "answer": "Kullanıcılar veya müşteriler tarafından en yaygın ürün veya davranış kombinasyonunu döndürür."
  },
  {
    "question": "Son [time_period] içinde geri bildirimde bulunan tüm [users/customers] bulun.",
    "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Son belirtilen süre içinde geri bildirimde bulunan tüm kullanıcıları veya müşterileri döndürür."
  },
  {
    "question": "Stokta az olan [products/records] bulun.",
    "query": "SELECT * FROM products WHERE stock_quantity < [threshold];",
    "answer": "Stokta az olan ürünleri veya kayıtları döndürür."
  },
  {
    "question": "Son [time_period] içinde satılmamış tüm [products] listeleyin.",
    "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);",
    "answer": "Son belirtilen süre içinde satılmamış tüm ürünleri döndürür."
  },
  {
    "question": "En yüksek [return/complaint] oranına sahip [products] bulun.",
    "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;",
    "answer": "En yüksek iade veya şikayet oranına sahip ürünleri döndürür."
  },
  {
    "question": "Son [time_period] içinde en çok satan [products] nelerdir?",
    "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;",
    "answer": "Son belirtilen süre içinde en çok satan ürünleri döndürür."
  },
  {
    "question": "En uzun süredir satışta olan [products] bulun.",
    "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;",
    "answer": "En uzun süredir satışta olan ürünleri döndürür."
  },
  {
    "question": "[time_period] süresinden daha uzun süredir stokta olmayan [products] belirleyin.",
    "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Belirtilen süreden daha uzun süredir stokta olmayan ürünleri döndürür."
  },
  {
    "question": "[time_period] için toplam [revenue/cost] nedir?",
    "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Belirtilen süre için toplam geliri veya maliyeti döndürür."
  },
  {
    "question": "Belirli bir [time_period] için [expenses] bulun ve kategorilere ayırın.",
    "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;",
    "answer": "Belirli bir süre için giderleri döndürür ve türlerine göre kategorilere ayırır."
  },
  {
    "question": "En yüksek gelir getiren [items/products] nelerdir?",
    "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;",
    "answer": "En yüksek gelir getiren N ürünü veya öğeyi döndürür."
  },
  {
    "question": "Toplam [pending/unpaid] [invoices/orders] miktarı nedir?",
    "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';",
    "answer": "Toplam bekleyen veya ödenmemiş faturaları veya siparişleri döndürür."
  },
  {
    "question": "Son [time_period] içinde verilen toplam [discount/bonus] miktarı nedir?",
    "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Son belirtilen süre içinde verilen toplam indirim veya bonus miktarını döndürür."
  },
  {
    "question": "Belirli bir [time_period] için [revenue/cost] ve [expenses/other_metric] karşılaştırın.",
    "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Belirli bir süre için gelir veya maliyeti giderler veya başka bir metrik ile karşılaştırır."
  },
  {
    "question": "PPC kampanyası için en iyi performans gösteren anahtar kelimeleri/reklam metinlerini belirleyin.",
    "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;",
    "answer": "Belirli bir PPC kampanyası için en iyi performans gösteren anahtar kelimeleri ve reklam metinlerini döndürür."
  },
  {
    "question": "Şüpheli fatura adresi/ödeme yöntemi olan tüm siparişleri/işlemleri listeleyin.",
    "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';",
    "answer": "Şüpheli fatura adresi veya ödeme yöntemi olan tüm siparişleri veya işlemleri döndürür."
  },
  {
    "question": "Son [time_period] içinde iletişim bilgilerini güncellemeyen müşterileri/kullanıcıları bulun.",
    "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';",
    "answer": "Belirtilen süre içinde iletişim bilgilerini güncellemeyen müşterileri veya kullanıcıları döndürür."
  },
  {
    "question": "Güvenlik/kalite standartlarına uymayan ürünleri/hizmetleri belirleyin.",
    "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';",
    "answer": "Güvenlik veya kalite standartlarına uymayan ürünleri veya hizmetleri döndürür."
  },
  {
    "question": "Dolandırıcılık tespit kuralına göre işaretlenen işlemler/siparişler nelerdir?",
    "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;",
    "answer": "Dolandırıcılık tespit kurallarına göre işaretlenen işlemleri veya siparişleri döndürür."
  },
  {
    "question": "Zorunlu eğitim/sertifikasyon için gecikmiş tüm çalışanları bulun.",
    "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';",
    "answer": "Zorunlu eğitim veya sertifikasyon için gecikmiş tüm çalışanları döndürür."
  },
  {
    "question": "[field_name] gibi kritik alanlarda eksik veriye sahip kayıtları bulun.",
    "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;",
    "answer": "Kritik alanlarda eksik veriye sahip kayıtları döndürür."
  },
  {
    "question": "Müşteri/ürün veritabanında yinelenen girişleri belirleyin.",
    "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;",
    "answer": "Müşteri veya ürün veritabanında yinelenen girişleri döndürür."
  },
  {
    "question": "[table_name] tablosundaki eksik kayıtların yüzdesi nedir?",
    "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];",
    "answer": "Belirtilen tablodaki eksik kayıtların yüzdesini döndürür."
  },
  {
    "question": "Açıklaması veya ayrıntıları eksik olan tüm ürünleri/hizmetleri listeleyin.",
    "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';",
    "answer": "Açıklaması veya ayrıntıları eksik olan tüm ürünleri veya hizmetleri döndürür."
  },
  {
    "question": "Farklı alanlar/sütunlar arasında tutarsız veri olup olmadığını kontrol edin (örneğin, tarih formatları).",
    "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];",
    "answer": "Farklı alanlar veya sütunlar arasında tutarsız veriye sahip kayıtları döndürür."
  },
  {
    "question": "Doğrulama/kontrolü geçemeyen kayıtları bulun.",
    "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';",
    "answer": "Doğrulama veya kontrolü geçemeyen kayıtları döndürür."
  },
  {
    "question": "Mevcut dönemdeki metric1 ile önceki dönemdeki metric2'yi karşılaştırın.",
    "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;",
    "answer": "Mevcut dönemdeki metric1 ile önceki dönemdeki metric2'yi karşılaştırır."
  },
  {
    "question": "Aylık bazda metriklerin karşılaştırması (örneğin, satışlar, giderler) nasıldır?",
    "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;",
    "answer": "Aylık bazda satışlar ve giderler gibi metriklerin karşılaştırmasını döndürür."
  },
  {
    "question": "Çalışan performansını metric1 ve metric2'ye göre karşılaştırın.",
    "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;",
    "answer": "Çalışan performansını metric1 ve metric2'ye göre karşılaştırır."
  },
  {
    "question": "Ürün1 ve ürün2'yi satışlar/iade açısından karşılaştırın.",
    "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;",
    "answer": "Ürün1 ve ürün2'yi satışlar ve iadeler açısından karşılaştırır."
  },
  {
    "question": "İki dönem arasındaki büyüme oranını metric için bulun.",
    "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];",
    "answer": "Belirtilen metric için iki dönem arasındaki büyüme oranını döndürür."
  },
  {
    "question": "[product_name] için ortalama puan nedir?",
    "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';",
    "answer": "Belirtilen ürün için ortalama puanı döndürür."
  },
  {
    "question": "X yıldızın altında puana sahip tüm ürünleri listeleyin.",
    "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];",
    "answer": "Belirtilen yıldız sayısının altında puana sahip tüm ürünleri döndürür."
  },
  {
    "question": "[product_name] için tüm yorumları bulun.",
    "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';",
    "answer": "Belirtilen ürün için tüm yorumları döndürür."
  },
  {
    "question": "Müşteri geri bildirimleri ile iade/şikayetler arasındaki ilişki nedir?",
    "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;",
    "answer": "Müşteri geri bildirimleri ile iade veya şikayetler arasındaki ilişkiyi döndürür."
  },
  {
    "question": "En yüksek müşteri memnuniyeti puanına sahip ürünleri belirleyin.",
    "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;",
    "answer": "En yüksek müşteri memnuniyeti puanına sahip ürünleri döndürür."
  },
  {
    "question": "[time_period] içinde geç gönderilen siparişlerin yüzdesi nedir?",
    "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';",
    "answer": "Belirtilen zaman diliminde geç gönderilen siparişlerin yüzdesini döndürür."
  },
  {
    "question": "Siparişin verilmesinden itibaren [X] gün içinde gönderilen tüm siparişleri bulun.",
    "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';",
    "answer": "Siparişin verilmesinden itibaren belirtilen gün sayısı içinde gönderilen tüm siparişleri döndürür."
  },
  {
    "question": "Sipariş başına ortalama gönderim maliyeti/işlem süresi nedir?",
    "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;",
    "answer": "Sipariş başına ortalama gönderim maliyeti ve işlem süresini döndürür."
  },
  {
    "question": "Hızlı/overnight gönderim gerektiren tüm siparişleri listeleyin.",
    "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');",
    "answer": "Hızlı veya overnight gönderim gerektiren tüm siparişleri döndürür."
  },
  {
    "question": "Gönderimden sonra iptal edilen siparişleri bulun.",
    "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;",
    "answer": "Gönderimden sonra iptal edilen tüm siparişleri döndürür."
  },
  {
    "question": "Son [X] gün içinde giriş yapan tüm kullanıcıları bulun.",
    "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';",
    "answer": "Son belirtilen gün sayısı içinde giriş yapan tüm kullanıcıları döndürür."
  },
  {
    "question": "Son [time_period] içinde [kullanıcı/müşteri] kayıp oranı nedir?",
    "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;",
    "answer": "Son belirtilen zaman diliminde kullanıcı veya müşteri kayıp oranını döndürür."
  },
  {
    "question": "[time_period] içinde ilk ziyaretlerinden sonra satın alma yapmayan kullanıcıları bulun.",
    "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;",
    "answer": "Belirtilen zaman diliminde ilk ziyaretlerinden sonra satın alma yapmayan kullanıcıları döndürür."
  },
  {
    "question": "En yüksek yaşam boyu değere (LTV) sahip kullanıcıları belirleyin.",
    "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;",
    "answer": "En yüksek yaşam boyu değere sahip kullanıcıları döndürür."
  },
  {
    "question": "Satın alma sıklığına göre en üst [N] kullanıcıyı bulun.",
    "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];",
    "answer": "Satın alma sıklığına göre en üst N kullanıcıyı döndürür."
  },
  {
    "question": "[table1] ve [table2] tablolarını [common_column] sütununa göre birleştirin.",
    "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];",
    "answer": "[table1] ve [table2] tablolarını [common_column] sütununa göre birleştirir."
  },
  {
    "question": "[table1] tablosunda [table2] tablosunda eşleşen kaydı olmayan tüm kayıtları bulun.",
    "query": "SELECT * FROM [table1] LEFT JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[common_column] IS NULL;",
    "answer": "[table1] tablosunda [table2] tablosunda eşleşen kaydı olmayan tüm kayıtları döndürür."
  },
  {
    "question": "[table1] tablosundan [table2.column_name] ile gruplandırılmış toplam [column_name] nedir?",
    "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] GROUP BY [table2].[column_name];",
    "answer": "[table1] tablosundan [table2].[column_name] ile gruplandırılmış toplam [column_name] değerini döndürür."
  },
  {
    "question": "[table1] tablosunun detaylarını ve [table2] tablosundan eşleşen satırları alın.",
    "query": "SELECT [table1].*, [table2].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column];",
    "answer": "[table1] ve [table2] tablolarındaki tüm sütunları, [common_column] sütununa göre eşleşen kayıtlar için döndürür."
  },
  {
    "question": "[table1], [table2] ve [table3] tablolarını birleştirip [table1.date] '2023-01-01' tarihinden büyük olan satırları filtreleyin.",
    "query": "SELECT * FROM [table1] JOIN [table2] ON [table1].[column_name] = [table2].[column_name] JOIN [table3] ON [table2].[column_name] = [table3].[column_name] WHERE [table1].[date] > '2023-01-01';",
    "answer": "[table1], [table2] ve [table3] tablolarındaki tüm sütunları, birleştirme koşulu sağlandığında ve [table1].[date] '2023-01-01' tarihinden büyük olduğunda döndürür."
  },
  {
    "question": "[table1], [table2] ve [table3] tablolarından toplam [column_name] değerini alın, [table3.column_name] ile gruplandırın ve [table2.column_name] = 'value' ve [table1.date] son 30 gün içinde olan satırları filtreleyin.",
    "query": "SELECT [table3].[column_name], SUM([table1].[column_name]) AS total_column FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table2].[column_name] = 'value' AND [table1].[date] >= CURRENT_DATE - INTERVAL '30 days' GROUP BY [table3].[column_name];",
    "answer": "[table1] tablosundan toplam [column_name] değerini, [table3.column_name] ile gruplandırılmış olarak döndürür, [table2.column_name] = 'value' ve [table1.date] son 30 gün içinde olan satırları filtreler."
  },
  {
    "question": "[table1] tablosundaki tüm kayıtları, [table2] ve [table3] tablolarındaki eşleşen kayıtlarla birlikte bulun, [table1.column_name] > [value], [table2.column_name] = 'active' ve sonuçları [table3.column_name] sütununa göre artan sırada sıralayın.",
    "query": "SELECT [table1].*, [table2].*, [table3].* FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] JOIN [table3] ON [table2].[common_column] = [table3].[common_column] WHERE [table1].[column_name] > [value] AND [table2].[column_name] = 'active' ORDER BY [table3].[column_name] ASC;",
    "answer": "[table1], [table2] ve [table3] tablolarındaki tüm sütunları, belirtilen filtre koşullarına göre ve [table3.column_name] sütununa göre artan sırada döndürür."
  },
  {
    "question": "[table1] tablosundan toplam [column_name] değerini hesaplayın, [table2.column_name] ile gruplandırın, [table2.status] = 'approved' ve [table1.date] '2023-01-01' ile '2023-12-31' arasında olan kayıtları filtreleyin ve her grup için kayıt sayısını ekleyin.",
    "query": "SELECT [table2].[column_name], SUM([table1].[column_name]) AS total_column, COUNT([table1].[column_name]) AS record_count FROM [table1] JOIN [table2] ON [table1].[common_column] = [table2].[common_column] WHERE [table2].[status] = 'approved' AND [table1].[date] BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY [table2].[column_name];",
    "answer": "[table1] tablosundan toplam [column_name] ve kayıt sayısını, [table2.column_name] ile gruplandırılmış olarak döndürür, [table2.status] = 'approved' ve [table1.date] '2023' tarih aralığında olan kayıtları filtreler."
  },
  {
    "question": "Son 7 gün içinde eklenen/güncellenen tüm kayıtları bulun.",
    "query": "SELECT * FROM [table_name] WHERE [updated_at] >= CURRENT_DATE - INTERVAL '7 days';",
    "answer": "[table_name] tablosundaki son 7 gün içinde eklenen veya güncellenen tüm kayıtları döndürür, [updated_at] sütununun var olduğunu varsayar."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin aylık/yıllık toplamı nedir?",
    "query": "SELECT EXTRACT(MONTH FROM [date_column]) AS month, SUM([column_name]) AS monthly_total FROM [table_name] GROUP BY EXTRACT(MONTH FROM [date_column]) ORDER BY month;",
    "answer": "[table_name] tablosundaki [column_name] değerinin her ay için toplamını, [date_column] ile gruplandırılmış olarak döndürür."
  },
  {
    "question": "[column_name] değerinin [time_column] ile gruplandırılmış eğilimlerini göster.",
    "query": "SELECT [time_column], SUM([column_name]) AS trend_total FROM [table_name] GROUP BY [time_column] ORDER BY [time_column];",
    "answer": "[column_name] değerinin zaman içindeki eğilimlerini, [time_column] ile gruplandırılmış olarak döndürür (örneğin, gün, ay, yıl)."
  },
  {
    "question": "[table_name] tablosundaki en erken/en geç [column_name] değeri nedir?",
    "query": "SELECT MIN([column_name]) AS earliest_value FROM [table_name];",
    "answer": "[table_name] tablosundaki en erken [column_name] değerini döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin standart sapması nedir?",
    "query": "SELECT STDDEV([column_name]) AS standard_deviation FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name] değerinin standart sapmasını döndürür."
  },
  {
    "question": "[column_name] değerinin dağılımını (histogram benzeri veri) göster.",
    "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC;",
    "answer": "[column_name] değerinin dağılımını, her değerin ne sıklıkta göründüğünü gösterir."
  },
  {
    "question": "[table_name] tablosundaki en sık görülen [column_name] değeri nedir?",
    "query": "SELECT [column_name], COUNT(*) AS frequency FROM [table_name] GROUP BY [column_name] ORDER BY frequency DESC LIMIT 1;",
    "answer": "[table_name] tablosundaki en sık görülen [column_name] değerini döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name1] ve [column_name2] arasındaki korelasyon nedir?",
    "query": "SELECT CORR([column_name1], [column_name2]) AS correlation_coefficient FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name1] ve [column_name2] arasındaki Pearson korelasyon katsayısını döndürür."
  },
  {
    "question": "[column_name2] > [value] olan kayıtlar için [column_name] değerinin varyansını hesaplayın.",
    "query": "SELECT VARIANCE([column_name]) AS variance FROM [table_name] WHERE [column_name2] > [value];",
    "answer": "[column_name2] değeri belirli bir değeri aşan kayıtlar için [column_name] değerinin varyansını döndürür."
  },
  {
    "question": "[table_name] tablosunda [category_column] ile gruplandırılmış [column_name] değerinin ortalama, minimum ve maksimum değerlerini göster.",
    "query": "SELECT [category_column], AVG([column_name]) AS average, MIN([column_name]) AS minimum, MAX([column_name]) AS maximum FROM [table_name] GROUP BY [category_column];",
    "answer": "[category_column] ile gruplandırılmış [column_name] değerinin ortalama, minimum ve maksimum değerlerini döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin medyanı nedir?",
    "query": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY [column_name]) AS median FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name] değerinin medyanını döndürür."
  },
  {
    "question": "[column_name] için son 30 günün hareketli ortalamasını hesaplayın, [category_column] ile gruplandırın.",
    "query": "SELECT [category_column], AVG([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS moving_average FROM [table_name];",
    "answer": "[column_name] için son 30 günün hareketli ortalamasını, [category_column] ile gruplandırılmış olarak döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin çarpıklığını bulun.",
    "query": "SELECT skewness([column_name]) AS skewness_value FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name] değerinin çarpıklığını döndürür."
  },
  {
    "question": "[column_name] değerinin [category_column] ile gruplandırılmış kümülatif toplamını gösterin, [date_column] ile sıralayın.",
    "query": "SELECT [category_column], [date_column], SUM([column_name]) OVER (PARTITION BY [category_column] ORDER BY [date_column] ROWS UNBOUNDED PRECEDING) AS cumulative_sum FROM [table_name];",
    "answer": "[column_name] değerinin [category_column] ile gruplandırılmış kümülatif toplamını, [date_column] ile sıralanmış olarak döndürür."
  },
  {
    "question": "[table_name] tablosundaki [column_name] değerinin çeyrekler arası aralığını (IQR) hesaplayın.",
    "query": "SELECT percentile_cont(0.75) WITHIN GROUP (ORDER BY [column_name]) - percentile_cont(0.25) WITHIN GROUP (ORDER BY [column_name]) AS IQR FROM [table_name];",
    "answer": "[table_name] tablosundaki [column_name] değerinin çeyrekler arası aralığını (IQR) döndürür."
  },
  {
    "question": "[column_name1] ve [column_name2] arasındaki oranı bulun ve oranı [value] değerinden büyük olan kayıtları filtreleyin.",
    "query": "SELECT [column_name1], [column_name2], ([column_name1] / [column_name2]) AS ratio FROM [table_name] WHERE ([column_name1] / [column_name2]) > [value];",
    "answer": "[column_name1] ve [column_name2] arasındaki oranı döndürür ve oranı belirli bir değerden büyük olan kayıtları filtreler."
  },
  {
    "question": "[column_name] değerinin son 5 kayıttaki yuvarlanan toplamını gösterin, [date_column] ile sıralayın.",
    "query": "SELECT [date_column], [column_name], SUM([column_name]) OVER (ORDER BY [date_column] ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum FROM [table_name];",
    "answer": "[column_name] değerinin son 5 kayıttaki yuvarlanan toplamını, [date_column] ile sıralanmış olarak döndürür."
  },
  {
    "question": "[column_name] sütununun yüzde sıralamasını [table_name] tablosunda her satır için hesaplayın.",
    "query": "SELECT [column_name], PERCENT_RANK() OVER (ORDER BY [column_name]) AS percentile_rank FROM [table_name];",
    "answer": "[table_name] tablosundaki her satır için [column_name] sütununun yüzde sıralamasını hesaplar."
  },
  {
    "question": "[table_name] tablosuna [column1] ve [column2] değerleriyle yeni bir kayıt ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], [value2]);",
    "answer": "[table_name] tablosuna [column1] ve [column2] için belirtilen değerlerle yeni bir kayıt ekler."
  },
  {
    "question": "[column_name] değerini [new_value] olarak güncelleyin, [condition] koşulunu sağlayan kayıtlar için.",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtlar için [column_name] değerini [new_value] olarak günceller."
  },
  {
    "question": "[condition] koşulunu sağlayan kayıtları [table_name] tablosundan silin.",
    "query": "DELETE FROM [table_name] WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtları [table_name] tablosundan siler."
  },
  {
    "question": "[new_table_name] adında yeni bir tablo oluşturun ve [column1, column2, ...] sütunlarını ekleyin.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], ...);",
    "answer": "[new_table_name] adında yeni bir tablo oluşturur ve belirtilen sütunları ve veri türlerini ekler."
  },
  {
    "question": "[table_name] tablosuna birden fazla kayıt ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1_1], [value2_1]), ([value1_2], [value2_2]), ([value1_3], [value2_3]);",
    "answer": "[table_name] tablosuna belirtilen değerlerle birden fazla kayıt ekler."
  },
  {
    "question": "[condition] koşulunu sağlayan kayıtlar için [table_name] tablosunda birden fazla sütunu güncelleyin.",
    "query": "UPDATE [table_name] SET [column1] = [new_value1], [column2] = [new_value2] WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtlar için birden fazla sütunu ([column1] ve [column2]) yeni değerlerle günceller."
  },
  {
    "question": "Birincil anahtar, benzersiz ve boş geçilemez gibi kısıtlamalarla bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [column2] [data_type] UNIQUE, [column3] [data_type] NOT NULL);",
    "answer": "Birincil anahtar, benzersiz ve boş geçilemez kısıtlamalarla yeni bir tablo oluşturur."
  },
  {
    "question": "Bir sütun için varsayılan değerle bir kayıt ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], DEFAULT);",
    "answer": "[table_name] tablosuna yeni bir kayıt ekler, [column2] sütunu için varsayılan değeri kullanır."
  },
  {
    "question": "[condition] koşulunu sağlayan kayıtlar için bir sütunu NULL olarak güncelleyin.",
    "query": "UPDATE [table_name] SET [column_name] = NULL WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtlar için [column_name] sütununu NULL olarak günceller."
  },
  {
    "question": "Başka bir tabloya referans veren bir yabancı anahtar ile bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] PRIMARY KEY, [foreign_key_column] [data_type], FOREIGN KEY ([foreign_key_column]) REFERENCES [referenced_table]([referenced_column]));",
    "answer": "Başka bir tablonun sütununa referans veren bir yabancı anahtar ile yeni bir tablo oluşturur."
  },
  {
    "question": "Bir tablodan başka bir tabloya veri ekleyin.",
    "query": "INSERT INTO [table_name2] ([column1], [column2]) SELECT [column1], [column2] FROM [table_name1] WHERE [condition];",
    "answer": "[table_name1] tablosundan [table_name2] tablosuna belirli bir koşula göre veri ekler."
  },
  {
    "question": "[condition] koşulunu sağlayan kayıtlar için bir sütunun değerini artırın/azaltın.",
    "query": "UPDATE [table_name] SET [column_name] = [column_name] + [value] WHERE [condition];",
    "answer": "[condition] koşulunu sağlayan kayıtlar için [column_name] değerini [value] kadar artırır."
  },
  {
    "question": "[table_name] tablosundaki tüm kayıtları silin.",
    "query": "DELETE FROM [table_name];",
    "answer": "[table_name] tablosundaki tüm kayıtları siler ancak tabloyu düşürmez."
  },
  {
    "question": "Veritabanından bir tabloyu düşürün.",
    "query": "DROP TABLE [table_name];",
    "answer": "Veritabanından tabloyu, yapısı ve verileriyle birlikte düşürür."
  },
  {
    "question": "Mevcut bir tabloya yeni bir sütun ekleyin.",
    "query": "ALTER TABLE [table_name] ADD COLUMN [new_column] [data_type];",
    "answer": "Mevcut bir tabloya yeni bir sütun ekler."
  },
  {
    "question": "Mevcut bir sütunun veri türünü değiştirmek için bir tabloyu değiştirin.",
    "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] TYPE [new_data_type];",
    "answer": "Tablodaki mevcut bir sütunun veri türünü değiştirir."
  },
  {
    "question": "Bir tabloyu değiştirerek bir sütunu düşürün.",
    "query": "ALTER TABLE [table_name] DROP COLUMN [column_name];",
    "answer": "Mevcut bir tablodan bir sütunu düşürür."
  },
  {
    "question": "Bileşik birincil anahtarla yeni bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], PRIMARY KEY ([column1], [column2]));",
    "answer": "[column1] ve [column2]'den oluşan bileşik birincil anahtarla yeni bir tablo oluşturur."
  },
  {
    "question": "Başka bir tablodan değerler almak için bir alt sorgu kullanarak veri ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [condition];",
    "answer": "Belirli bir koşula göre başka bir tablodan ([other_table]) değerler seçerek [table_name] tablosuna veri ekler."
  },
  {
    "question": "Bir tabloyu kısaltın (tüm kayıtları kaldırır ancak yapıyı korur).",
    "query": "TRUNCATE TABLE [table_name];",
    "answer": "[table_name] tablosundaki tüm kayıtları kaldırır ancak yapısını ve şemasını korur."
  },
  {
    "question": "Tüm sütunlar için varsayılan değerlerle [table_name] tablosuna yeni bir kayıt ekleyin.",
    "query": "INSERT INTO [table_name] DEFAULT VALUES;",
    "answer": "Tablodaki sütunlar için tanımlanan varsayılan değerlerle yeni bir kayıt ekler."
  },
  {
    "question": "[column_name] [old_value] değerine eşit olan tüm satırları güncelleyerek [column_name] değerini [new_value] olarak ayarlayın.",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [column_name] = [old_value];",
    "answer": "[column_name] [old_value] değerine eşit olan tüm kayıtları günceller ve [column_name] değerini [new_value] olarak ayarlar."
  },
  {
    "question": "Birincil anahtar [id] [value] değerine eşit olan belirli bir kayıt için [column_name] sütununu güncelleyin.",
    "query": "UPDATE [table_name] SET [column_name] = [new_value] WHERE [id] = [value];",
    "answer": "Birincil anahtar [id] [value] değerine eşit olan kayıt için [column_name] değerini günceller."
  },
  {
    "question": "[column_name] NULL olan tüm kayıtları [table_name] tablosundan silin.",
    "query": "DELETE FROM [table_name] WHERE [column_name] IS NULL;",
    "answer": "[column_name] NULL olan kayıtları siler."
  },
  {
    "question": "Başka bir tablonun birincil anahtarına referans veren bir sütunla [new_table_name] tablosunu oluşturun (yabancı anahtar).",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [foreign_column] [data_type], FOREIGN KEY ([foreign_column]) REFERENCES [referenced_table]([referenced_column]));",
    "answer": "Başka bir tablonun birincil anahtarına referans veren bir yabancı anahtar ile bir tablo oluşturur."
  },
  {
    "question": "[column_name] değerini [value] olarak güncelleyin, [column_name] değeri [value] değerinden büyük olan satırlar için.",
    "query": "UPDATE [table_name] SET [column_name] = [value] WHERE [column_name] > [value];",
    "answer": "[column_name] değeri belirtilen değerden büyük olan kayıtlar için [column_name] değerini [value] olarak günceller."
  },
  {
    "question": "[column_name] değeri [value] değerinden küçük olan kayıtları [table_name] tablosundan silin.",
    "query": "DELETE FROM [table_name] WHERE [column_name] < [value];",
    "answer": "[column_name] değeri belirtilen değerden küçük olan kayıtları siler."
  },
  {
    "question": "Benzersiz kısıtlamaya sahip bir sütunla yeni bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type] UNIQUE, [column2] [data_type]);",
    "answer": "[column1] sütununda benzersiz kısıtlamaya sahip yeni bir tablo oluşturur."
  },
  {
    "question": "Mevcut bir sütuna NOT NULL kısıtlaması eklemek için bir tabloyu değiştirin.",
    "query": "ALTER TABLE [table_name] ALTER COLUMN [column_name] SET NOT NULL;",
    "answer": "Tabloyu değiştirerek [column_name] sütununun NULL olamayacağını garanti eder."
  },
  {
    "question": "[column1] ve [column2] değerlerini birleştirerek hesaplanan bir sütun değeriyle [table_name] tablosuna veri ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2], [column3]) VALUES ([value1], [value2], [value1] || ' ' || [value2]);",
    "answer": "Yeni bir kayıt ekler ve [column3] değerini [value1] ve [value2]'nin birleşimi olarak hesaplar."
  },
  {
    "question": "[table_name] tablosundaki kayıtları güncelleyerek [column_name] değerini o sütunun ortalama değeri olarak ayarlayın.",
    "query": "UPDATE [table_name] SET [column_name] = (SELECT AVG([column_name]) FROM [table_name]);",
    "answer": "[table_name] tablosundaki tüm kayıtları günceller ve [column_name] değerini ortalama değeri olarak ayarlar."
  },
  {
    "question": "[new_table_name] adında yeni bir tablo oluşturun ve bir zaman damgası sütunu ekleyin.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [created_at] TIMESTAMP DEFAULT CURRENT_TIMESTAMP);",
    "answer": "Yeni bir tablo oluşturur ve yeni bir kayıt eklendiğinde [created_at] sütununa otomatik olarak geçerli zaman damgasını ekler."
  },
  {
    "question": "Başka bir tablodan belirli bir koşula göre veri ekleyin (alt sorgu kullanarak).",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [other_table].[column3] > [value];",
    "answer": "[other_table] tablosundan [column3] değeri [value] değerinden büyük olan verileri [table_name] tablosuna ekler."
  },
  {
    "question": "[column_name] sütununa göre yinelenen satırları silin, yalnızca ilk kaydı saklayın.",
    "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);",
    "answer": "[column_name] sütununa göre yinelenen satırları siler, yalnızca ilk kaydı saklar."
  },
  {
    "question": "[table_name] tablosuna bir kayıt ekleyin ve sütun değerlerinden biri için bir alt sorgu kullanın.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) VALUES ([value1], (SELECT [column2] FROM [other_table] WHERE [condition] LIMIT 1));",
    "answer": "[table_name] tablosuna yeni bir kayıt ekler, [column2] değerini [other_table] tablosundan bir alt sorgu ile alır."
  },
  {
    "question": "[referenced_table] tablosundaki birden fazla sütunu referans alan bileşik yabancı anahtarla yeni bir tablo oluşturun.",
    "query": "CREATE TABLE [new_table_name] ([column1] [data_type], [column2] [data_type], [foreign_column1] [data_type], [foreign_column2] [data_type], FOREIGN KEY ([foreign_column1], [foreign_column2]) REFERENCES [referenced_table]([referenced_column1], [referenced_column2]));",
    "answer": "[referenced_table] tablosundaki birden fazla sütunu referans alan bileşik yabancı anahtarla yeni bir tablo oluşturur."
  },
  {
    "question": "Bir koşula dayalı olarak bir sütun değerini ayarlayarak [table_name] tablosundaki kayıtları güncelleyin ve bir CASE ifadesi ekleyin.",
    "query": "UPDATE [table_name] SET [column_name] = CASE WHEN [column_name] > [value] THEN 'High' ELSE 'Low' END WHERE [condition];",
    "answer": "[table_name] tablosundaki kayıtları günceller, [column_name] değerini 'High' veya 'Low' olarak ayarlar."
  },
  {
    "question": "[table_name] tablosuna birden fazla sütuna benzersiz kısıtlama ekleyin.",
    "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] UNIQUE ([column1], [column2]);",
    "answer": "[table_name] tablosuna [column1] ve [column2] sütunlarına benzersiz kısıtlama ekler."
  },
  {
    "question": "[table_name] tablosundan verileri özetlemek için bir görünüm oluşturun.",
    "query": "CREATE VIEW [view_name] AS SELECT [column1], COUNT([column2]) FROM [table_name] GROUP BY [column1];",
    "answer": "[column2] sütununu [column1]'e göre gruplandırarak sayan bir görünüm oluşturur."
  },
  {
    "question": "Bir satır güncellendiğinde bir sütunu otomatik olarak geçerli zamana güncelleyen bir tetikleyici oluşturun.",
    "query": "CREATE TRIGGER update_timestamp BEFORE UPDATE ON [table_name] FOR EACH ROW EXECUTE FUNCTION update_timestamp_function();",
    "answer": "[table_name] tablosundaki bir kayıt güncellendiğinde [timestamp_column] sütununu güncelleyen bir tetikleyici oluşturur."
  },
  {
    "question": "[table_name] tablosunu kısaltın ve kimlik sütununu sıfırlayın.",
    "query": "TRUNCATE TABLE [table_name] RESTART IDENTITY;",
    "answer": "[table_name] tablosundaki tüm kayıtları kaldırır ve kimlik sütununu başlangıç değerine sıfırlar."
  },
  {
    "question": "Belirli bir tarihten daha eski kayıtları silin.",
    "query": "DELETE FROM [table_name] WHERE [date_column] < 'YYYY-MM-DD';",
    "answer": "[date_column] belirli bir tarihten daha eski olan kayıtları siler."
  },
  {
    "question": "Başka bir tablodan veri alarak [table_name] tablosuna bir kayıt ekleyin.",
    "query": "INSERT INTO [table_name] ([column1], [column2]) SELECT [column1], [column2] FROM [other_table] WHERE [column3] = 'specific_value';",
    "answer": "Başka bir tablodan seçme sorgusuna dayalı olarak [table_name] tablosuna veri ekler."
  },
  {
    "question": "Bir sütuna belirli bir aralıkta değerlerin olmasını sağlamak için CHECK kısıtlaması ekleyin.",
    "query": "ALTER TABLE [table_name] ADD CONSTRAINT [constraint_name] CHECK ([column_name] > 0 AND [column_name] < 100);",
    "answer": "[column_name] sütunundaki değerlerin 0 ile 100 arasında olmasını sağlamak için bir kısıtlama ekler."
  },
  {
    "question": "[column_name] sütununda yinelenen kayıtları silin, yalnızca ilk kaydı saklayın.",
    "query": "DELETE FROM [table_name] WHERE ctid NOT IN (SELECT MIN(ctid) FROM [table_name] GROUP BY [column_name]);",
    "answer": "[column_name] sütununa göre yinelenen kayıtları siler, yalnızca ilk kaydı saklar."
  },
  {
    "question": "[table_name] tablosunda tanımlı tetikleyiciler nelerdir?",
    "query": "SELECT trigger_name, event_manipulation FROM information_schema.triggers WHERE event_object_table = '[table_name]';",
    "answer": "Belirtilen tabloda tanımlı tetikleyicileri döndürür."
  },
  {
    "question": "Veritabanındaki tüm saklı yordamları listeleyin.",
    "query": "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';",
    "answer": "Public şemasındaki tüm saklı yordamları döndürür."
  },
  {
    "question": "[table_name] tablosunun mevcut şeması nedir?",
    "query": "SELECT table_schema FROM information_schema.tables WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablonun şemasını döndürür."
  },
  {
    "question": "[table_name] tablosunun diğer tablolarla olan yabancı anahtar ilişkilerini gösterin.",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Belirtilen tablonun diğer tablolarla olan yabancı anahtar ilişkilerini döndürür."
  },
  {
    "question": "[table_name] tablosunda indekslere sahip sütunlar nelerdir?",
    "query": "SELECT column_name FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki indekslere sahip sütunları döndürür."
  },
  {
    "question": "Veritabanındaki indekslerin boyutu nedir?",
    "query": "SELECT pg_size_pretty(pg_indexes_size('your_table'));",
    "answer": "Belirtilen tablodaki indekslerin boyutunu döndürür (PostgreSQL)."
  },
  {
    "question": "[table_name] tablosunda kaç indeks var?",
    "query": "SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki indekslerin sayısını döndürür."
  },
  {
    "question": "Veritabanındaki tüm indeks tanımlarını gösterin.",
    "query": "SELECT index_name, index_definition FROM information_schema.indexes WHERE table_schema = 'your_schema';",
    "answer": "Belirtilen şemadaki tüm indeks tanımlarını döndürür."
  },
  {
    "question": "[table_name] tablosunda kullanılan indeks türleri nelerdir?",
    "query": "SELECT index_name, index_type FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki indeks türlerini döndürür."
  },
  {
    "question": "[table_name] tablosuyla ilişkili indekslerin adları nelerdir?",
    "query": "SELECT index_name FROM information_schema.statistics WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki indekslerin adlarını döndürür."
  },
  {
    "question": "[table_name] tablosunda bileşik indeksler var mı? Varsa, hangi sütunlar dahil?",
    "query": "SELECT index_name, GROUP_CONCAT(column_name) AS columns_in_index FROM information_schema.statistics WHERE table_name = '[table_name]' GROUP BY index_name HAVING COUNT(column_name) > 1;",
    "answer": "Belirtilen tablodaki bileşik indeksleri ve her birine dahil olan sütunları döndürür."
  },
  {
    "question": "[table_name] tablosu için indeks oluşturma betiklerini gösterin.",
    "query": "SELECT pg_get_indexdef(indexrelid) FROM pg_index WHERE indrelid = '[table_name]'::regclass;",
    "answer": "Belirtilen tablo için indeks oluşturma betiklerini döndürür (PostgreSQL)."
  },
  {
    "question": "[table_name] tablosu ile diğer tablolar arasındaki yabancı anahtarlar nelerdir?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Belirtilen tablo ile diğer tablolar arasındaki yabancı anahtarları döndürür."
  },
  {
    "question": "[table_name] tablosunda kaç yabancı anahtar kısıtlaması var?",
    "query": "SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;",
    "answer": "Belirtilen tablodaki yabancı anahtar kısıtlamalarının sayısını döndürür."
  },
  {
    "question": "[table_name] tablosundaki yabancı anahtarlar için referans bütünlüğü kuralı nedir?",
    "query": "SELECT constraint_name, update_rule, delete_rule FROM information_schema.referential_constraints WHERE constraint_name IN (SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]');",
    "answer": "Belirtilen tablodaki yabancı anahtarlar için referans bütünlüğü kurallarını döndürür."
  },
  {
    "question": "[table_name] tablosundaki yabancı anahtarlar için tüm üst tabloları listeleyin.",
    "query": "SELECT DISTINCT referenced_table_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND referenced_table_name IS NOT NULL;",
    "answer": "Belirtilen tablodaki yabancı anahtarlar için tüm üst tabloları döndürür."
  },
  {
    "question": "[table_name] tablosuna yabancı anahtarlarla referans veren tüm alt tabloları listeleyin.",
    "query": "SELECT DISTINCT table_name FROM information_schema.key_column_usage WHERE referenced_table_name = '[table_name]';",
    "answer": "Belirtilen tabloya yabancı anahtarlarla referans veren tüm alt tabloları döndürür."
  },
  {
    "question": "[table_name] tablosundaki tüm kısıtlamaları listeleyin.",
    "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki tüm kısıtlamaları döndürür."
  },
  {
    "question": "[table_name] tablosunda yabancı anahtar ihlalleri var mı? Varsa, listeleyin.",
    "query": "SELECT * FROM [table_name] WHERE [foreign_key_column] NOT IN (SELECT referenced_column FROM referenced_table);",
    "answer": "Belirtilen tablodaki yabancı anahtar ihlallerini döndürür."
  },
  {
    "question": "[table_name] tablosundaki benzersiz kısıtlamaları gösterin.",
    "query": "SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'UNIQUE';",
    "answer": "Belirtilen tablodaki benzersiz kısıtlamaları döndürür."
  },
  {
    "question": "Veritabanındaki tüm CHECK kısıtlamalarını listeleyin.",
    "query": "SELECT constraint_name FROM information_schema.check_constraints WHERE constraint_schema = 'your_schema';",
    "answer": "Belirtilen şemadaki tüm CHECK kısıtlamalarını döndürür."
  },
  {
    "question": "[table_name] tablosundaki birincil anahtar kısıtlamalarına dahil olan sütunlar nelerdir?",
    "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = (SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = '[table_name]' AND constraint_type = 'PRIMARY KEY');",
    "answer": "Belirtilen tablodaki birincil anahtar kısıtlamalarına dahil olan sütunları döndürür."
  },
  {
    "question": "[table_name] tablosuna bağımlı görünümler nelerdir?",
    "query": "SELECT table_name FROM information_schema.view_table_usage WHERE referenced_table_name = '[table_name]';",
    "answer": "Belirtilen tabloya bağımlı olan görünümleri döndürür."
  },
  {
    "question": "[table_name] tablosundaki sütunların veri türlerini gösterin.",
    "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablodaki sütunların veri türlerini döndürür."
  },
  {
    "question": "[users/customers] tarafından en yaygın [product/behavior] kombinasyonu nedir?",
    "query": "SELECT product_id, COUNT(*) AS product_count FROM user_purchases GROUP BY product_id ORDER BY product_count DESC LIMIT 1;",
    "answer": "Kullanıcılar veya müşteriler tarafından en yaygın ürün veya davranış kombinasyonunu döndürür."
  },
  {
    "question": "Son [time_period] içinde geri bildirimde bulunan tüm [users/customers] bulun.",
    "query": "SELECT * FROM users WHERE feedback_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Son belirtilen süre içinde geri bildirimde bulunan tüm kullanıcıları veya müşterileri döndürür."
  },
  {
    "question": "Stokta az olan [products/records] bulun.",
    "query": "SELECT * FROM products WHERE stock_quantity < [threshold];",
    "answer": "Stokta az olan ürünleri veya kayıtları döndürür."
  },
  {
    "question": "Son [time_period] içinde satılmamış tüm [products] listeleyin.",
    "query": "SELECT * FROM products WHERE product_id NOT IN (SELECT product_id FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY);",
    "answer": "Son belirtilen süre içinde satılmamış tüm ürünleri döndürür."
  },
  {
    "question": "En yüksek [return/complaint] oranına sahip [products] bulun.",
    "query": "SELECT product_id, (returns_count / sales_count) AS return_rate FROM product_stats ORDER BY return_rate DESC LIMIT 1;",
    "answer": "En yüksek iade veya şikayet oranına sahip ürünleri döndürür."
  },
  {
    "question": "Son [time_period] içinde en çok satan [products] nelerdir?",
    "query": "SELECT product_id, SUM(quantity) AS total_sales FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY product_id ORDER BY total_sales DESC;",
    "answer": "Son belirtilen süre içinde en çok satan ürünleri döndürür."
  },
  {
    "question": "En uzun süredir satışta olan [products] bulun.",
    "query": "SELECT product_id, MIN(sale_date) AS first_sale_date FROM sales GROUP BY product_id ORDER BY first_sale_date ASC;",
    "answer": "En uzun süredir satışta olan ürünleri döndürür."
  },
  {
    "question": "[time_period] süresinden daha uzun süredir stokta olmayan [products] belirleyin.",
    "query": "SELECT product_id FROM product_stock WHERE last_stocked_date <= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Belirtilen süreden daha uzun süredir stokta olmayan ürünleri döndürür."
  },
  {
    "question": "[time_period] için toplam [revenue/cost] nedir?",
    "query": "SELECT SUM(revenue) AS total_revenue FROM sales WHERE sale_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Belirtilen süre için toplam geliri veya maliyeti döndürür."
  },
  {
    "question": "Belirli bir [time_period] için [expenses] bulun ve kategorilere ayırın.",
    "query": "SELECT category, SUM(amount) AS total_expenses FROM expenses WHERE expense_date >= CURDATE() - INTERVAL [time_period] DAY GROUP BY category;",
    "answer": "Belirli bir süre için giderleri döndürür ve türlerine göre kategorilere ayırır."
  },
  {
    "question": "En yüksek gelir getiren [items/products] nelerdir?",
    "query": "SELECT product_id, SUM(revenue) AS total_revenue FROM sales GROUP BY product_id ORDER BY total_revenue DESC LIMIT N;",
    "answer": "En yüksek gelir getiren N ürünü veya öğeyi döndürür."
  },
  {
    "question": "Toplam [pending/unpaid] [invoices/orders] miktarı nedir?",
    "query": "SELECT SUM(amount) AS total_pending FROM invoices WHERE status = 'pending';",
    "answer": "Toplam bekleyen veya ödenmemiş faturaları veya siparişleri döndürür."
  },
  {
    "question": "Son [time_period] içinde verilen toplam [discount/bonus] miktarı nedir?",
    "query": "SELECT SUM(discount_amount) AS total_discount FROM sales WHERE discount_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Son belirtilen süre içinde verilen toplam indirim veya bonus miktarını döndürür."
  },
  {
    "question": "Belirli bir [time_period] için [revenue/cost] ve [expenses/other_metric] karşılaştırın.",
    "query": "SELECT SUM(revenue) AS total_revenue, SUM(expenses) AS total_expenses FROM transactions WHERE transaction_date >= CURDATE() - INTERVAL [time_period] DAY;",
    "answer": "Belirli bir süre için gelir veya maliyeti giderler veya başka bir metrik ile karşılaştırır."
  },
  {
    "question": "PPC kampanyası için en iyi performans gösteren anahtar kelimeleri/reklam metinlerini belirleyin.",
    "query": "SELECT keyword, ad_copy, COUNT(*) AS performance_count FROM ppc_campaign_performance WHERE campaign_id = '[campaign_id]' GROUP BY keyword, ad_copy ORDER BY performance_count DESC LIMIT 1;",
    "answer": "Belirli bir PPC kampanyası için en iyi performans gösteren anahtar kelimeleri ve reklam metinlerini döndürür."
  },
  {
    "question": "Şüpheli fatura adresi/ödeme yöntemi olan tüm siparişleri/işlemleri listeleyin.",
    "query": "SELECT order_id, transaction_id, billing_address, payment_method FROM orders WHERE billing_address LIKE '%[suspicious_pattern]%' OR payment_method LIKE '%[suspicious_pattern]%';",
    "answer": "Şüpheli fatura adresi veya ödeme yöntemi olan tüm siparişleri veya işlemleri döndürür."
  },
  {
    "question": "Son [time_period] içinde iletişim bilgilerini güncellemeyen müşterileri/kullanıcıları bulun.",
    "query": "SELECT user_id, user_name FROM customers WHERE last_contact_update <= NOW() - INTERVAL '[time_period]';",
    "answer": "Belirtilen süre içinde iletişim bilgilerini güncellemeyen müşterileri veya kullanıcıları döndürür."
  },
  {
    "question": "Güvenlik/kalite standartlarına uymayan ürünleri/hizmetleri belirleyin.",
    "query": "SELECT product_id, product_name, compliance_status FROM products WHERE compliance_status = 'non-compliant';",
    "answer": "Güvenlik veya kalite standartlarına uymayan ürünleri veya hizmetleri döndürür."
  },
  {
    "question": "Dolandırıcılık tespit kuralına göre işaretlenen işlemler/siparişler nelerdir?",
    "query": "SELECT order_id, transaction_id, fraud_flag_reason FROM transactions WHERE fraud_detection_flag = true;",
    "answer": "Dolandırıcılık tespit kurallarına göre işaretlenen işlemleri veya siparişleri döndürür."
  },
  {
    "question": "Zorunlu eğitim/sertifikasyon için gecikmiş tüm çalışanları bulun.",
    "query": "SELECT employee_id, employee_name, training_due_date FROM employees WHERE training_due_date <= NOW() AND certification_status = 'pending';",
    "answer": "Zorunlu eğitim veya sertifikasyon için gecikmiş tüm çalışanları döndürür."
  },
  {
    "question": "Kritik alanlarda eksik veriye sahip kayıtları bulun.",
    "query": "SELECT * FROM [table_name] WHERE [field_name] IS NULL;",
    "answer": "Kritik alanlarda eksik veriye sahip kayıtları listeler."
  },
  {
    "question": "Müşteri veya ürün veritabanında yinelenen girişleri belirleyin.",
    "query": "SELECT [field_name], COUNT(*) FROM [table_name] GROUP BY [field_name] HAVING COUNT(*) > 1;",
    "answer": "Müşteri veya ürün veritabanında yinelenen girişleri bulur."
  },
  {
    "question": "[table_name] tablosundaki kayıtların yüzde kaçı eksik?",
    "query": "SELECT (COUNT(*) FILTER (WHERE [field_name] IS NULL) * 100.0) / COUNT(*) AS percentage_incomplete FROM [table_name];",
    "answer": "Belirtilen tablodaki eksik kayıtların yüzdesini hesaplar."
  },
  {
    "question": "Açıklaması veya ayrıntıları eksik olan ürün veya hizmetleri listeleyin.",
    "query": "SELECT product_id, product_name FROM products WHERE description IS NULL OR description = '' OR details IS NULL OR details = '';",
    "answer": "Açıklaması veya ayrıntıları eksik olan ürün veya hizmetleri bulur."
  },
  {
    "question": "Farklı alanlar veya sütunlar arasında tutarsız veri olup olmadığını kontrol edin.",
    "query": "SELECT * FROM [table_name] WHERE TO_CHAR([date_column], 'YYYY-MM-DD') != [date_column];",
    "answer": "Farklı alanlar veya sütunlar arasında tutarsız veriye sahip kayıtları belirler."
  },
  {
    "question": "Doğrulama kontrollerini geçemeyen kayıtları bulun.",
    "query": "SELECT * FROM [table_name] WHERE [validation_check_column] = 'failed';",
    "answer": "Doğrulama kontrollerini geçemeyen kayıtları listeler."
  },
  {
    "question": "Mevcut dönemdeki metric1 ile önceki dönemdeki metric2'yi karşılaştırın.",
    "query": "SELECT (SELECT SUM([metric1]) FROM [table_name] WHERE period = '[current_period]') AS current_period_value, (SELECT SUM([metric2]) FROM [table_name] WHERE period = '[previous_period]') AS previous_period_value;",
    "answer": "Mevcut dönemdeki metric1 ile önceki dönemdeki metric2'yi karşılaştırır."
  },
  {
    "question": "Aylık bazda metriklerin karşılaştırması nasıldır (örneğin, satışlar, giderler)?",
    "query": "SELECT TO_CHAR(transaction_date, 'YYYY-MM') AS month, SUM([sales]) AS monthly_sales, SUM([expenses]) AS monthly_expenses FROM transactions GROUP BY TO_CHAR(transaction_date, 'YYYY-MM') ORDER BY month;",
    "answer": "Aylık bazda satışlar ve giderler gibi metriklerin karşılaştırmasını sağlar."
  },
  {
    "question": "İki metrik bazında çalışan performansını karşılaştırın.",
    "query": "SELECT employee_id, employee_name, [metric1], [metric2] FROM employee_performance WHERE [metric1] IS NOT NULL AND [metric2] IS NOT NULL ORDER BY [metric1] DESC, [metric2] DESC;",
    "answer": "İki belirli metrik bazında çalışan performansını karşılaştırır."
  },
  {
    "question": "İki ürün için satış ve iadeleri karşılaştırın.",
    "query": "SELECT product_id, SUM(sales) AS total_sales, SUM(returns) AS total_returns FROM sales_data WHERE product_id IN ([product1_id], [product2_id]) GROUP BY product_id;",
    "answer": "İki belirli ürün için satış ve iadeleri karşılaştırır."
  },
  {
    "question": "İki dönem arasındaki büyüme oranı nedir?",
    "query": "SELECT (SUM([metric]) FILTER (WHERE period = '[current_period]') - SUM([metric]) FILTER (WHERE period = '[previous_period]')) * 100.0 / SUM([metric]) FILTER (WHERE period = '[previous_period]') AS growth_rate FROM [table_name];",
    "answer": "İki dönem arasındaki bir metrik için büyüme oranını hesaplar."
  },
  {
    "question": "Bir ürün için ortalama puan nedir?",
    "query": "SELECT AVG(rating) AS average_rating FROM product_reviews WHERE product_name = '[product_name]';",
    "answer": "Belirtilen ürün için ortalama puanı bulur."
  },
  {
    "question": "Belirli bir eşik değerinin altında puana sahip ürünleri listeleyin.",
    "query": "SELECT product_id, product_name FROM product_reviews WHERE rating < [X];",
    "answer": "Belirli bir eşik değerinin altında puana sahip ürünleri belirler."
  },
  {
    "question": "Belirli bir ürün için tüm yorumları bulun.",
    "query": "SELECT review_id, review_text, rating FROM product_reviews WHERE product_name = '[product_name]';",
    "answer": "Belirtilen ürün için tüm yorumları listeler."
  },
  {
    "question": "Müşteri geri bildirimleri ile iade veya şikayetler arasındaki ilişki nedir?",
    "query": "SELECT product_id, AVG(rating) AS avg_rating, SUM(returns) AS total_returns FROM product_reviews JOIN sales_data ON product_reviews.product_id = sales_data.product_id GROUP BY product_id HAVING SUM(returns) > 0;",
    "answer": "Müşteri geri bildirimleri ile iade veya şikayetler arasındaki ilişkiyi analiz eder."
  },
  {
    "question": "En yüksek müşteri memnuniyeti puanına sahip ürünler hangileridir?",
    "query": "SELECT product_id, product_name, AVG(rating) AS avg_rating FROM product_reviews GROUP BY product_id, product_name ORDER BY avg_rating DESC LIMIT 1;",
    "answer": "En yüksek müşteri memnuniyeti puanına sahip ürünleri belirler."
  },
  {
    "question": "Belirli bir zaman diliminde geç gönderilen siparişlerin yüzdesi nedir?",
    "query": "SELECT (COUNT(*) FILTER (WHERE shipment_date > promised_shipment_date) * 100.0) / COUNT(*) AS late_shipment_percentage FROM orders WHERE order_date BETWEEN '[start_date]' AND '[end_date]';",
    "answer": "Belirtilen zaman diliminde geç gönderilen siparişlerin yüzdesini hesaplar."
  },
  {
    "question": "Siparişin verilmesinden itibaren belirli bir gün sayısı içinde gönderilen siparişleri bulun.",
    "query": "SELECT order_id, order_date, shipment_date FROM orders WHERE shipment_date - order_date <= INTERVAL '[X] days';",
    "answer": "Siparişin verilmesinden itibaren belirtilen gün sayısı içinde gönderilen siparişleri listeler."
  },
  {
    "question": "Sipariş başına ortalama gönderim maliyeti ve işlem süresi nedir?",
    "query": "SELECT AVG(shipping_cost) AS avg_shipping_cost, AVG(shipping_duration) AS avg_processing_time FROM orders;",
    "answer": "Sipariş başına ortalama gönderim maliyeti ve işlem süresini hesaplar."
  },
  {
    "question": "Hızlı veya overnight gönderim gerektiren siparişleri listeleyin.",
    "query": "SELECT order_id, shipping_method FROM orders WHERE shipping_method IN ('expedited', 'overnight');",
    "answer": "Hızlı veya overnight gönderim gerektiren siparişleri belirler."
  },
  {
    "question": "Gönderimden sonra iptal edilen siparişleri bulun.",
    "query": "SELECT order_id, cancellation_date, shipment_date FROM orders WHERE cancellation_date > shipment_date;",
    "answer": "Gönderimden sonra iptal edilen siparişleri listeler."
  },
  {
    "question": "Son [X] gün içinde giriş yapan kullanıcılar kimlerdir?",
    "query": "SELECT user_id, username, last_login FROM users WHERE last_login > CURRENT_DATE - INTERVAL '[X] days';",
    "answer": "Son belirtilen gün sayısı içinde giriş yapan kullanıcıları bulur."
  },
  {
    "question": "Son [time_period] içinde kullanıcı veya müşteri kayıp oranı nedir?",
    "query": "SELECT (COUNT(DISTINCT user_id) FILTER (WHERE last_purchase_date < CURRENT_DATE - INTERVAL '[time_period]') * 100.0) / (SELECT COUNT(DISTINCT user_id) FROM users WHERE signup_date < CURRENT_DATE - INTERVAL '[time_period]') AS churn_rate FROM purchases;",
    "answer": "Belirtilen zaman diliminde kullanıcı veya müşteri kayıp oranını hesaplar."
  },
  {
    "question": "[time_period] içinde ilk ziyaretlerinden sonra satın alma yapmayan kullanıcıları bulun.",
    "query": "SELECT user_id, first_visit_date FROM users WHERE user_id NOT IN (SELECT user_id FROM purchases WHERE purchase_date > first_visit_date) AND first_visit_date BETWEEN CURRENT_DATE - INTERVAL '[time_period]' AND CURRENT_DATE;",
    "answer": "Belirtilen zaman diliminde ilk ziyaretlerinden sonra satın alma yapmayan kullanıcıları belirler."
  },
  {
    "question": "En yüksek yaşam boyu değere (LTV) sahip kullanıcılar kimlerdir?",
    "query": "SELECT user_id, SUM(purchase_amount) AS lifetime_value FROM purchases GROUP BY user_id ORDER BY lifetime_value DESC LIMIT 1;",
    "answer": "En yüksek yaşam boyu değere sahip kullanıcıları bulur."
  },
  {
    "question": "Satın alma sıklığına göre en üst [N] kullanıcıyı kimlerdir?",
    "query": "SELECT user_id, COUNT(*) AS purchase_count FROM purchases GROUP BY user_id ORDER BY purchase_count DESC LIMIT [N];",
    "answer": "Satın alma sıklığına göre en üst N kullanıcıyı listeler."
  },
  {
    "question": "Bir kullanıcının ilk ziyareti ile ilk satın alması arasındaki ortalama süre nedir?",
    "query": "SELECT AVG(DATEDIFF('day', first_visit_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(visit_date) AS first_visit_date, MIN(purchase_date) AS first_purchase_date FROM visits JOIN purchases ON visits.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;",
    "answer": "Bir kullanıcının ilk ziyareti ile ilk satın alması arasındaki ortalama süreyi hesaplar."
  },
  {
    "question": "Son [X] gün içinde siteye giriş yapmayan veya ziyaret etmeyen kullanıcıları listeleyin.",
    "query": "SELECT user_id, username, last_login FROM users WHERE last_login < CURRENT_DATE - INTERVAL '[X] days';",
    "answer": "Belirtilen gün sayısı içinde siteye giriş yapmayan veya ziyaret etmeyen kullanıcıları belirler."
  },
  {
    "question": "Son [time_period] içindeki kullanıcıların ortalama oturum süresi nedir?",
    "query": "SELECT AVG(session_duration) AS avg_session_duration FROM user_sessions WHERE session_date >= CURRENT_DATE - INTERVAL '[time_period]';",
    "answer": "Belirtilen zaman dilimindeki kullanıcıların ortalama oturum süresini hesaplar."
  },
  {
    "question": "Alışveriş sepetlerini terk eden kullanıcıları bulun.",
    "query": "SELECT user_id, cart_id, abandoned_date FROM shopping_carts WHERE abandoned_date IS NOT NULL;",
    "answer": "Alışveriş sepetlerini terk eden kullanıcıları listeler."
  },
  {
    "question": "En yüksek etkileşim veya aktivite seviyesine sahip kullanıcılar kimlerdir?",
    "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;",
    "answer": "En yüksek etkileşim veya aktivite seviyesine sahip kullanıcıları belirler."
  },
  {
    "question": "Son [time_period] içindeki kullanıcı başına ortalama sipariş sayısı nedir?",
    "query": "SELECT AVG(order_count) AS avg_orders_per_user FROM (SELECT user_id, COUNT(*) AS order_count FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_orders;",
    "answer": "Belirtilen zaman dilimindeki kullanıcı başına ortalama sipariş sayısını hesaplar."
  },
  {
    "question": "Onboarding sürecini tamamlamayan kullanıcıları listeleyin.",
    "query": "SELECT user_id, username FROM users WHERE onboarding_complete = false;",
    "answer": "Onboarding sürecini tamamlamayan kullanıcıları belirler."
  },
  {
    "question": "En yüksek yönlendirme oranına sahip kullanıcılar kimlerdir?",
    "query": "SELECT user_id, COUNT(*) AS referral_count FROM referrals GROUP BY user_id ORDER BY referral_count DESC LIMIT 1;",
    "answer": "En yüksek yönlendirme oranına sahip kullanıcıları bulur."
  },
  {
    "question": "Kullanıcı kaydı ile ilk satın alma arasındaki ortalama süre nedir?",
    "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;",
    "answer": "Kullanıcı kaydı ile ilk satın alma arasındaki ortalama süreyi hesaplar."
  },
  {
    "question": "Belirli bir eylemi veya görevi tamamlamayan kullanıcıları bulun.",
    "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_actions WHERE action_completed = true AND action_type = '[specific_action]');",
    "answer": "Belirli bir eylemi veya görevi tamamlamayan kullanıcıları listeler."
  },
  {
    "question": "En yüksek müşteri memnuniyeti puanına sahip kullanıcılar kimlerdir?",
    "query": "SELECT user_id, AVG(rating) AS avg_rating FROM user_reviews GROUP BY user_id ORDER BY avg_rating DESC LIMIT 1;",
    "answer": "En yüksek müşteri memnuniyeti puanına sahip kullanıcıları belirler."
  },
  {
    "question": "Son [time_period] içindeki kullanıcı başına ortalama destek bileti sayısı nedir?",
    "query": "SELECT AVG(ticket_count) AS avg_tickets_per_user FROM (SELECT user_id, COUNT(*) AS ticket_count FROM support_tickets WHERE ticket_date >= CURRENT_DATE - INTERVAL '[time_period]' GROUP BY user_id) AS user_tickets;",
    "answer": "Belirtilen zaman dilimindeki kullanıcı başına ortalama destek bileti sayısını hesaplar."
  },
  {
    "question": "Belirli bir eğitimi veya sertifikayı tamamlamayan kullanıcıları bulun.",
    "query": "SELECT user_id, username FROM users WHERE user_id NOT IN (SELECT user_id FROM user_certifications WHERE certification_completed = true AND certification_type = '[specific_certification]');",
    "answer": "Belirli bir eğitimi veya sertifikayı tamamlamayan kullanıcıları listeler."
  },
  {
    "question": "En yüksek etkileşim veya aktivite seviyesine sahip kullanıcılar kimlerdir?",
    "query": "SELECT user_id, COUNT(*) AS activity_count FROM user_activity GROUP BY user_id ORDER BY activity_count DESC LIMIT 1;",
    "answer": "En yüksek etkileşim veya aktivite seviyesine sahip kullanıcıları belirler."
  },
  {
    "question": "Kullanıcı kaydı ile ilk satın alma arasındaki ortalama süre nedir?",
    "query": "SELECT AVG(DATEDIFF('day', signup_date, first_purchase_date)) AS avg_conversion_time FROM (SELECT user_id, MIN(signup_date) AS signup_date, MIN(purchase_date) AS first_purchase_date FROM users JOIN purchases ON users.user_id = purchases.user_id GROUP BY user_id) AS conversion_times;",
    "answer": "Kullanıcı kaydı ile ilk satın alma arasındaki ortalama süreyi hesaplar."
  },
  {
    "question": "Veritabanındaki tüm tabloları bulun.",
    "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';",
    "answer": "Public şemasındaki tüm tabloları listeler."
  },
  {
    "question": "Veritabanındaki tüm oluşturulmuş tabloları bulun.",
    "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';",
    "answer": "Public şemasındaki tüm oluşturulmuş tabloları listeler."
  },
  {
    "question": "Belirli bir tablonun sütunlarını gösterin.",
    "query": "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '[table_name]';",
    "answer": "Belirtilen tablonun sütunlarını ve veri türlerini döndürür."
  },
  {
    "question": "Veritabanındaki tüm sütunları listeleyin.",
    "query": "SELECT table_name, column_name, data_type FROM information_schema.columns WHERE table_schema = 'public';",
    "answer": "Public şemasındaki tüm sütunları döndürür."
  },
  {
    "question": "Bir tablonun birincil anahtarını gösterin.",
    "query": "SELECT column_name FROM information_schema.key_column_usage WHERE table_name = '[table_name]' AND constraint_name = 'PRIMARY';",
    "answer": "Belirtilen tablonun birincil anahtar sütununu döndürür."
  },
  {
    "question": "Veritabanındaki tüm birincil anahtarları listeleyin.",
    "query": "SELECT table_name, column_name FROM information_schema.key_column_usage WHERE table_schema = 'public' AND constraint_name = 'PRIMARY';",
    "answer": "Public şemasındaki tüm birincil anahtarları döndürür."
  },
  {
    "question": "Bir tablonun yabancı anahtarlarını gösterin.",
    "query": "SELECT kcu.column_name, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_name = '[table_name]';",
    "answer": "Belirtilen tablonun yabancı anahtarlarını döndürür."
  },
  {
    "question": "Veritabanındaki tüm yabancı anahtarları listeleyin.",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name WHERE kcu.table_schema = 'public';",
    "answer": "Public şemasındaki tüm yabancı anahtarları döndürür."
  },
  {
    "question": "Veritabanındaki tüm yabancı anahtarları listeleyin.",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "Bu sorgu, veritabanındaki tüm yabancı anahtar ilişkilerini getirir."
  },
  {
    "question": "Veritabanımdaki tablolar arasındaki ilişkileri nasıl belirleyebilirim?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "Yabancı anahtarları ve referans aldıkları tabloları ve sütunları listeleyerek ilişkileri belirler."
  },
  {
    "question": "Veritabanımdaki yabancı anahtar kısıtlamalarını bulmak için hangi sorguyu kullanabilirim?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "Bu sorgu, yabancı anahtar kısıtlamalarının detaylarını, referans alan ve referans alınan tablolar ve sütunlar dahil olmak üzere sağlar."
  },
  {
    "question": "SQL'de yabancı anahtarların listesini nasıl alabilirim?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "Bu sorgu, veritabanındaki tüm tablolar arasındaki yabancı anahtar ilişkilerinin bir listesini oluşturur."
  },
  {
    "question": "Veritabanımdaki hangi tablolar yabancı anahtarlarla birbirine bağlı?",
    "query": "SELECT kcu.table_name AS fk_table, kcu.column_name AS fk_column, ccu.table_name AS referenced_table, ccu.column_name AS referenced_column FROM information_schema.key_column_usage kcu JOIN information_schema.constraint_column_usage ccu ON kcu.constraint_name = ccu.constraint_name;",
    "answer": "Bu sorgu, tablolar arasındaki ilişkileri, bağlayan sütunlar ve referans alınan tablolar dahil olmak üzere gösterir."
  },
  {
    "question": "Bir tabloya ait sütun adlarını listele.",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';",
    "answer": "Belirtilen tabloya ait tüm sütun adlarını döndürür."
  },
  {
    "question": "Bir tabloya ait sütunları nasıl listeleyebilirim?",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';",
    "answer": "Bu sorgu, belirtilen tablonun tüm sütunlarını listeler."
  },
  {
    "question": "Tablodaki sütun isimlerini öğrenmek için ne yapmalıyım?",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';",
    "answer": "Bu sorgu, tablodaki sütun isimlerini döndürür."
  },
  {
    "question": "Belirli bir tabloya ait sütun isimlerini sorgulama yöntemi nedir?",
    "query": "SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';",
    "answer": "Bu sorgu, ilgili tablonun sütun isimlerini getirir."
  }
]
